<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker快速入门</title>
    <url>/2019/12/03/Docker%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="什么是Docker？"><a href="#什么是Docker？" class="headerlink" title="什么是Docker？"></a>什么是Docker？</h2><p><code>Docker</code> 是一个开源的应用容器引擎，可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 <code>Linux</code> 机器上，也可以实现虚拟化</p>
<h2 id="为什么要用Docker"><a href="#为什么要用Docker" class="headerlink" title="为什么要用Docker"></a>为什么要用Docker</h2><h3 id="更高效的利用系统资源"><a href="#更高效的利用系统资源" class="headerlink" title="更高效的利用系统资源"></a>更高效的利用系统资源</h3><p>  由于容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，<code>Docker</code> 对系统资源的利用率更高。无论是应用执行速度、内存损耗或者文件存储速度，都要比传统虚拟机技术更高效。因此，相比虚拟机技术，一个相同配置的主机，往往可以运行更多数量的应用。</p>
<h3 id="更快速的启动时间"><a href="#更快速的启动时间" class="headerlink" title="更快速的启动时间"></a>更快速的启动时间</h3><p>  传统的虚拟机技术启动应用服务往往需要数分钟，而 <code>Docker</code> 容器应用，由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。<br><a id="more"></a></p>
<h3 id="一致的运行环境"><a href="#一致的运行环境" class="headerlink" title="一致的运行环境"></a>一致的运行环境</h3><p>  开发过程中一个常见的问题是环境一致性问题。由于开发环境、测试环境、生产环境不一致，导致有些 <code>bug</code> 并未在开发过程中被发现。而 <code>Docker</code> 的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 「这段代码在我机器上没问题啊」 这类问题</p>
<h3 id="持续交付和部署"><a href="#持续交付和部署" class="headerlink" title="持续交付和部署"></a>持续交付和部署</h3><p>  对开发和运维人员来说，最希望的就是一次创建或配置，可以在任意地方正常运行。</p>
<p>  使用 <code>Docker</code> 可以通过定制应用镜像来实现持续集成、持续交付、部署。开发人员可以通过 <code>Dockerfile</code> 来进行镜像构建，并结合 持续集成系统进行集成测试，而运维人员则可以直接在生产环境中快速部署该镜像，甚至结合 持续部署系统进行自动部署。</p>
<p>  而且使用 <code>Dockerfile</code> 使镜像构建透明化，不仅仅开发团队可以理解应用运行环境，也方便运维团队理解应用运行所需条件，帮助更好的生产环境中部署该镜像。</p>
<h3 id="更轻松的迁移"><a href="#更轻松的迁移" class="headerlink" title="更轻松的迁移"></a>更轻松的迁移</h3><p>  由于 <code>Docker</code> 确保了执行环境的一致性，使得应用的迁移更加容易。<code>Docker</code> 可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云，甚至是笔记本，其运行结果是一致的。因此用户可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。</p>
<h3 id="更轻松的维护和扩展"><a href="#更轻松的维护和扩展" class="headerlink" title="更轻松的维护和扩展"></a>更轻松的维护和扩展</h3><p>  使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单。此外，<code>Docker</code> 团队同各个开源项目团队一起维护了一大批高质量的 官方镜像，既可以直接在生产环境使用，又可以作为基础进一步定制，大大的降低了应用服务的镜像制作成本。</p>
<h3 id="对比传统虚拟机总结"><a href="#对比传统虚拟机总结" class="headerlink" title="对比传统虚拟机总结"></a>对比传统虚拟机总结</h3><table>
<thead>
<tr>
<th style="text-align:center">特性</th>
<th style="text-align:center">容器</th>
<th style="text-align:center">虚拟机</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">启动</td>
<td style="text-align:center">秒级</td>
<td style="text-align:center">分钟级</td>
</tr>
<tr>
<td style="text-align:center">硬盘使用</td>
<td style="text-align:center">一般为 MB</td>
<td style="text-align:center">一般为 GB</td>
</tr>
<tr>
<td style="text-align:center">性能</td>
<td style="text-align:center">接近原生</td>
<td style="text-align:center">弱于</td>
</tr>
<tr>
<td style="text-align:center">系统支持量</td>
<td style="text-align:center">单机支持上千个容器</td>
<td style="text-align:center">一般几十个</td>
</tr>
</tbody>
</table>
<p>以上摘自 <a href="https://yeasy.gitbooks.io/docker_practice/introduction/why.html" target="_blank" rel="external">https://yeasy.gitbooks.io/docker_practice/introduction/why.html</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol>
<li>注册账号 <a href="https://hub.docker.com/" target="_blank" rel="external">https://hub.docker.com/</a></li>
<li>下载安装Docker <a href="https://download.docker.com/mac/stable/Docker.dmg" target="_blank" rel="external">mac安装地址</a></li>
<li>命令行输入 <code>docker --version</code> 查看当前 <code>Docker</code> 版本</li>
<li>镜像加速，鉴于国内网络问题，后续拉取 Docker 镜像十分缓慢，我们可以需要配置加速器来解决。<code>Docker for mac 应用图标 -&gt; Perferences... -&gt; Daemon -&gt; Registry mirrors</code>，在列表中填写加速器地址 <code>http://hub-mirror.c.163.com</code>。修改完成之后点击 Apply &amp; Restart 按钮。最后我们输入命令行 <code>docker info</code> 查看当前使用的镜像</li>
</ol>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>我们先快速搭建一个<code>web</code>服务器<br>命令行输入<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">docker run -p 80 --name web -it centos /bin/bash</div></pre></td></tr></table></figure></p>
<p>然后安装 <code>nginx</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</div><div class="line">yum install -y nginx</div></pre></td></tr></table></figure></p>
<p>安装完成可以通过命令<code>whereis nginx</code>查看安装路径，最后输入一下命令<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">nginx</div></pre></td></tr></table></figure></p>
<p>最后我们执行 <code>ctrl + P + Q</code> 切换到后台，输入命令 <code>docker ps -a</code> 查看分配的端口号，我这里是端口号是32768</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">CONTAINER ID    IMAGE      COMMAND         CREATED            STATUS               PORTS                   NAMES</div><div class="line">3db42e2903a0    centos    &quot;/bin/bash&quot;    About a minute ago   Up About a minute    0.0.0.0:32768-&gt;80/tcp    web</div></pre></td></tr></table></figure>
<p>浏览器输入 <a href="http://localhost:32768" target="_blank" rel="external">http://localhost:32768</a> ，看到 <code>Welcome to nginx</code> 就算成功了</p>
<p>那么我们刚刚输入的一系列命令代表什么意思呢？</p>
<p>我们输入<code>docker run -p 80 --name web -it centos /bin/bash</code> </p>
<ul>
<li><code>docker run</code>表示运行一个新的容器，<code>Docker</code> 首先在本机中寻找该镜像，如果没有安装，<code>Docker</code> 在 <code>Docker Hub</code> 上查找该镜像并下载安装到本机，最后 <code>Docker</code> 创建一个新的容器并启动该程序</li>
<li><code>-i</code> 选项是让容器标准输入打开，就可以接受键盘输入了</li>
<li><code>-t</code> 选项是让docker分配一个伪终端，绑定到标准输入上。通过这个伪终端就可以像操作一台 <code>linux</code> 机器来操作这个容器了</li>
<li><code>--name</code> &lt;容器名称&gt; 选项为容器指定一个名称，这里是<code>web</code></li>
<li><code>-p 80</code> 告诉<code>docker</code>开放<code>80</code>端口</li>
</ul>
<p>我们需要注意的是，<code>docker run</code>每次都会创建一个新的容器，如果需要操作之前创建的容器</p>
<p>重启容器<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">docker start web</div></pre></td></tr></table></figure></p>
<p>进入容器<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">docker attach web</div></pre></td></tr></table></figure></p>
<p>停止容器<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">docker stop web</div></pre></td></tr></table></figure></p>
<h2 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h2><p>我们运行容器都需要镜像，上面我们使用到的的镜像是 <code>centos</code></p>
<p>查看本地镜像<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">docker images</div></pre></td></tr></table></figure></p>
<p>显示<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">nodejs                latest              779742e01ba3        2 weeks ago         907MB</div><div class="line">node                  latest              4ac0e1872789        5 weeks ago         933MB</div><div class="line">nginx                 latest              540a289bab6c        5 weeks ago         126MB</div><div class="line">nginx                 stable-alpine       aaad4724567b        6 weeks ago         21.2MB</div><div class="line">centos                latest              0f3e07c0138f        2 months ago        220MB</div></pre></td></tr></table></figure></p>
<ul>
<li><code>REPOSITORY</code>：仓库名称。</li>
<li><code>TAG</code>： 镜像标签，其中 lastest 表示最新版本。注意的是，一个镜像可以有多个标签，那么我们就可以通过标签来管理有用的版本和功能标签。</li>
<li><code>IMAGE ID</code> ：镜像唯一ID。</li>
<li><code>CREATED</code> ：创建时间。</li>
<li><code>SIZE</code> ：镜像大小。</li>
</ul>
<p>如果第一次我们通过 <code>docker pull centos:latest</code> 拉取镜像，那么当我们执行 <code>docker run -p 80 --name web -it centos /bin/bash</code> 时，它就不会再去远程获取了，因为本机中已经安装该镜像，所以 <code>Docker</code> 会直接创建一个新的容器并启动该程序。</p>
<p>事实上，镜像有很多，我们可以在 <a href="https://hub.docker.com" target="_blank" rel="external">https://hub.docker.com</a> 搜索仓库，输入框输入<code>nginx</code>，会出现很多nginx相关的镜像，我们也可以使用 <code>docker search nginx</code> 获取镜像列表<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ docker search nginx</div><div class="line"></div><div class="line">NAME                              DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</div><div class="line">nginx                             Official build of Nginx.                        12284               [OK]</div><div class="line">jwilder/nginx-proxy               Automated Nginx reverse proxy for docker con…   1696                                    [OK]</div><div class="line">richarvey/nginx-php-fpm           Container running Nginx + PHP-FPM capable of…   746                                     [OK]</div><div class="line">......</div></pre></td></tr></table></figure></p>
<p>直接通过 <code>docker pull nginx</code> 就可以拉取镜像</p>
<h2 id="构建自己的镜像"><a href="#构建自己的镜像" class="headerlink" title="构建自己的镜像"></a>构建自己的镜像</h2><p>要想构建自己的镜像，需要有一个<code>Dockerfile</code>文件，现在我们尝试把 <code>node</code> 程序 <code>Docker</code> 化</p>
<h3 id="创建-Node-js-应用"><a href="#创建-Node-js-应用" class="headerlink" title="创建 Node.js 应用"></a>创建 Node.js 应用</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"docker_web_app"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="string">"description"</span>: <span class="string">"Node.js on Docker"</span>,</div><div class="line">  <span class="string">"author"</span>: <span class="string">"First Last &lt;first.last@example.com&gt;"</span>,</div><div class="line">  <span class="string">"main"</span>: <span class="string">"server.js"</span>,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"start"</span>: <span class="string">"node server.js"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"dependencies"</span>: &#123;</div><div class="line">    <span class="string">"express"</span>: <span class="string">"^4.16.1"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后，创建一个 <code>server.js</code> 文件，使用 <code>Express.js</code> 框架定义一个 Web 应用<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"></div><div class="line"><span class="comment">// Constants</span></div><div class="line"><span class="keyword">const</span> PORT = <span class="number">8080</span>;</div><div class="line"><span class="keyword">const</span> HOST = <span class="string">'0.0.0.0'</span>;</div><div class="line"></div><div class="line"><span class="comment">// App</span></div><div class="line"><span class="keyword">const</span> app = express();</div><div class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</div><div class="line">  res.send(<span class="string">'Hello world\n'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(PORT, HOST);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">`Running on http://<span class="subst">$&#123;HOST&#125;</span>:<span class="subst">$&#123;PORT&#125;</span>`</span>);</div></pre></td></tr></table></figure></p>
<h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p>创建一个空文件，命名为 Dockerfile<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">touch Dockerfile</div></pre></td></tr></table></figure></p>
<p>Dockerfile<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># node版本为10的镜像</div><div class="line">FROM node:10</div><div class="line"></div><div class="line"># 应用程序工作目录</div><div class="line">WORKDIR /usr/src/app</div><div class="line"></div><div class="line"># 拷贝文件，有两种方法ADD、COPY，用法都一样，唯一不同的是 ADD  支持将归档文件（tar, gzip, bzip2, etc）做提取和解压操作</div><div class="line"># 注意的是，COPY 指令需要复制的目录一定要放在 Dockerfile 文件的同级目录下。</div><div class="line">COPY package*.json ./</div><div class="line"></div><div class="line"># 执行命令</div><div class="line">RUN npm install</div><div class="line"></div><div class="line">COPY . .</div><div class="line"></div><div class="line"># 暴露端口</div><div class="line">EXPOSE 8080</div><div class="line"></div><div class="line"># 执行命令 node server.js</div><div class="line">CMD [ &quot;node&quot;, &quot;server.js&quot; ]</div></pre></td></tr></table></figure></p>
<h3 id="dockerignore-文件"><a href="#dockerignore-文件" class="headerlink" title=".dockerignore 文件"></a>.dockerignore 文件</h3><p>在 <code>Dockerfile</code> 的同一个文件夹中创建一个 <code>.dockerignore</code> 文件，带有以下内容<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">node_modules</div><div class="line">npm-debug.log</div></pre></td></tr></table></figure></p>
<p>这将避免你的本地模块以及调试日志被拷贝进入到你的 <code>Docker</code> 镜像中，以至于把你镜像原有安装的模块给覆盖了</p>
<h3 id="构建你的镜像"><a href="#构建你的镜像" class="headerlink" title="构建你的镜像"></a>构建你的镜像</h3><p>构建需要一点时间<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">docker build -t wclimb/node-web-app .</div></pre></td></tr></table></figure></p>
<p>然后查看刚刚构建的镜像</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">docker images</div><div class="line"></div><div class="line">REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">wclimb/node-web-app   latest              04fe1cd8e0b2        49 seconds ago      907MB</div></pre></td></tr></table></figure>
<h3 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">docker run -p 49160:8080 -d wclimb/node-web-app</div></pre></td></tr></table></figure>
<p>查看刚刚运行的容器<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">docker ps </div><div class="line">CONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS              PORTS                               NAMES</div><div class="line">ffe453510350        wclimb/node-web-app   &quot;docker-entrypoint.s…&quot;   4 seconds ago       Up 3 seconds        8081/tcp, 0.0.0.0:49160-&gt;8080/tcp   unruffled_kare</div></pre></td></tr></table></figure></p>
<p>查看容器内的<code>log</code>信息<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">docker logs CONTAINER ID</div><div class="line">打印出</div><div class="line">Running on http://0.0.0.0:8080</div></pre></td></tr></table></figure></p>
<p>访问 <a href="http://0.0.0.0:8080" target="_blank" rel="external">http://0.0.0.0:8080</a> 出现<code>hello world</code></p>
<h3 id="将镜像推送到远程仓库"><a href="#将镜像推送到远程仓库" class="headerlink" title="将镜像推送到远程仓库"></a>将镜像推送到远程仓库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">docker push wclimb/node-web-app:v1</div></pre></td></tr></table></figure>
<p>格式为 <code>docker push [OPTIONS] NAME[:TAG]</code>，这里<code>TAG</code>为<code>v1</code></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此简单入门的<code>docker</code>教程就全部结束了，我们首先安装docker -&gt; 创建容器 -&gt; 搜索拉取镜像 -&gt; 构建自己的镜像(<code>Dockerfile</code>) -&gt; 发布镜像，文章大部分其实参阅了各个平台的教程或者文档。简单的<code>docker</code>就这样跑起来了，但是真正我们去使用的时候往往会有很多问题，用法也不是直接这么暴力的去使用，例如直接拉取 <code>centos</code> 镜像往里面安装 <code>nginx</code>，会很浪费资源，也没有做到真正的隔离环境。下一篇讲使用<code>docker-compose</code>讲多个容器组合起来，尽可能实战操作</p>
<h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://nodejs.org/zh-cn/docs/guides/nodejs-docker-webapp/" target="_blank" rel="external">把一个 Node.js web 应用程序给 Docker 化</a><br><a href="https://juejin.im/post/5cacbfd7e51d456e8833390" target="_blank" rel="external">30 分钟快速入门 Docker 教程</a><br><a href="https://yeasy.gitbooks.io/docker_practice/" target="_blank" rel="external">Docker — 从入门到实践</a></p>
<p>本文地址： <a href="http://www.wclimb.site/2019/12/03/Docker快速入门/">http://www.wclimb.site/2019/12/03/Docker快速入门/</a></p>
]]></content>
      <categories>
        <category>Docker</category>
        <category>教程</category>
      </categories>
      <tags>
        <tag>原创</tag>
        <tag>教程</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitlab-CI初探</title>
    <url>/2019/10/16/Gitlab-CI%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<p>因为项目一直都是使用<code>gitlab</code>进行自动化部署，但是都是前人种树，后人乘凉的现状。难得抽空花了一点时间来玩一下<code>gitlab</code>的<code>CI</code></p>
<p><a href="https://gitlab.com/help/ci/quick_start/README" target="_blank" rel="external">官方README</a></p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul>
<li>一台服务器</li>
<li>注册<code>gitlab</code>账号，并且新建一个项目</li>
</ul>
<h2 id="新建-gitlab-ci-yml"><a href="#新建-gitlab-ci-yml" class="headerlink" title="新建.gitlab-ci.yml"></a>新建.gitlab-ci.yml</h2><p>项目下新建文件 <code>.gitlab-ci.yml</code>，你也可以使用<code>Web IDE</code> 在线新建文件</p>
<h2 id="安装Gitlab-Runner到服务器"><a href="#安装Gitlab-Runner到服务器" class="headerlink" title="安装Gitlab Runner到服务器"></a>安装Gitlab Runner到服务器</h2><p>登录你的服务器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># For Debian/Ubuntu</div><div class="line">$ curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.deb.sh | sudo bash</div><div class="line">$ sudo apt-get install gitlab-ci-multi-runner</div><div class="line"># For CentOS</div><div class="line">$ curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.rpm.sh | sudo bash</div><div class="line">$ sudo yum install gitlab-ci-multi-runner</div></pre></td></tr></table></figure>
<a id="more"></a>
<ol>
<li><p>接下来注册一个<code>Runner</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo gitlab-runner register</div></pre></td></tr></table></figure>
</li>
<li><p>然后会出现以下提示，我们直接输入 <a href="https://gitlab.com" target="_blank" rel="external">https://gitlab.com</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com )</div><div class="line">https://gitlab.com</div></pre></td></tr></table></figure>
</li>
<li><p>输入<code>gitlab</code>新建项目<code>CI</code>的<code>token</code>，token在项目内的 <code>Setting</code> -&gt; <code>CI/CD</code> -&gt; <code>Runners</code>（点击<code>expand</code>展开）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Please enter the gitlab-ci token for this runner</div><div class="line">这里填token</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="/img/ci-token.jpg" alt=""></p>
<ol>
<li><p>输入<code>runner</code>的描述</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Please enter the gitlab-ci description for this runner</div><div class="line">这里随便填</div></pre></td></tr></table></figure>
</li>
<li><p>命名<code>tag</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Please enter the gitlab-ci tags for this runner (comma separated):</div><div class="line">my-tag // 每一个runner的唯一id，也可以在gitlab后台修改。</div></pre></td></tr></table></figure>
</li>
<li><p>是否接收未指定 <code>tags</code> 的任务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Whether to run untagged builds [true/false]</div><div class="line">[false]: false</div></pre></td></tr></table></figure>
</li>
<li><p>选择是否为当前项目锁定该 <code>Runner</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Whether to lock Runner to current project [true/false]:</div><div class="line">[false]: false</div></pre></td></tr></table></figure>
</li>
<li><p>选择 <code>Runner executor</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Please enter the executor: virtualbox, docker+machine, docker-ssh, shell, ssh, docker-ssh+machine, kubernetes, docker, parallels:</div><div class="line">shell  // 这里选shell，很多人使用的是docker</div><div class="line"></div><div class="line">// 最后会告诉你注册成功</div><div class="line">Runner registered successfully. Feel free to start it, but if it&apos;s running already the config should be automatically reloaded!</div></pre></td></tr></table></figure>
</li>
</ol>
<p>现在刷新一下之前复制token的地方看看，是不是刚刚新建的<code>runner</code>生效了</p>
<h2 id="Pipeline"><a href="#Pipeline" class="headerlink" title="Pipeline"></a>Pipeline</h2><p>一次 <code>Pipeline</code> 相当于一次构建任务，里面可以包含多个流程，如安装依赖、运行测试、编译、部署测试服务器、部署生产服务器等流程。我们的任何提交或者 <code>Merge Request</code> 的合并都可以触发 <code>Pipeline</code>。如下图：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">+------------------+           +----------------+</div><div class="line">|                  |  trigger  |                |</div><div class="line">|   Commit / MR    +----------&gt;+    Pipeline    |</div><div class="line">|                  |           |                |</div><div class="line">+------------------+           +----------------+</div></pre></td></tr></table></figure></p>
<h2 id="stages"><a href="#stages" class="headerlink" title="stages"></a>stages</h2><p><code>stages</code>表示构建阶段</p>
<ul>
<li>所有 <code>stages</code> 会按照顺序运行，即当一个 <code>stage</code> 完成后，下一个 <code>stage</code> 才会开始</li>
<li>只有当所有 <code>stages</code> 完成后，该构建任务 (Pipeline) 才会成功</li>
<li>如果任何一个 <code>stage</code> 失败，那么后面的 <code>stages</code> 不会执行，该构建任务 (Pipeline) 失败</li>
</ul>
<p>一个<code>Pipeline</code>会有多个<code>Stage</code>，一步步执行<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">+--------------------------------------------------------+</div><div class="line">|                                                        |</div><div class="line">|  Pipeline                                              |</div><div class="line">|                                                        |</div><div class="line">|  +-----------+     +------------+      +------------+  |</div><div class="line">|  |  Stage 1  |----&gt;|   Stage 2  |-----&gt;|   Stage 3  |  |</div><div class="line">|  +-----------+     +------------+      +------------+  |</div><div class="line">|                                                        |</div><div class="line">+--------------------------------------------------------+</div></pre></td></tr></table></figure></p>
<h2 id="配置-gitlab-ci-yml"><a href="#配置-gitlab-ci-yml" class="headerlink" title="配置.gitlab-ci.yml"></a>配置.gitlab-ci.yml</h2><p>之前我们新建了<code>.gitlab-ci.yml</code>，那么我们来填写一些内容，让<code>CI</code>变得可用<br><figure class="highlight yml"><table><tr><td class="code"><pre><div class="line"><span class="attr">stages:</span> </div><div class="line"><span class="bullet">    -</span> <span class="string">build</span></div><div class="line"><span class="bullet">    -</span> <span class="string">test</span></div><div class="line">    </div><div class="line"><span class="attr">job2:</span></div><div class="line"><span class="attr">  stage:</span> <span class="string">test</span> </div><div class="line"><span class="attr">  script:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">touch</span> <span class="string">test.json</span></div><div class="line"><span class="attr">  only:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">master</span>  </div><div class="line"><span class="attr">  tags:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">my-tag</span>  </div><div class="line">    </div><div class="line"><span class="attr">job1:</span></div><div class="line"><span class="attr">  stage:</span> <span class="string">build</span>  </div><div class="line"><span class="attr">  script:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">npm</span> <span class="string">init</span> <span class="bullet">-y</span></div><div class="line"><span class="attr">  only:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">master</span>  </div><div class="line"><span class="attr">  tags:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">my-tag</span></div></pre></td></tr></table></figure></p>
<ul>
<li><code>stages</code> 就是我们上面讲的构建阶段，这里有两个阶段，先<code>build</code>然后<code>test</code>，会先执行任务 <code>job1</code> 然后 执行 <code>job2</code>，这里<code>job1/2</code>名称可用随便取，不影响</li>
<li><code>stage</code> 表示构建的子任务</li>
<li><code>script</code> 执行的<code>shell</code>命令</li>
<li><code>only</code> 这里填写表示只有在<code>master</code>做操作的时候会触发这个构建</li>
<li><code>tags</code> 这就是我们之前在服务器命名的<code>tag</code>，必填</li>
</ul>
<p>我们把这个文件<code>push</code>到<code>master</code>，然后在 <code>CI/CD -&gt; Pipelines</code> 查看我们正在执行的任务</p>
<p><img src="/img/ci-pipe.jpg" alt=""></p>
<p>如果<code>status</code>显示<code>passed</code>了，则代表运行成功</p>
<p>至此，大功告成</p>
<h2 id="更改执行用户"><a href="#更改执行用户" class="headerlink" title="更改执行用户"></a>更改执行用户</h2><p>你可能在上面一步会发现 <code>npm not found</code>的情况，但是服务器已经安装了<code>node</code></p>
<p>因为<code>gitlab-ci</code>的<code>runner</code>默认使用<code>gitlab-runner</code>用户执行操作</p>
<p>通过指令<code>ps aux|grep gitlab-runner</code>可以看到：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">/usr/bin/gitlab-ci-multi-runner run --working-directory /home/gitlab-runner --config /etc/gitlab-runner/config.toml --service gitlab-runner --syslog --user gitlab-runner</div></pre></td></tr></table></figure>
<ul>
<li><p><code>--working-directory</code>：设置工作目录, 默认是/home/{执行user}</p>
</li>
<li><p><code>--config</code>：设置配置文件目录，默认是/etc/gitlab-runner/config.toml</p>
</li>
<li><p><code>--user</code>：设置执行用户名，默认是gitlab-runner</p>
</li>
</ul>
<p>因此想要更改<code>user</code>为<code>root</code>只需要重新设置<code>--user</code>属性即可，步骤如下：</p>
<ol>
<li><p>删除<code>gitlab-runner</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo gitlab-runner uninstall</div></pre></td></tr></table></figure>
</li>
<li><p>切换为<code>root</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">gitlab-runner install --working-directory /home/gitlab-runner --user root</div></pre></td></tr></table></figure>
</li>
<li><p>重启<code>gitlab-runner</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo service gitlab-runner restart</div></pre></td></tr></table></figure>
</li>
</ol>
<p>重新提交一下<code>.gitlab-cli.yaml</code>，应该就能够跑通了</p>
<p>原文地址： <a href="http://www.wclimb.site/2019/10/16/Gitlab-CI初探/">http://www.wclimb.site/2019/10/16/Gitlab-CI初探/</a></p>
]]></content>
      <categories>
        <category>工具</category>
        <category>自动化</category>
      </categories>
      <tags>
        <tag>原创</tag>
        <tag>gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP缓存——304与200 from cache</title>
    <url>/2018/03/06/HTTP%E7%BC%93%E5%AD%98%E2%80%94%E2%80%94304%E4%B8%8E200-from-cache/</url>
    <content><![CDATA[<h1 id="HTTP与缓存相关的字段"><a href="#HTTP与缓存相关的字段" class="headerlink" title="HTTP与缓存相关的字段"></a>HTTP与缓存相关的字段</h1><h2 id="1-通用字段"><a href="#1-通用字段" class="headerlink" title="1. 通用字段"></a>1. 通用字段</h2><table>
<thead>
<tr>
<th>字段名称</th>
<th>释义</th>
</tr>
</thead>
<tbody>
<tr>
<td>Cache-Control</td>
<td>控制缓存具体的行为</td>
</tr>
<tr>
<td>Pragma</td>
<td>HTTP1.0时的遗留字段，当值为”no-cache”时强制验证缓存</td>
</tr>
<tr>
<td>Date</td>
<td>创建报文的日期时间(启发式缓存阶段所用)</td>
</tr>
</tbody>
</table>
<h2 id="2-response字段"><a href="#2-response字段" class="headerlink" title="2. response字段"></a>2. response字段</h2><table>
<thead>
<tr>
<th>字段名称</th>
<th>释义</th>
</tr>
</thead>
<tbody>
<tr>
<td>ETag</td>
<td>服务器生成资源的唯一标识</td>
</tr>
<tr>
<td>Vary</td>
<td>代理服务器缓存的管理信息</td>
</tr>
<tr>
<td>Age</td>
<td>资源在缓存代理中存贮的时长(取决于max-age和s-maxage的大小)</td>
</tr>
</tbody>
</table>
<h2 id="3-request字段"><a href="#3-request字段" class="headerlink" title="3. request字段"></a>3. request字段</h2><table>
<thead>
<tr>
<th>字段名称</th>
<th>释义</th>
</tr>
</thead>
<tbody>
<tr>
<td>If-Match</td>
<td>条件请求，携带上一次请求中资源的ETag，服务器根据这个字段判断文件是否有新的修改</td>
</tr>
<tr>
<td>If-None-Match</td>
<td>和If-Match作用相反，服务器根据这个字段判断文件是否有新的修改</td>
</tr>
<tr>
<td>If-Modified-Since</td>
<td>比较资源前后两次访问最后的修改时间是否一致</td>
</tr>
<tr>
<td>If-Unmodified-Since</td>
<td>比较资源前后两次访问最后的修改时间是否一致</td>
</tr>
</tbody>
</table>
<h2 id="4-实体字段"><a href="#4-实体字段" class="headerlink" title="4. 实体字段"></a>4. 实体字段</h2><table>
<thead>
<tr>
<th>字段名称</th>
<th>释义</th>
</tr>
</thead>
<tbody>
<tr>
<td>Expires</td>
<td>告知客户端资源缓存失效的绝对时间</td>
</tr>
<tr>
<td>Last-Modified</td>
<td>资源最后一次修改的时间</td>
</tr>
</tbody>
</table>
<h2 id="协商缓存（304）"><a href="#协商缓存（304）" class="headerlink" title="协商缓存（304）"></a>协商缓存（304）</h2><blockquote>
<p>If-modified-Since/Last-Modified</p>
</blockquote>
<ul>
<li>浏览器在发送请求的时候服务器会检查请求头<code>request header</code>里面的<code>If-modified-Since</code>，如果最后修改时间相同则返回304，否则给返回头(<code>response header</code>)添加<code>last-Modified</code>并且返回数据(<code>response body</code>)。<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">if-modified-since:Wed, 31 May 2017 03:21:09 GMT</div><div class="line">if-none-match:&quot;42DD5684635105372FE7720E3B39B96A&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<blockquote>
<p>If-None-Match/Etag</p>
</blockquote>
<ul>
<li>浏览器在发送请求的时候服务器会检查请求头(<code>request header</code>)里面的<code>if-none-match</code>的值与当前文件的内容通过hash算法（<code>例如 nodejs: cryto.createHash(&#39;sha1&#39;)</code>）生成的内容摘要字符对比，相同则直接返回<code>304</code>，否则给返回头(<code>response header</code>)添加<code>etag</code>属性为当前的内容摘要字符，并且返回内容。<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">etag:&quot;42DD5684635105372FE7720E3B39B96A&quot;</div><div class="line">last-modified:Wed, 31 May 2017 03:21:09 GMT</div></pre></td></tr></table></figure>
</li>
</ul>
<p>请求头last-modified的日期与响应头的last-modified一致<br>请求头if-none-match的hash与响应头的etag一致<br>所用会返回<code>Status Code: 304</code></p>
<h2 id="强缓存（200-from-cache）"><a href="#强缓存（200-from-cache）" class="headerlink" title="强缓存（200 from cache）"></a>强缓存（200 from cache）</h2><ul>
<li><p>如果设置了<code>Expires</code>(XX时间过期)或者<code>Cache-Control（http1.0不支持）</code>(经历XX时间后过期)且没有过期，命中<code>cache</code>的情况下，<code>from cache</code>不去发出请求。如果强刷（如ctrl+r）会发起请求，但是如果没有修改会返回<code>304</code>内容未修改，如果已经改变则返回新内容。<code>max-age &gt; Expires</code>。</p>
</li>
<li><p><code>expires/cache-control</code>虽然是强缓存，但用户主动触发的刷新行为，还是会采用缓存协商的策略，主动触发的刷新行为包括点击刷新按钮、右键刷新、f5刷新、ctrl+f5刷新等。</p>
</li>
<li><p>当然如果在控制台里面选中了<code>disable cahce</code>则无论如何都会请求最新内容(304协商缓存、强缓存都无效)，因为1.不会检查本地是否有缓存。2.请求头信息(request header)既没有If-Modified-Since也没有If-None-Match来让服务端判断。地址栏输入的地址按下回车键，该地址页面请求（仅仅是该url）的<code>request header</code>都会带上<code>cache-contro:max-age=0</code>，所以不会命中强缓存，但是通过链接点击的地址会命中缓存</p>
</li>
<li><p>chrome下查看所有的from cache文件：chrome://view-http-cache/</p>
</li>
</ul>
<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ul>
<li>触发 200 from cache：</li>
</ul>
<ol>
<li>直接点击链接访问</li>
<li>输入网址按回车访问</li>
<li>二维码扫描</li>
</ol>
<ul>
<li>触发 304：</li>
</ul>
<ol>
<li>刷新页面时触发</li>
<li>设置了长缓存、但Entity Tags没有移除时触发</li>
</ol>
<h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p><img src="http://www.wclimb.site/cdn/cache.png" alt="流程图"></p>
<p>GitHub：<a href="https://github.com/wclimb" target="_blank" rel="external">wclimb</a></p>
<h2 id="个人小程序"><a href="#个人小程序" class="headerlink" title="个人小程序"></a>个人小程序</h2><p><img src="http://www.wclimb.site/cdn/xcx.jpeg" alt="img"></p>
]]></content>
      <categories>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>原创</tag>
        <tag>HTTP</tag>
        <tag>缓存</tag>
        <tag>Mysql</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript之Web Worker</title>
    <url>/2018/09/10/JavaScript%E4%B9%8BWeb-Worker/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><blockquote>
<p>Web Worker为Web内容在后台线程中运行脚本提供了一种简单的方法。线程可以执行任务而不干扰用户界面。此外，他们可以使用XMLHttpRequest执行 I/O  (尽管responseXML和channel属性总是为空)。一旦创建， 一个worker 可以将消息发送到创建它的JavaScript代码, 通过将消息发布到该代码指定的事件处理程序（反之亦然）。</p>
</blockquote>
<h1 id="Web-Worker使用要点"><a href="#Web-Worker使用要点" class="headerlink" title="Web Worker使用要点"></a>Web Worker使用要点</h1><ul>
<li><p>同源限制：分配给 Worker 线程运行的脚本文件，必须与主线程的脚本文件同源。</p>
</li>
<li><p>DOM 限制：Worker 线程所在的全局对象，与主线程不一样，无法读取主线程所在网页的 DOM 对象，也无法使用document、window、parent这些对象。但是，Worker 线程可以navigator对象和location对象。</p>
</li>
<li><p>通信联系：Worker 线程和主线程不在同一个上下文环境，它们不能直接通信，必须通过消息完成。</p>
</li>
<li><p>脚本限制：Worker 线程不能执行alert()方法和confirm()方法，但可以使用 XMLHttpRequest 对象发出 AJAX 请求。</p>
</li>
<li><p>文件限制：Worker 线程无法读取本地文件，即不能打开本机的文件系统（file://），它所加载的脚本，必须来自网络。后面我们允许会做处理。</p>
</li>
</ul>
<a id="more"></a>
<h1 id="安装http-server"><a href="#安装http-server" class="headerlink" title="安装http-server"></a>安装http-server</h1><p>Worker 线程无法读取本地文件，即不能打开本机的文件系统（file://），它所加载的脚本，必须来自网络。所以我们得起一个项目。使用<code>http-server</code>最简单<br>安装：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; cnpm i -g http-server</div></pre></td></tr></table></figure></p>
<p>使用：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; http-server</div></pre></td></tr></table></figure></p>
<h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><p>我们新建一个文件夹名叫<code>worker</code>，里面新建三个文件分别是<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">index.html</div><div class="line">main.js</div><div class="line">worker.js</div></pre></td></tr></table></figure></p>
<p>新建一个<code>worker</code>线程很简单，只需：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">var worker = new Worker(&apos;worker.js&apos;)</div></pre></td></tr></table></figure>
<p><code>main.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> worker = <span class="keyword">new</span> Worker(<span class="string">'./worker.js'</span>)</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'worker running'</span>)</div><div class="line">worker.addEventListener(<span class="string">'message'</span>,e =&gt; &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'main: '</span>, e.data);</div><div class="line">&#125;)</div><div class="line"><span class="comment">// 也可使用：</span></div><div class="line"><span class="comment">// worker.onmessage = (e)=&gt;&#123;</span></div><div class="line"><span class="comment">//     console.log('main: ', e.data);</span></div><div class="line"><span class="comment">// &#125;</span></div><div class="line">worker.postMessage(<span class="string">'hello worker,I am from main.js'</span>)</div></pre></td></tr></table></figure></p>
<p><code>worker.js</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">'worker task running'</span>)</div><div class="line">onmessage = <span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'worker task receive'</span>, e.data);</div><div class="line">    <span class="comment">// 发送数据事件</span></div><div class="line">    postMessage(<span class="string">'Hello, I am from Worker.js'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在worker文件夹下，命令行输入http-server,启动项目，用浏览器打开，看控制台：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">worker running</div><div class="line">worker task running</div><div class="line">worker task receive hello worker,I am from main.js</div><div class="line">main:  Hello, I am from Worker.js</div></pre></td></tr></table></figure></p>
<p>从上面可以看到，<code>worker</code>通过<code>onmessage</code>来监听数据，通过<code>postMessgae</code>来发送数据</p>
<h2 id="终止-worker"><a href="#终止-worker" class="headerlink" title="终止 worker"></a>终止 worker</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">worker.terminate();</div></pre></td></tr></table></figure>
<h2 id="处理错误"><a href="#处理错误" class="headerlink" title="处理错误"></a>处理错误</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">worker.addEventListener(&apos;error&apos;,  (e) =&gt; &#123;</div><div class="line">  console.log(&apos;main error&apos;, &apos;filename:&apos; + e.filename + &apos;message:&apos; + e.message + &apos;lineno:&apos; + e.lineno;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>event.filename: 导致错误的 Worker 脚本的名称；</li>
<li>event.message: 错误的信息；</li>
<li>event.lineno: 出现错误的行号；</li>
</ul>
<h2 id="加载外部脚本"><a href="#加载外部脚本" class="headerlink" title="加载外部脚本"></a>加载外部脚本</h2><p>main.js<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> worker = <span class="keyword">new</span> Worker(<span class="string">'./worker1.js'</span>);</div></pre></td></tr></table></figure></p>
<p>worker1.js<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">"I'm worker1"</span>)</div><div class="line">importScripts(<span class="string">'worker2.js'</span>, <span class="string">'worker3.js'</span>);</div><div class="line"><span class="comment">// 或者</span></div><div class="line"><span class="comment">// importScripts('worker2.js');</span></div><div class="line"><span class="comment">// importScripts('worker3.js');</span></div></pre></td></tr></table></figure></p>
<p>worker2.js<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">"I'm worker2"</span>)</div></pre></td></tr></table></figure></p>
<p>worker3.js<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">"I'm worker3"</span>)</div></pre></td></tr></table></figure></p>
<h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><p><a href="https://caniuse.com/#feat=webworkers" target="_blank" rel="external">https://caniuse.com/#feat=webworkers</a><br>兼容性还不是很乐观，不过在移动端的兼容性还不错</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers" target="_blank" rel="external">使用 Web Workers</a><br><a href="http://www.ruanyifeng.com/blog/2018/07/web-worker.html" target="_blank" rel="external">Web Worker 使用教程</a></p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>原创</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript之函数记忆</title>
    <url>/2018/07/12/JavaScript%E4%B9%8B%E5%87%BD%E6%95%B0%E8%AE%B0%E5%BF%86/</url>
    <content><![CDATA[<p>最近在读语言精粹，读到函数记忆这块，觉得有必要记录一下</p>
<p>我们在开发过程中经常使用递归的方式调用函数，但是开发过程中很少有关心性能问题</p>
<p>我们看一下下面这段代码<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> count = <span class="number">0</span></div><div class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">    count++</div><div class="line">    <span class="keyword">return</span> n &lt; <span class="number">2</span> ? n : f(n - <span class="number">1</span>) + f(n - <span class="number">2</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++)&#123;</div><div class="line">    <span class="built_in">console</span>.log(i,f(i))</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'执行次数'</span>, count)</div></pre></td></tr></table></figure></p>
<p>结果<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="number">0</span> <span class="number">0</span></div><div class="line"><span class="number">1</span> <span class="number">1</span></div><div class="line"><span class="number">2</span> <span class="number">1</span></div><div class="line"><span class="number">3</span> <span class="number">2</span></div><div class="line"><span class="number">4</span> <span class="number">3</span></div><div class="line"><span class="number">5</span> <span class="number">5</span></div><div class="line"><span class="number">6</span> <span class="number">8</span></div><div class="line"><span class="number">7</span> <span class="number">13</span></div><div class="line"><span class="number">8</span> <span class="number">21</span></div><div class="line"><span class="number">9</span> <span class="number">34</span></div><div class="line"><span class="number">10</span> <span class="number">55</span></div><div class="line"><span class="string">'执行次数'</span>, <span class="number">453</span></div></pre></td></tr></table></figure></p>
<p>执行一遍发现，f这个函数被调用了453次，我们调用了11次，而它自身调用了442次去计算可能已经被刚计算过的值。如果我们让函数具备记忆功能，就可以显著减少运算量。</p>
<p>接下来，我们定义一个memo的数组来保存我们得储存结果，并把它隐藏在闭包中，让该函数能一直访问到这个数组，不被垃圾回收机制回收</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> count = <span class="number">0</span></div><div class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> memo = [<span class="number">0</span>,<span class="number">1</span>];</div><div class="line">    <span class="keyword">var</span> fib = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">        count++</div><div class="line">        <span class="keyword">var</span> result = memo[n];</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> result !== <span class="string">'number'</span>)&#123;</div><div class="line">            result = fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</div><div class="line">            memo[n] = result</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> fib</div><div class="line">&#125;()</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++)&#123;</div><div class="line">    <span class="built_in">console</span>.log(i,f(i))</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'执行次数'</span>, count)</div></pre></td></tr></table></figure>
<p>执行结果<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="number">0</span> <span class="number">0</span></div><div class="line"><span class="number">1</span> <span class="number">1</span></div><div class="line"><span class="number">2</span> <span class="number">1</span></div><div class="line"><span class="number">3</span> <span class="number">2</span></div><div class="line"><span class="number">4</span> <span class="number">3</span></div><div class="line"><span class="number">5</span> <span class="number">5</span></div><div class="line"><span class="number">6</span> <span class="number">8</span></div><div class="line"><span class="number">7</span> <span class="number">13</span></div><div class="line"><span class="number">8</span> <span class="number">21</span></div><div class="line"><span class="number">9</span> <span class="number">34</span></div><div class="line"><span class="number">10</span> <span class="number">55</span></div><div class="line">执行次数 <span class="number">29</span></div></pre></td></tr></table></figure></p>
<p>现在f函数只被调用了29次，我们调用了它11次，它调用了18次去取得之前储存的结果。</p>
<p>先就分享到这吧，关键拓宽思路</p>
<p>GitHub：<a href="https://github.com/wclimb" target="_blank" rel="external">wclimb</a></p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>原创</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript之实现一个简单的Vue</title>
    <url>/2018/09/11/JavaScript%E4%B9%8B%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84Vue/</url>
    <content><![CDATA[<p><strong>补充：写一个较为强大的Vue，支持虚拟DOM、diff更新以及基本的API，项目地址：<a href="https://github.com/wclimb/euv" target="_blank" rel="external">https://github.com/wclimb/euv</a></strong></p>
<p>vue的使用相信大家都很熟练了，使用起来简单。但是大部分人不知道其内部的原理是怎么样的，今天我们就来一起实现一个简单的vue</p>
<h1 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty()"></a>Object.defineProperty()</h1><p>实现之前我们得先看一下<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="external">Object.defineProperty</a>的实现，因为vue主要是通过数据劫持来实现的，通过<code>get</code>、<code>set</code>来完成数据的读取和更新。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">'wclimb'</span>&#125;</div><div class="line"><span class="keyword">var</span> age = <span class="number">24</span></div><div class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">'age'</span>,&#123;</div><div class="line">	<span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="comment">// 可枚举</span></div><div class="line">    configurable: <span class="literal">false</span>, <span class="comment">// 不能再define</span></div><div class="line">    get () &#123;</div><div class="line">        <span class="keyword">return</span> age</div><div class="line">    &#125;,</div><div class="line">    set (newVal) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'我改变了'</span>,age +<span class="string">' -&gt; '</span>+newVal);</div><div class="line">        age = newVal</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">&gt; obj.age</div><div class="line">&gt; <span class="number">24</span></div><div class="line"></div><div class="line">&gt; obj.age = <span class="number">25</span>;</div><div class="line">&gt; 我改变了 <span class="number">24</span> -&gt; <span class="number">25</span></div><div class="line">&gt; <span class="number">25</span></div></pre></td></tr></table></figure>
<p>从上面可以看到通过<code>get</code>获取数据，通过<code>set</code>监听到数据变化执行相应操作，还是不明白的话可以去看看<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="external">Object.defineProperty</a>文档。<br><a id="more"></a></p>
<h1 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h1><p><img src="http://www.wclimb.site/img/vue.png" alt=""></p>
<h1 id="html代码结构"><a href="#html代码结构" class="headerlink" title="html代码结构"></a>html代码结构</h1><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;div id=&quot;wrap&quot;&gt;</div><div class="line">    &lt;p v-html=&quot;test&quot;&gt;&lt;/p&gt;</div><div class="line">    &lt;input type=&quot;text&quot; v-model=&quot;form&quot;&gt;</div><div class="line">    &lt;input type=&quot;text&quot; v-model=&quot;form&quot;&gt;</div><div class="line">    &lt;button @click=&quot;changeValue&quot;&gt;改变值&lt;/button&gt;</div><div class="line">    &#123;&#123;form&#125;&#125;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<h1 id="js调用"><a href="#js调用" class="headerlink" title="js调用"></a>js调用</h1><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#wrap'</span>,</div><div class="line">    <span class="attr">data</span>:&#123;</div><div class="line">        <span class="attr">form</span>: <span class="string">'这是form的值'</span>,</div><div class="line">        <span class="attr">test</span>: <span class="string">'&lt;strong&gt;我是粗体&lt;/strong&gt;'</span>,</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">methods</span>:&#123;</div><div class="line">        changeValue()&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.form)</div><div class="line">            <span class="keyword">this</span>.form = <span class="string">'值被我改变了，气不气？'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h1 id="Vue结构"><a href="#Vue结构" class="headerlink" title="Vue结构"></a>Vue结构</h1><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vue</span></span>&#123;</div><div class="line">    <span class="keyword">constructor</span>()&#123;&#125;</div><div class="line">    proxyData()&#123;&#125;</div><div class="line">    observer()&#123;&#125;</div><div class="line">    compile()&#123;&#125;</div><div class="line">    compileText()&#123;&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span></span>&#123;</div><div class="line">    <span class="keyword">constructor</span>()&#123;&#125;</div><div class="line">    update()&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>Vue constructor</code> 构造函数主要是数据的初始化</li>
<li><code>proxyData</code> 数据代理</li>
<li><code>observer</code> 劫持监听所有数据</li>
<li><code>compile</code> 解析dom</li>
<li><code>compileText</code> 解析<code>dom</code>里处理纯双花括号的操作</li>
<li><code>Watcher</code> 更新视图操作</li>
</ul>
<h1 id="Vue-constructor-初始化"><a href="#Vue-constructor-初始化" class="headerlink" title="Vue constructor 初始化"></a>Vue constructor 初始化</h1><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vue</span></span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(options = &#123;&#125;)&#123;</div><div class="line">        <span class="keyword">this</span>.$el = <span class="built_in">document</span>.querySelector(options.el);</div><div class="line">        <span class="keyword">let</span> data = <span class="keyword">this</span>.data = options.data; </div><div class="line">        <span class="comment">// 代理data，使其能直接this.xxx的方式访问data，正常的话需要this.data.xxx</span></div><div class="line">        <span class="built_in">Object</span>.keys(data).forEach(<span class="function">(<span class="params">key</span>)=&gt;</span> &#123;</div><div class="line">            <span class="keyword">this</span>.proxyData(key);</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">this</span>.methods = options.methods <span class="comment">// 事件方法</span></div><div class="line">        <span class="keyword">this</span>.watcherTask = &#123;&#125;; <span class="comment">// 需要监听的任务列表</span></div><div class="line">        <span class="keyword">this</span>.observer(data); <span class="comment">// 初始化劫持监听所有数据</span></div><div class="line">        <span class="keyword">this</span>.compile(<span class="keyword">this</span>.$el); <span class="comment">// 解析dom</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面主要是初始化操作，针对传过来的数据进行处理</p>
<h1 id="proxyData-代理data"><a href="#proxyData-代理data" class="headerlink" title="proxyData 代理data"></a>proxyData 代理data</h1><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vue</span></span>&#123;</div><div class="line">        <span class="keyword">constructor</span>(options = &#123;&#125;)&#123;</div><div class="line">            ......</div><div class="line">        &#125;</div><div class="line">        proxyData(key)&#123;</div><div class="line">            <span class="keyword">let</span> that = <span class="keyword">this</span>;</div><div class="line">            <span class="built_in">Object</span>.defineProperty(that, key, &#123;</div><div class="line">                <span class="attr">configurable</span>: <span class="literal">false</span>,</div><div class="line">                <span class="attr">enumerable</span>: <span class="literal">true</span>,</div><div class="line">                get () &#123;</div><div class="line">                    <span class="keyword">return</span> that.data[key];</div><div class="line">                &#125;,</div><div class="line">                set (newVal) &#123;</div><div class="line">                    that.data[key] = newVal;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>上面主要是代理<code>data</code>到最上层，<code>this.xxx</code>的方式直接访问<code>data</code></p>
<h1 id="observer-劫持监听"><a href="#observer-劫持监听" class="headerlink" title="observer 劫持监听"></a>observer 劫持监听</h1><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vue</span></span>&#123;</div><div class="line">        <span class="keyword">constructor</span>(options = &#123;&#125;)&#123;</div><div class="line">            ......</div><div class="line">        &#125;</div><div class="line">        proxyData(key)&#123;</div><div class="line">            ......</div><div class="line">        &#125;</div><div class="line">        observer(data)&#123;</div><div class="line">            <span class="keyword">let</span> that = <span class="keyword">this</span></div><div class="line">            <span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="params">key</span>=&gt;</span>&#123;</div><div class="line">                <span class="keyword">let</span> value = data[key]</div><div class="line">                <span class="keyword">this</span>.watcherTask[key] = []</div><div class="line">                <span class="built_in">Object</span>.defineProperty(data,key,&#123;</div><div class="line">                    <span class="attr">configurable</span>: <span class="literal">false</span>,</div><div class="line">                    <span class="attr">enumerable</span>: <span class="literal">true</span>,</div><div class="line">                    get()&#123;</div><div class="line">                        <span class="keyword">return</span> value</div><div class="line">                    &#125;,</div><div class="line">                    set(newValue)&#123;</div><div class="line">                        <span class="keyword">if</span>(newValue !== value)&#123;</div><div class="line">                            value = newValue</div><div class="line">                            that.watcherTask[key].forEach(<span class="function"><span class="params">task</span> =&gt;</span> &#123;</div><div class="line">                                task.update()</div><div class="line">                            &#125;)</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>同样是使用<code>Object.defineProperty</code>来监听数据，初始化需要订阅的数据。<br>把需要订阅的数据到<code>push</code>到<code>watcherTask</code>里，等到时候需要更新的时候就可以批量更新数据了。👇下面就是；<br>遍历订阅池，批量更新视图。<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">set(newValue)&#123;</div><div class="line">    <span class="keyword">if</span>(newValue !== value)&#123;</div><div class="line">        value = newValue</div><div class="line">        <span class="comment">// 批量更新视图</span></div><div class="line">        that.watcherTask[key].forEach(<span class="function"><span class="params">task</span> =&gt;</span> &#123;</div><div class="line">            task.update()</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="compile-解析dom"><a href="#compile-解析dom" class="headerlink" title="compile 解析dom"></a>compile 解析dom</h1><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vue</span></span>&#123;</div><div class="line">        <span class="keyword">constructor</span>(options = &#123;&#125;)&#123;</div><div class="line">            ......</div><div class="line">        &#125;</div><div class="line">        proxyData(key)&#123;</div><div class="line">            ......</div><div class="line">        &#125;</div><div class="line">        observer(data)&#123;</div><div class="line">            ......</div><div class="line">        &#125;</div><div class="line">        compile(el)&#123;</div><div class="line">            <span class="keyword">var</span> nodes = el.childNodes;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nodes.length; i++) &#123;</div><div class="line">                <span class="keyword">const</span> node = nodes[i];</div><div class="line">                <span class="keyword">if</span>(node.nodeType === <span class="number">3</span>)&#123;</div><div class="line">                    <span class="keyword">var</span> text = node.textContent.trim();</div><div class="line">                    <span class="keyword">if</span> (!text) <span class="keyword">continue</span>;</div><div class="line">                    <span class="keyword">this</span>.compileText(node,<span class="string">'textContent'</span>)                </div><div class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(node.nodeType === <span class="number">1</span>)&#123;</div><div class="line">                    <span class="keyword">if</span>(node.childNodes.length &gt; <span class="number">0</span>)&#123;</div><div class="line">                        <span class="keyword">this</span>.compile(node)</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span>(node.hasAttribute(<span class="string">'v-model'</span>) &amp;&amp; (node.tagName === <span class="string">'INPUT'</span> || node.tagName === <span class="string">'TEXTAREA'</span>))&#123;</div><div class="line">                        node.addEventListener(<span class="string">'input'</span>,(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">                            <span class="keyword">let</span> attrVal = node.getAttribute(<span class="string">'v-model'</span>)</div><div class="line">                            <span class="keyword">this</span>.watcherTask[attrVal].push(<span class="keyword">new</span> Watcher(node,<span class="keyword">this</span>,attrVal,<span class="string">'value'</span>))</div><div class="line">                            node.removeAttribute(<span class="string">'v-model'</span>)</div><div class="line">                            <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                                <span class="keyword">this</span>.data[attrVal] = node.value</div><div class="line">                            &#125;</div><div class="line">                        &#125;)())</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span>(node.hasAttribute(<span class="string">'v-html'</span>))&#123;</div><div class="line">                        <span class="keyword">let</span> attrVal = node.getAttribute(<span class="string">'v-html'</span>);</div><div class="line">                        <span class="keyword">this</span>.watcherTask[attrVal].push(<span class="keyword">new</span> Watcher(node,<span class="keyword">this</span>,attrVal,<span class="string">'innerHTML'</span>))</div><div class="line">                        node.removeAttribute(<span class="string">'v-html'</span>)</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">this</span>.compileText(node,<span class="string">'innerHTML'</span>)</div><div class="line">                    <span class="keyword">if</span>(node.hasAttribute(<span class="string">'@click'</span>))&#123;</div><div class="line">                        <span class="keyword">let</span> attrVal = node.getAttribute(<span class="string">'@click'</span>)</div><div class="line">                        node.removeAttribute(<span class="string">'@click'</span>)</div><div class="line">                        node.addEventListener(<span class="string">'click'</span>,e =&gt; &#123;</div><div class="line">                            <span class="keyword">this</span>.methods[attrVal] &amp;&amp; <span class="keyword">this</span>.methods[attrVal].bind(<span class="keyword">this</span>)()</div><div class="line">                        &#125;)</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        compileText(node,type)&#123;</div><div class="line">            <span class="keyword">let</span> reg = <span class="regexp">/\&#123;\&#123;(.*?)\&#125;\&#125;/g</span>, txt = node.textContent;</div><div class="line">            <span class="keyword">if</span>(reg.test(txt))&#123;</div><div class="line">                node.textContent = txt.replace(reg,(matched,value)=&gt;&#123;</div><div class="line">                    <span class="keyword">let</span> tpl = <span class="keyword">this</span>.watcherTask[value] || []</div><div class="line">                    tpl.push(<span class="keyword">new</span> Watcher(node,<span class="keyword">this</span>,value,type))</div><div class="line">                    <span class="keyword">if</span>(value.split(<span class="string">'.'</span>).length &gt; <span class="number">1</span>)&#123;</div><div class="line">                        <span class="keyword">let</span> v = <span class="literal">null</span></div><div class="line">                        value.split(<span class="string">'.'</span>).forEach(<span class="function">(<span class="params">val,i</span>)=&gt;</span>&#123;</div><div class="line">                            v = !v ? <span class="keyword">this</span>[val] : v[val]</div><div class="line">                        &#125;)</div><div class="line">                        <span class="keyword">return</span> v</div><div class="line">                    &#125;<span class="keyword">else</span>&#123;</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">this</span>[value]</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这里代码比较多，我们拆分看你就会觉得很简单了</p>
<ol>
<li>首先我们先遍历<code>el</code>元素下面的所有子节点，<code>node.nodeType === 3</code> 的意思是当前元素是文本节点，<code>node.nodeType === 1</code> 的意思是当前元素是元素节点。因为可能有的是纯文本的形式，如<code>纯双花括号</code>就是纯文本的文本节点，然后通过判断元素节点是否还存在子节点，如果有的话就递归调用<code>compile</code>方法。下面重头戏来了，我们拆开看：<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span>(node.hasAttribute(<span class="string">'v-html'</span>))&#123;</div><div class="line">    <span class="keyword">let</span> attrVal = node.getAttribute(<span class="string">'v-html'</span>);</div><div class="line">    <span class="keyword">this</span>.watcherTask[attrVal].push(<span class="keyword">new</span> Watcher(node,<span class="keyword">this</span>,attrVal,<span class="string">'innerHTML'</span>))</div><div class="line">    node.removeAttribute(<span class="string">'v-html'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>上面这个首先判断node节点上是否有<code>v-html</code>这种指令，如果存在的话，我们就发布订阅，怎么发布订阅呢？只需要把当前需要订阅的数据<code>push</code>到<code>watcherTask</code>里面，然后到时候在设置值的时候就可以批量更新了，实现双向数据绑定，也就是下面的操作<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">that.watcherTask[key].forEach(<span class="function"><span class="params">task</span> =&gt;</span> &#123;</div><div class="line">    task.update()</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>然后<code>push</code>的值是一个<code>Watcher</code>的实例，首先他new的时候会先执行一次，执行的操作就是去把<code>纯双花括号</code> -&gt; 1，也就是说把我们写好的模板数据更新到模板视图上。<br>最后把当前元素属性剔除出去，我们用<code>Vue</code>的时候也是看不到这种指令的，不剔除也不影响</p>
<p>至于<code>Watcher</code>是什么，看下面就知道了</p>
<h1 id="Watcher"><a href="#Watcher" class="headerlink" title="Watcher"></a>Watcher</h1><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span></span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(el,vm,value,type)&#123;</div><div class="line">        <span class="keyword">this</span>.el = el;</div><div class="line">        <span class="keyword">this</span>.vm = vm;</div><div class="line">        <span class="keyword">this</span>.value = value;</div><div class="line">        <span class="keyword">this</span>.type = type;</div><div class="line">        <span class="keyword">this</span>.update()</div><div class="line">    &#125;</div><div class="line">    update()&#123;</div><div class="line">        <span class="keyword">this</span>.el[<span class="keyword">this</span>.type] = <span class="keyword">this</span>.vm.data[<span class="keyword">this</span>.value]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>之前发布订阅之后走了这里面的操作，意思就是把当前元素如：node.innerHTML = ‘这是data里面的值’、node.value = ‘这个是表单的数据’</p>
<p>那么我们为什么不直接去更新呢，还需要<code>update</code>做什么，不是多此一举吗？<br>其实<code>update</code>记得吗？我们在订阅池里面需要批量更新，就是通过调用<code>Watcher</code>原型上的<code>update</code>方法。</p>
<h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><a href="http://www.wclimb.site/myVue">在线效果地址</a>，大家可以浏览器看一下效果，由于本人太懒了，<code>gif</code>效果图就先不放了，哈哈😄😄</p>
<h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><p>完整代码已经放到<code>github</code>上了 -&gt; <a href="https://github.com/wclimb/MyVue" target="_blank" rel="external">MyVue</a></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://segmentfault.com/a/1190000006599500" target="_blank" rel="external">剖析Vue原理&amp;实现双向绑定MVVM</a><br><a href="https://segmentfault.com/a/1190000015375217" target="_blank" rel="external">仿Vue实现极简双向绑定</a></p>
<h1 id="QQ群"><a href="#QQ群" class="headerlink" title="QQ群"></a>QQ群</h1><p>有兴趣的同学可以加qq群: 725165362 <a href="http://shang.qq.com/wpa/qunwpa?idkey=e6c66b1ee584a90b52dec3545622e988afcf900144eff03cab6d473c50a31d59" target="_blank" rel="external">点击加入</a></p>
]]></content>
      <categories>
        <category>javascript</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>原创</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript之原型与原型链</title>
    <url>/2018/06/13/JavaScript%E4%B9%8B%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    <content><![CDATA[<h1 id="万物皆对象"><a href="#万物皆对象" class="headerlink" title="万物皆对象"></a>万物皆对象</h1><p>在JavaScript中除值类型之外，其他的都是对象，为了说明这点，我们举几个例子<br>我们可以使用<code>typeof</code>来做类型判断</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">typeof</span> a;             <span class="comment">// undefined</span></div><div class="line"><span class="keyword">typeof</span> <span class="number">1</span>;             <span class="comment">// number</span></div><div class="line"><span class="keyword">typeof</span> <span class="string">'wclimb'</span>;      <span class="comment">// string</span></div><div class="line"><span class="keyword">typeof</span> <span class="literal">true</span>;          <span class="comment">// boolean</span></div><div class="line"></div><div class="line"><span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;  <span class="comment">// function</span></div><div class="line"><span class="keyword">typeof</span> [];            <span class="comment">// object</span></div><div class="line"><span class="keyword">typeof</span> <span class="literal">null</span>;          <span class="comment">// object</span></div><div class="line"><span class="keyword">typeof</span> &#123;&#125;;            <span class="comment">// object</span></div></pre></td></tr></table></figure>
<p>除了<code>undefined</code>、<code>number</code>、<code>string</code>、<code>boolean</code>属于值类型之外，其他都是对象。你可能要问了，不是还有一个是<code>function</code>吗？要校验他是不是应该对象可以这样做:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">fn <span class="keyword">instanceof</span> <span class="built_in">Object</span> <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<p>由上面的例子所示，函数确实是对象，为什么呢？我们看一下下面的例子<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name; </div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">'wclimb'</span>);</div><div class="line"><span class="built_in">console</span>.log(person) <span class="comment">// Person &#123;name: "wclimb"&#125;</span></div></pre></td></tr></table></figure></p>
<p>由此我们可以得知，对象都是通过函数创建的，这么说你可能又会说不对，你看下面的就不是函数创建的<br><a id="more"></a><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> person = &#123;<span class="attr">name</span>:<span class="string">'wclimb'</span>&#125;</div></pre></td></tr></table></figure></p>
<p>你咋就这么飘呢？我竟无言以对，没错，这是个意外、意外、意外。但是归根结底他还是通过函数创建的<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>()</div><div class="line">person.name = <span class="string">'wclimb'</span></div></pre></td></tr></table></figure></p>
<p>so，现在你只要知道对象是通过函数创建的就可以了，来跟着我读：<br>第一遍 对象都是通过函数创建的<br>第二遍 对象都是通过函数创建的<br>第三遍 对象都是通过函数创建的</p>
<h1 id="构造函数-constructor"><a href="#构造函数-constructor" class="headerlink" title="构造函数(constructor)"></a>构造函数(constructor)</h1><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'wclimb 1'</span>)</div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">'wclimb 2'</span>)</div></pre></td></tr></table></figure>
<p>上面<code>Person</code>就是一个构造函数，我们通过<code>new</code>的方式创建了一个实例对象<code>person</code><br>我们来看看person1和person2的<code>constructor</code>(构造函数)是不是指向Person的<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">person1.constructor === Person <span class="comment">// true</span></div><div class="line">person2.constructor === Person <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<h1 id="原型-prototype"><a href="#原型-prototype" class="headerlink" title="原型(prototype)"></a>原型(prototype)</h1><p>在JavaScript中，每定义一个函数都会产生一个<code>prototype</code>(原型)属性，这个属性指向函数的原型对象<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">Person.prototype.name = <span class="string">'wclimb'</span></div><div class="line">Person.prototype.age = <span class="string">'24'</span></div><div class="line">Person.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.age)</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person()</div><div class="line">person.sayAge(); <span class="comment">//  24</span></div></pre></td></tr></table></figure></p>
<p>那么这个<code>prototype</code>到底是什么呢？跟构造函数有关系吗？</p>
<p><img src="/img/prototype.png" alt=""></p>
<p>上图就可以反映出他们之间的关系</p>
<p>其实函数的<code>prototype</code>指向函数的原型对象，每个对象都会关联另外一个对象，也就是原型，上面的例子改成：<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">Person.prototype = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'wclimb'</span>,</div><div class="line">    <span class="attr">age</span>: <span class="number">24</span>,</div><div class="line">    <span class="attr">satAge</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.age)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="隐式原型-proto"><a href="#隐式原型-proto" class="headerlink" title="隐式原型(__proto__)"></a>隐式原型(<code>__proto__</code>)</h1><p>上面我们说到每定义一个函数都会产生一个原型，每个函数它不止有原型，还有一个<code>__proto__</code>(隐式原型)<br>每个对象都有一个<code>__proto__</code>属性，指向创建该对象函数的<code>prototype</code>，我们可以来试试，还是上面的例子：<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person()</div><div class="line">person.__proto__ === Person.prototype <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<p>现在他们的关系图如下</p>
<p><img src="/img/proto.png" alt=""></p>
<p>由上图我们可以知道：<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">Person.prototype.constructor = Person</div><div class="line">person.__proto__ = Person.prototype</div><div class="line">person.constructor = Person</div></pre></td></tr></table></figure></p>
<p>我们可以看到<code>person.__proto__</code>指向构造函数的原型，那么构造函数的原型即<code>Person</code>的<code>__proto__</code>指向哪里呢？<br>我们知道构造函数其实就是由<code>Function</code>来创建的，由此得出:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">Person.__proto__ === <span class="built_in">Function</span>.prototype</div></pre></td></tr></table></figure></p>
<p>那么构造函数的原型即<code>Person.prototype</code>的<code>__proto__</code>指向哪里呢？<br>原型对象其实是通过<code>Object</code>生成的，自然而然的得出:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">Person.prototype.__proto__ === <span class="built_in">Object</span>.prototype</div></pre></td></tr></table></figure></p>
<p>那么<code>Object.prototype</code>的<code>__proto__</code>指向哪里呢？答案是<code>null</code>，最终得到下面的图</p>
<p><img src="/img/allProto.png" alt=""></p>
<p>抛开这张图，来看看下面几道题</p>
<ol>
<li><code>person.__proto__</code></li>
<li><code>Person.__proto__</code></li>
<li><code>Person.prototype.__proto__</code></li>
<li><code>Object.__proto__</code></li>
<li><code>Object.prototype.__proto__</code></li>
</ol>
<p>解：</p>
<ol>
<li>每个对象都有一个<code>__proto__</code>属性，指向创建该对象函数的<code>prototype</code>，因为Person是person的构造函数<br><code>Person === person.constructor</code>为<code>true</code>,所以：<code>person.__proto__ === Person.prototype</code></li>
<li><code>Person</code>构造函数是由<code>Function</code>创建的，所以可以得出<code>Person.__proto__ === Fucntion.prototype</code></li>
<li>我们上面说过<code>Person.prototype</code>其实是一个对象，而对象是由<code>Object</code>创建的，所以 <code>Person.prototype.__proto__ === Object.prototype</code></li>
<li><code>Object</code>对象都是函数创建的，所以<code>Object.__proto__ === Function.prototype</code></li>
<li>虽然<code>Object.prototype</code>是一个对象但是他的<code>__proto__</code>为<code>null</code></li>
</ol>
<h1 id="实例和原型"><a href="#实例和原型" class="headerlink" title="实例和原型"></a>实例和原型</h1><p>当我们要取一个值的时候，会先从实例中取，如果实例中存在，则取实例的值，如果实例不存在，则会顺着原型里找，直到找到</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">Person.prototype.name = <span class="string">'我来自原型'</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person()</div><div class="line">person.name = <span class="string">'我来自实例'</span></div><div class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// 我来自实例</span></div><div class="line"><span class="keyword">delete</span> person.name</div><div class="line"><span class="built_in">console</span>.log(person.name)); <span class="comment">// 我来自原型</span></div></pre></td></tr></table></figure>
<p>首先person实例中有这个属性，返回<code>我来自实例</code>,然后将它删除之后，会从原型中招，也就是<code>person.__proto__</code>，因为<code>Person.prototype === person.__proto__</code>，所以得到<code>我来自原型</code></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>原型和原型链基本已经讲解完，不过还有待完善，如有错误，还望指正</p>
<p>GitHub：<a href="https://github.com/wclimb" target="_blank" rel="external">wclimb</a></p>
<h1 id="个人小程序"><a href="#个人小程序" class="headerlink" title="个人小程序"></a>个人小程序</h1><p><img src="http://www.wclimb.site/cdn/xcx.jpeg" alt="img"></p>
<h1 id="QQ群"><a href="#QQ群" class="headerlink" title="QQ群"></a>QQ群</h1><p>有兴趣的同学可以加qq群: 725165362 <a href="http://shang.qq.com/wpa/qunwpa?idkey=e6c66b1ee584a90b52dec3545622e988afcf900144eff03cab6d473c50a31d59" target="_blank" rel="external">点击加入</a></p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>原创</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript之实现一个简单的promise</title>
    <url>/2018/09/09/JavaScript%E4%B9%8B%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84promise/</url>
    <content><![CDATA[<p>我们在开发过程中大多会用到<code>promise</code>，想必大家对<code>promise</code>的使用都很熟练了，今天我们就来实现一个简单的<code>promise</code>，实现的效果如有出入还往指正。</p>
<h2 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h2><p>我们先来梳理一下整体的结果，以便后续好操作</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(fn)&#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    resolve()&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    then()&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    reject()&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span>()&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="Promise理论知识"><a href="#Promise理论知识" class="headerlink" title="Promise理论知识"></a>Promise理论知识</h2><blockquote>
<p>摘抄至 <a href="http://es6.ruanyifeng.com/#docs/promise#Promise-all" target="_blank" rel="external">http://es6.ruanyifeng.com/#docs/promise#Promise-all</a></p>
</blockquote>
<p><code>Promise</code>对象有以下两个特点。</p>
<p>（1）对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。</p>
<p>（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变为rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</p>
<p>总结一下就是promise有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败），还有就是状态的改变只能是pending -&gt; fulfilled 或者 pending -&gt; rejected，这些很重要</p>
<h2 id="实现构造函数"><a href="#实现构造函数" class="headerlink" title="实现构造函数"></a>实现构造函数</h2><p>现在我们开始实现构造函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(fn)&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> fn !== <span class="string">'function'</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">`MyPromise fn <span class="subst">$&#123;fn&#125;</span> is not a function`</span>)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.state = <span class="string">'pending'</span>;</div><div class="line">        <span class="keyword">this</span>.value = <span class="keyword">void</span> <span class="number">0</span>;</div><div class="line">        fn(<span class="keyword">this</span>.resolve.bind(<span class="keyword">this</span>),<span class="keyword">this</span>.reject.bind(<span class="keyword">this</span>))</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>构造函数接收一个参数<code>fn</code>，且这个参数必须是一个函数，因为我们一般这样使用<code>new Promise((resolve,reject)=&gt;{})</code>;<br>然后初始化一下promise的状态，默认开始为pending，初始化value的值。<br><code>fn</code>接收两个参数，<code>resolve</code>、<code>reject</code></p>
<h2 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(fn)&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> fn !== <span class="string">'function'</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">`MyPromise fn <span class="subst">$&#123;fn&#125;</span> is not a function`</span>)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.state = <span class="string">'pending'</span>;</div><div class="line">        <span class="keyword">this</span>.value = <span class="keyword">void</span> <span class="number">0</span>;</div><div class="line">        fn(<span class="keyword">this</span>.resolve.bind(<span class="keyword">this</span>),<span class="keyword">this</span>.reject.bind(<span class="keyword">this</span>))</div><div class="line">    &#125;</div><div class="line">    resolve(value)&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.state !== <span class="string">'pending'</span>) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">this</span>.state = <span class="string">'fulfilled'</span>;</div><div class="line">        <span class="keyword">this</span>.value = value</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当<code>resolve</code>执行，接收到一个值之后；状态就由 <code>pending</code> -&gt; <code>fulfilled</code>；当前的值为接收的值</p>
<h2 id="reject"><a href="#reject" class="headerlink" title="reject"></a>reject</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(fn)&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> fn !== <span class="string">'function'</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">`MyPromise fn <span class="subst">$&#123;fn&#125;</span> is not a function`</span>)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.state = <span class="string">'pending'</span>;</div><div class="line">        <span class="keyword">this</span>.value = <span class="keyword">void</span> <span class="number">0</span>;</div><div class="line">        fn(<span class="keyword">this</span>.resolve.bind(<span class="keyword">this</span>),<span class="keyword">this</span>.reject.bind(<span class="keyword">this</span>))</div><div class="line">    &#125;</div><div class="line">    resolve(value)&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.state !== <span class="string">'pending'</span>) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">this</span>.state = <span class="string">'fulfilled'</span>;</div><div class="line">        <span class="keyword">this</span>.value = value</div><div class="line">    &#125;</div><div class="line">    reject(reason)&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.state !== <span class="string">'pending'</span>) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">this</span>.state = <span class="string">'rejected'</span>;</div><div class="line">        <span class="keyword">this</span>.value = reason</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当<code>reject</code>执行，接收到一个值之后；状态就由 <code>pending</code> -&gt; <code>rejected</code>；当前的值为接收的值</p>
<h2 id="then"><a href="#then" class="headerlink" title="then"></a>then</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(fn)&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> fn !== <span class="string">'function'</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">`MyPromise fn <span class="subst">$&#123;fn&#125;</span> is not a function`</span>)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.state = <span class="string">'pending'</span>;</div><div class="line">        <span class="keyword">this</span>.value = <span class="keyword">void</span> <span class="number">0</span>;</div><div class="line">        fn(<span class="keyword">this</span>.resolve.bind(<span class="keyword">this</span>),<span class="keyword">this</span>.reject.bind(<span class="keyword">this</span>))</div><div class="line">    &#125;</div><div class="line">    resolve(value)&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.state !== <span class="string">'pending'</span>) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">this</span>.state = <span class="string">'fulfilled'</span>;</div><div class="line">        <span class="keyword">this</span>.value = value</div><div class="line">    &#125;</div><div class="line">    reject(reason)&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.state !== <span class="string">'pending'</span>) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">this</span>.state = <span class="string">'rejected'</span>;</div><div class="line">        <span class="keyword">this</span>.value = reason</div><div class="line">    &#125;</div><div class="line">    then(fulfilled,rejected)&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> fulfilled !== <span class="string">'function'</span> &amp;&amp; <span class="keyword">typeof</span> rejected !== <span class="string">'function'</span> ) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> fulfilled !== <span class="string">'function'</span> &amp;&amp; <span class="keyword">this</span>.state === <span class="string">'fulfilled'</span> ||</div><div class="line">            <span class="keyword">typeof</span> rejected !== <span class="string">'function'</span> &amp;&amp; <span class="keyword">this</span>.state === <span class="string">'rejected'</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</div><div class="line">            <span class="keyword">if</span>(fulfilled &amp;&amp; <span class="keyword">typeof</span> fulfilled === <span class="string">'function'</span> &amp;&amp; <span class="keyword">this</span>.state === <span class="string">'fulfilled'</span>)&#123;</div><div class="line">                <span class="keyword">let</span> result = fulfilled(<span class="keyword">this</span>.value);</div><div class="line">                <span class="keyword">if</span>(result &amp;&amp; <span class="keyword">typeof</span> result.then === <span class="string">'function'</span>)&#123;</div><div class="line">                    <span class="keyword">return</span> result.then(resolve,reject)</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    resolve(result)</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(rejected &amp;&amp; <span class="keyword">typeof</span> rejected === <span class="string">'function'</span> &amp;&amp; <span class="keyword">this</span>.state === <span class="string">'rejected'</span>)&#123;</div><div class="line">                <span class="keyword">let</span> result = rejected(<span class="keyword">this</span>.value);</div><div class="line">                <span class="keyword">if</span>(result &amp;&amp; <span class="keyword">typeof</span> result.then === <span class="string">'function'</span>)&#123;</div><div class="line">                    <span class="keyword">return</span> result.then(resolve,reject)</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    resolve(result)</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>then</code>的实现比较关键，首先有两个判断，第一个判断传的两个参数是否都是函数，如果部不是<code>return this</code>执行下一步操作。<br>第二个判断的作用是，比如，现在状态从<code>pending</code> -&gt; <code>rejected</code>;但是中间代码中有许多个<code>.then</code>的操作，我们需要跳过这些操作执行<code>.catch</code>的代码。如下面的代码，执行结果只会打印<code>1</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">new Promise((resolve,reject)=&gt;&#123;</div><div class="line">    reject(1)</div><div class="line">&#125;).then(()=&gt;&#123;</div><div class="line">    console.log(2)</div><div class="line">&#125;).then(()=&gt;&#123;</div><div class="line">    console.log(3)</div><div class="line">&#125;).catch((e)=&gt;&#123;</div><div class="line">    console.log(e)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>我们继续，接下来看到的是返回了一个新的<code>promise</code>，真正<code>then</code>的实现的确都是返回一个<code>promise</code>实例。这里不多说</p>
<p>下面有两个判断，作用是判断是<code>rejected</code>还是<code>fulfilled</code>,首先看<code>fulfilled</code>，如果是<code>fulfilled</code>的话，首先执行<code>fulfilled</code>函数，并把当前的<code>value</code>值传过去，也就是下面这步操作,<code>res</code>就是传过去的<code>value</code>值，并执行了<code>(res)=&gt;{console.log(res)}</code>这段代码;执行完成之后我们得到了<code>result</code>；也就是<code>2</code>这个结果，下面就是判断当前结果是否是一个<code>promise</code>实例了，也就是下面注释了的情况，现在我们直接执行<code>resolve(result)</code>;<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">new Promise((resolve,reject)=&gt;&#123;</div><div class="line">    resolve(1)</div><div class="line">&#125;).then((res)=&gt;&#123;</div><div class="line">    console.log(res)</div><div class="line">    return 2</div><div class="line">    //return new Promise(resolve=&gt;&#123;&#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>剩下的就不多说了，可以<code>debugger</code>看看执行结果</p>
<h2 id="catch"><a href="#catch" class="headerlink" title="catch"></a>catch</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    catch(rejected)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.then(<span class="literal">null</span>,rejected)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(fn)&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> fn !== <span class="string">'function'</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">`MyPromise fn <span class="subst">$&#123;fn&#125;</span> is not a function`</span>)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.state = <span class="string">'pending'</span>;</div><div class="line">        <span class="keyword">this</span>.value = <span class="keyword">void</span> <span class="number">0</span>;</div><div class="line">        fn(<span class="keyword">this</span>.resolve.bind(<span class="keyword">this</span>),<span class="keyword">this</span>.reject.bind(<span class="keyword">this</span>))</div><div class="line">    &#125;</div><div class="line">    resolve(value)&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.state !== <span class="string">'pending'</span>) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">this</span>.state = <span class="string">'fulfilled'</span>;</div><div class="line">        <span class="keyword">this</span>.value = value</div><div class="line">    &#125;</div><div class="line">    reject(reason)&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.state !== <span class="string">'pending'</span>) <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">this</span>.state = <span class="string">'rejected'</span>;</div><div class="line">        <span class="keyword">this</span>.value = reason</div><div class="line">    &#125;</div><div class="line">    then(fulfilled,rejected)&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> fulfilled !== <span class="string">'function'</span> &amp;&amp; <span class="keyword">typeof</span> rejected !== <span class="string">'function'</span> ) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> fulfilled !== <span class="string">'function'</span> &amp;&amp; <span class="keyword">this</span>.state === <span class="string">'fulfilled'</span> ||</div><div class="line">            <span class="keyword">typeof</span> rejected !== <span class="string">'function'</span> &amp;&amp; <span class="keyword">this</span>.state === <span class="string">'rejected'</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</div><div class="line">            <span class="keyword">if</span>(fulfilled &amp;&amp; <span class="keyword">typeof</span> fulfilled === <span class="string">'function'</span> &amp;&amp; <span class="keyword">this</span>.state === <span class="string">'fulfilled'</span>)&#123;</div><div class="line">                <span class="keyword">let</span> result = fulfilled(<span class="keyword">this</span>.value);</div><div class="line">                <span class="keyword">if</span>(result &amp;&amp; <span class="keyword">typeof</span> result.then === <span class="string">'function'</span>)&#123;</div><div class="line">                    <span class="keyword">return</span> result.then(resolve,reject)</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    resolve(result)</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(rejected &amp;&amp; <span class="keyword">typeof</span> rejected === <span class="string">'function'</span> &amp;&amp; <span class="keyword">this</span>.state === <span class="string">'rejected'</span>)&#123;</div><div class="line">                <span class="keyword">let</span> result = rejected(<span class="keyword">this</span>.value);</div><div class="line">                <span class="keyword">if</span>(result &amp;&amp; <span class="keyword">typeof</span> result.then === <span class="string">'function'</span>)&#123;</div><div class="line">                    <span class="keyword">return</span> result.then(resolve,reject)</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    resolve(result)</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span>(rejected)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.then(<span class="literal">null</span>,rejected)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="number">1</span>);</div><div class="line">	<span class="comment">//reject(2)</span></div><div class="line">	resolve(<span class="number">2</span>)</div><div class="line">	<span class="built_in">console</span>.log(<span class="number">3</span>)</div><div class="line">	setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="number">4</span>)&#125;,<span class="number">0</span>)</div><div class="line">&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(res)</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</div><div class="line">		resolve(<span class="number">5</span>)</div><div class="line">	&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</div><div class="line">		<span class="keyword">return</span> res</div><div class="line">	&#125;)</div><div class="line">&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(res)</div><div class="line">&#125;).catch(<span class="function"><span class="params">e</span>=&gt;</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'e'</span>,e)</div><div class="line">&#125;)</div><div class="line">执行结果：</div><div class="line">&gt; <span class="number">1</span></div><div class="line">&gt; <span class="number">3</span></div><div class="line">&gt; <span class="number">2</span></div><div class="line">&gt; <span class="number">5</span></div><div class="line">&gt; <span class="number">4</span></div></pre></td></tr></table></figure>
<p>原生promise<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="number">1</span>);</div><div class="line">	<span class="comment">//reject(2)</span></div><div class="line">	resolve(<span class="number">2</span>)</div><div class="line">	<span class="built_in">console</span>.log(<span class="number">3</span>)</div><div class="line">	setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="number">4</span>)&#125;,<span class="number">0</span>)</div><div class="line">&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(res)</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</div><div class="line">		resolve(<span class="number">5</span>)</div><div class="line">	&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</div><div class="line">		<span class="keyword">return</span> res</div><div class="line">	&#125;)</div><div class="line">&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(res)</div><div class="line">&#125;).catch(<span class="function"><span class="params">e</span>=&gt;</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">'e'</span>,e)</div><div class="line">&#125;)</div><div class="line">执行结果：</div><div class="line">&gt; <span class="number">1</span></div><div class="line">&gt; <span class="number">3</span></div><div class="line">&gt; <span class="number">2</span></div><div class="line">&gt; <span class="number">5</span></div><div class="line">&gt; <span class="number">4</span></div></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>javascript</category>
        <category>promise</category>
      </categories>
      <tags>
        <tag>原创</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript之节流与防抖</title>
    <url>/2018/06/12/JavaScript%E4%B9%8B%E8%8A%82%E6%B5%81%E4%B8%8E%E9%98%B2%E6%8A%96/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>我们在开发的过程中会经常使用如scroll、resize、touchmove等事件，如果正常绑定事件处理函数的话，有可能在很短的时间内多次连续触发事件，十分影响性能。<br>因此针对这类事件要进行节流或者防抖处理</p>
<h1 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h1><p>节流的意思是，在规定的时间内只会触发一次函数，如我们设置函数<code>500ms</code>触发一次，之后你无论你触发了多少次函数，在这个时间内也只会有一次执行效果</p>
<p>先来看一个例子</p>
<p></p><p data-height="373" data-theme-id="0" data-slug-hash="gKWLpO" data-default-tab="html,result" data-user="wclimb" data-embed-version="2" data-pen-title="gKWLpO" class="codepen">See the Pen <a href="https://codepen.io/wclimb/pen/gKWLpO/" target="_blank" rel="external">gKWLpO</a> by wclimb (<a href="https://codepen.io/wclimb" target="_blank" rel="external">@wclimb</a>) on <a href="https://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="https://static.codepen.io/assets/embed/ei.js"></script>

<p>我们看到使用了节流的在<code>1000ms</code>内只触发了一次，而没有使用节流的则频繁触发了调用的函数</p>
<p>接下来看看代码实现<br>v1 第一次不触发，不传参实现<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn,interval</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> timer;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(timer)&#123;</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            clearTimeout(timer)</div><div class="line">            timer = <span class="literal">null</span></div><div class="line">            fn()</div><div class="line">        &#125;, interval || <span class="number">1000</span>);</div><div class="line">    &#125;   </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>效果是实现了，但是我在尝试在执行函数里<code>console.log(this)</code>，结果发现<code>this</code>指向的是<code>window</code>，而且还发现我们不能传递参数，下面就来改进一下<br><a id="more"></a><br>v2 第一次触发函数，接收参数<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn,interval</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> timer,</div><div class="line">        isFirst = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> args = <span class="built_in">arguments</span>,</div><div class="line">            that = <span class="keyword">this</span>;</div><div class="line">        <span class="keyword">if</span>(isFirst)&#123;</div><div class="line">            fn.apply(that,args)</div><div class="line">            <span class="keyword">return</span> isFirst = <span class="literal">false</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(timer)&#123;</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            clearTimeout(timer)</div><div class="line">            timer = <span class="literal">null</span></div><div class="line">            fn.apply(that,args)</div><div class="line">        &#125;, interval || <span class="number">1000</span>);</div><div class="line">    &#125;   </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h1><p>防抖的意思是无论你触发多少次函数，只会触发最后一次函数。最常用的就是在表单提交的时候，用户可能会一段时间内点击很多次，这个时候可以增加防抖处理，我们只需要最后一次触发的事件</p>
<p>先来看一个例子</p>
<p></p><p data-height="424" data-theme-id="0" data-slug-hash="pKPeyv" data-default-tab="js,result" data-user="wclimb" data-embed-version="2" data-pen-title="pKPeyv" class="codepen">See the Pen <a href="https://codepen.io/wclimb/pen/pKPeyv/" target="_blank" rel="external">pKPeyv</a> by wclimb (<a href="https://codepen.io/wclimb" target="_blank" rel="external">@wclimb</a>) on <a href="https://codepen.io" target="_blank" rel="external">CodePen</a>.</p><p></p>
<script async src="https://static.codepen.io/assets/embed/ei.js"></script>

<p>我们看到使用了防抖的方框，无论你在里面触发了多少次函数，都只会触发最后的那一次函数，而没有使用防抖的则频繁触发了调用的函数</p>
<p>v1 第一次不触发函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn,interval</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> timer;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> args = <span class="built_in">arguments</span>,</div><div class="line">            that = <span class="keyword">this</span>;</div><div class="line">        <span class="keyword">if</span>(timer)&#123;</div><div class="line">            clearTimeout(timer)</div><div class="line">            timer = <span class="literal">null</span></div><div class="line">        &#125;</div><div class="line">        timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            fn.apply(<span class="literal">null</span>,args)</div><div class="line">        &#125;, interval || <span class="number">1000</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面这段代码仍然可以正常执行，但是我们并没有指定他的<code>this</code></p>
<p>v2 第一次就触发函数<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn,interval</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> timer,</div><div class="line">        isFirst  = <span class="literal">true</span>,</div><div class="line">            can = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> args = <span class="built_in">arguments</span>,</div><div class="line">            that = <span class="keyword">this</span>;</div><div class="line">        <span class="keyword">if</span>(timer)&#123;</div><div class="line">            clearTimeout(timer)</div><div class="line">            timer = <span class="literal">null</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(isFirst)&#123;</div><div class="line">            fn.apply(that,args)</div><div class="line">            isFirst = <span class="literal">false</span></div><div class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                can = <span class="literal">true</span></div><div class="line">            &#125;, interval || <span class="number">1000</span>);</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(can)&#123;</div><div class="line">            timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                fn.apply(<span class="literal">null</span>,args)</div><div class="line">            &#125;, interval || <span class="number">1000</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如有雷同，纯属抄我（开玩笑）</p>
<p>如有错误，还望指正，仅供参考</p>
<p>GitHub：<a href="https://github.com/wclimb" target="_blank" rel="external">wclimb</a></p>
<h2 id="QQ群"><a href="#QQ群" class="headerlink" title="QQ群"></a>QQ群</h2><p>有兴趣的同学可以加qq群: 725165362 <a href="http://shang.qq.com/wpa/qunwpa?idkey=e6c66b1ee584a90b52dec3545622e988afcf900144eff03cab6d473c50a31d59" target="_blank" rel="external">点击加入</a></p>
<h2 id="个人小程序"><a href="#个人小程序" class="headerlink" title="个人小程序"></a>个人小程序</h2><p><img src="http://www.wclimb.site/cdn/xcx.jpeg" alt="img"></p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>原创</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavsScript之浅拷贝与深拷贝</title>
    <url>/2018/07/29/JavsScript%E4%B9%8B%E6%B5%85%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B7%B1%E6%8B%B7%E8%B4%9D/</url>
    <content><![CDATA[<p>在开发的过程中，我们往往需要复制一个数据，在复制基本数据类型的时候不会出现问题，如<code>string</code>、<code>number</code>、<code>null</code>等。<br>但是我们复制一个引用类型的数据时，往往会出现问题，如<code>array</code>、<code>object</code>。</p>
<h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><p>看下面这段代码<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="keyword">var</span> arr2 = arr1;</div><div class="line">arr2.push(<span class="number">4</span>)</div></pre></td></tr></table></figure></p>
<p>我们打印一下看看<code>arr1</code> <code>arr2</code>的结果<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">arr1: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div><div class="line">arr2: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div></pre></td></tr></table></figure></p>
<p>我们发现，改变<code>arr2</code>的同时也改变了<code>arr1</code>，WTF？</p>
<p>接下来我们看看对象<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> obj1 = &#123;</div><div class="line">        <span class="attr">name</span>:<span class="string">'wclimb'</span></div><div class="line">    &#125;;</div><div class="line"><span class="keyword">var</span> obj2 = obj1</div><div class="line">obj2.age = <span class="number">24</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>我们打印一下看看<code>arr1``arr2</code>的结果<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">obj1: &#123;<span class="attr">name</span>: <span class="string">"wclimb"</span>, <span class="attr">age</span>: <span class="number">24</span>&#125;</div><div class="line">obj2: &#123;<span class="attr">name</span>: <span class="string">"wclimb"</span>, <span class="attr">age</span>: <span class="number">24</span>&#125;</div></pre></td></tr></table></figure></p>
<p>和预想的一样，都被影响了。<br>why?<br>因为引用类型的复制，两个引用类型的指针都指向同一个堆内存</p>
<p>网上偶尔会看到有人说<code>slice</code>、<code>concat</code>是深拷贝，其实这两个是浅复制，如下<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</div><div class="line"><span class="keyword">var</span> arr2 = arr1.slice();</div><div class="line">arr2.push(<span class="number">4</span>)</div></pre></td></tr></table></figure></p>
<p>结果：<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">arr1 [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">arr2 [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</div></pre></td></tr></table></figure></p>
<p>数组元素只是基本数据类型不会有影响，那么我们看下面的<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>]];</div><div class="line"><span class="keyword">var</span> arr2 = arr1.slice();</div><div class="line">arr2[<span class="number">3</span>].push(<span class="number">5</span>)</div></pre></td></tr></table></figure></p>
<p>结果<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">arr1: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>]]   &lt;-----  被影响了</div><div class="line">arr2: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>]]</div></pre></td></tr></table></figure></p>
<p>即使使用了<code>slice</code>, 两个数组也相互影响了，类似方法除了<code>slice</code>、<code>concat</code>还有<code>Array.from</code>、<code>...</code></p>
<p><strong>深拷贝和浅拷贝最根本的区别在于是否是真正获取了一个对象的拷贝实体，而不是引用</strong></p>
<h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><h3 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign"></a>Object.assign</h3><p>Object.assign可以进行一层的深度拷贝，也就是跟slice类型的效果<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> obj1 = &#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">'wclimb'</span>,</div><div class="line">        <span class="attr">test1</span>: <span class="literal">null</span>,</div><div class="line">        <span class="attr">test2</span>: <span class="literal">undefined</span>,</div><div class="line">        <span class="attr">test3</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">1</span>)&#125;,</div><div class="line">		<span class="attr">test4</span>: &#123;&#125;</div><div class="line">    &#125;;</div><div class="line"><span class="keyword">var</span> obj2 = <span class="built_in">Object</span>.assign(&#123;&#125;, obj1)</div><div class="line">obj2.age = <span class="number">24</span></div><div class="line"></div><div class="line">结果：</div><div class="line">obj1: &#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">'wclimb'</span>,</div><div class="line">        <span class="attr">test1</span>: <span class="literal">null</span>,</div><div class="line">        <span class="attr">test2</span>: <span class="literal">undefined</span>,</div><div class="line">        <span class="attr">test3</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">1</span>)&#125;,</div><div class="line">        <span class="attr">test4</span>: &#123;&#125;</div><div class="line">    &#125;;</div><div class="line">obj2: &#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">'wclimb'</span>,</div><div class="line">        <span class="attr">test1</span>: <span class="literal">null</span>,</div><div class="line">        <span class="attr">test2</span>: <span class="literal">undefined</span>,</div><div class="line">        <span class="attr">test3</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">1</span>)&#125;,</div><div class="line">        <span class="attr">test4</span>: &#123;&#125;,</div><div class="line">        <span class="attr">age</span>: <span class="number">24</span></div><div class="line">    &#125;;</div></pre></td></tr></table></figure></p>
<p>但是我们看下面的例子<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> obj1 = &#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">'wclimb'</span>,</div><div class="line">        <span class="attr">test1</span>: <span class="literal">null</span>,</div><div class="line">        <span class="attr">test2</span>: <span class="literal">undefined</span>,</div><div class="line">        <span class="attr">test3</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">1</span>)&#125;,</div><div class="line">        <span class="attr">test4</span>: &#123;&#125;</div><div class="line">    &#125;;</div><div class="line"><span class="keyword">var</span> obj2 = <span class="built_in">Object</span>.assign(&#123;&#125;, obj1)</div><div class="line">obj2.age = <span class="number">24</span></div><div class="line">obj2.test4.val = <span class="string">'1'</span>;</div><div class="line"></div><div class="line">结果： </div><div class="line"></div><div class="line">obj1: &#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">'wclimb'</span>,</div><div class="line">        <span class="attr">test1</span>: <span class="literal">null</span>,</div><div class="line">        <span class="attr">test2</span>: <span class="literal">undefined</span>,</div><div class="line">        <span class="attr">test3</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">1</span>)&#125;,</div><div class="line">        <span class="attr">test4</span>: &#123;<span class="attr">val</span>: <span class="number">1</span>&#125;   &lt;-----  被影响了</div><div class="line">    &#125;;</div><div class="line">obj2: &#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">'wclimb'</span>,</div><div class="line">        <span class="attr">test1</span>: <span class="literal">null</span>,</div><div class="line">        <span class="attr">test2</span>: <span class="literal">undefined</span>,</div><div class="line">        <span class="attr">test3</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">1</span>)&#125;,</div><div class="line">        <span class="attr">test4</span>: &#123;<span class="attr">val</span>: <span class="number">1</span>&#125;,</div><div class="line">        <span class="attr">age</span>: <span class="number">24</span></div><div class="line">    &#125;;</div></pre></td></tr></table></figure></p>
<h3 id="JSON-parse-JSON-stringify-obj"><a href="#JSON-parse-JSON-stringify-obj" class="headerlink" title="JSON.parse(JSON.stringify(obj))"></a>JSON.parse(JSON.stringify(obj))</h3><p>说到深拷贝，你一定会想到<code>JSON.parse(JSON.stringify(obj))</code>;<br>没错，这样可以完成一个深拷贝，看下面的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> obj1 = &#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">'wclimb'</span></div><div class="line">    &#125;;</div><div class="line"><span class="keyword">var</span> obj2 = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj1))</div><div class="line">obj2.age = <span class="number">24</span></div></pre></td></tr></table></figure>
<p>结果<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">obj1: &#123;<span class="attr">name</span>: <span class="string">"wclimb"</span>&#125;   &lt;-----  没有被影响了</div><div class="line">obj2: &#123;<span class="attr">name</span>: <span class="string">"wclimb"</span>, <span class="attr">age</span>: <span class="number">24</span>&#125;</div></pre></td></tr></table></figure></p>
<p>perfect，但是这个方法会有一个问题，如下例：<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="keyword">var</span> obj1 = &#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">'wclimb'</span>,</div><div class="line">        <span class="attr">test1</span>: <span class="literal">null</span>,</div><div class="line">        <span class="attr">test2</span>: <span class="literal">undefined</span>,</div><div class="line">        <span class="attr">test3</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">1</span>)&#125;,</div><div class="line">        <span class="attr">test4</span>: &#123;&#125;</div><div class="line">    &#125;;</div><div class="line"><span class="keyword">var</span> obj2 = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj1))</div><div class="line">obj2.age = <span class="number">24</span></div></pre></td></tr></table></figure></p>
<p>结果<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">obj1: &#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">'wclimb'</span>,</div><div class="line">        <span class="attr">test1</span>: <span class="literal">null</span>,</div><div class="line">        <span class="attr">test2</span>: <span class="literal">undefined</span>,</div><div class="line">        <span class="attr">test3</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">1</span>)&#125;,</div><div class="line">        <span class="attr">test4</span>: &#123;&#125;</div><div class="line">    &#125;;</div><div class="line">obj2: &#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">"wclimb"</span>,</div><div class="line">        <span class="attr">age</span>: <span class="number">24</span>, </div><div class="line">        <span class="attr">test1</span>: <span class="literal">null</span>,</div><div class="line">        <span class="attr">test4</span>: &#123;&#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>WTF，那两个个跑哪去了？所以这个方法不能够拷贝值为<code>undefined</code>、<code>function</code></p>
<h3 id="深拷贝实现"><a href="#深拷贝实现" class="headerlink" title="深拷贝实现"></a>深拷贝实现</h3><p>那么怎么进行深拷贝呢？我的方法是：<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepCopy</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> result;</div><div class="line">    <span class="keyword">var</span> toString = <span class="built_in">Object</span>.prototype.toString</div><div class="line">    <span class="keyword">if</span>(toString.call(obj) === <span class="string">'[object Array]'</span>)&#123;</div><div class="line">        result = []</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ;i &lt; obj.length; i++)&#123;</div><div class="line">            result[i] = deepCopy(obj[i])</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(toString.call(obj) === <span class="string">'[object Object]'</span>)&#123;</div><div class="line">        result = &#123;&#125;;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> obj) &#123;</div><div class="line">            <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</div><div class="line">                result[key] = deepCopy(obj[key])</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> obj</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">测试一下：</div><div class="line"></div><div class="line"><span class="keyword">var</span> obj1 = &#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">'wclimb'</span>,</div><div class="line">        <span class="attr">test1</span>: <span class="literal">null</span>,</div><div class="line">        <span class="attr">test2</span>: <span class="literal">undefined</span>,</div><div class="line">        <span class="attr">test3</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">1</span>)&#125;,</div><div class="line">        <span class="attr">test4</span>: &#123;&#125;</div><div class="line">    &#125;;</div><div class="line"><span class="keyword">var</span> obj2 = deepCopy(obj1)</div><div class="line">obj2.age = <span class="number">24</span></div><div class="line">obj2.test4.val = <span class="string">'1'</span>;</div><div class="line"></div><div class="line">返回： </div><div class="line"></div><div class="line">obj1: &#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">'wclimb'</span>,</div><div class="line">        <span class="attr">test1</span>: <span class="literal">null</span>,</div><div class="line">        <span class="attr">test2</span>: <span class="literal">undefined</span>,</div><div class="line">        <span class="attr">test3</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">1</span>)&#125;,</div><div class="line">        <span class="attr">test4</span>: &#123;&#125;   &lt;-----  没有被影响了</div><div class="line">    &#125;;</div><div class="line">obj2: &#123;</div><div class="line">        <span class="attr">age</span>: <span class="number">24</span>,</div><div class="line">        <span class="attr">name</span>: <span class="string">'wclimb'</span>,</div><div class="line">        <span class="attr">test1</span>: <span class="literal">null</span>,</div><div class="line">        <span class="attr">test2</span>: <span class="literal">undefined</span>,</div><div class="line">        <span class="attr">test3</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">1</span>)&#125;,</div><div class="line">        <span class="attr">test4</span>: &#123;<span class="attr">val</span>: <span class="string">'1'</span>&#125;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure></p>
<h3 id="jQuery的实现"><a href="#jQuery的实现" class="headerlink" title="jQuery的实现"></a>jQuery的实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> obj1 = &#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">'wclimb'</span>,</div><div class="line">        <span class="attr">test1</span>: <span class="literal">null</span>,</div><div class="line">        <span class="attr">test2</span>: <span class="literal">undefined</span>,</div><div class="line">        <span class="attr">test3</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">1</span>)&#125;,</div><div class="line">        <span class="attr">test4</span>: &#123;&#125;</div><div class="line">    &#125;;</div><div class="line"><span class="keyword">var</span> obj2 = $.extend(<span class="literal">true</span>, &#123;&#125;, obj1)</div><div class="line">obj2.age = <span class="number">24</span></div></pre></td></tr></table></figure>
<h3 id="lodash的实现"><a href="#lodash的实现" class="headerlink" title="lodash的实现"></a>lodash的实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> obj1 = &#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">'wclimb'</span>,</div><div class="line">        <span class="attr">test1</span>: <span class="literal">null</span>,</div><div class="line">        <span class="attr">test2</span>: <span class="literal">undefined</span>,</div><div class="line">        <span class="attr">test3</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">1</span>)&#125;,</div><div class="line">        <span class="attr">test4</span>: &#123;&#125;</div><div class="line">    &#125;;</div><div class="line"><span class="keyword">var</span> obj2 = _.cloneDeep(obj1)</div><div class="line">obj2.age = <span class="number">24</span></div></pre></td></tr></table></figure>
<p>GitHub：<a href="https://github.com/wclimb" target="_blank" rel="external">wclimb</a></p>
<h2 id="个人小程序"><a href="#个人小程序" class="headerlink" title="个人小程序"></a>个人小程序</h2><p><img src="http://www.wclimb.site/cdn/xcx.jpeg" alt="img"></p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>原创</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Koa源码系列之koa-compose</title>
    <url>/2019/12/11/Koa%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97%E4%B9%8Bkoa-compose/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>  从今天开始阅读学习一下<code>Koa</code>源码，<code>Koa</code>对前端来说肯定不陌生，使用<code>node</code>做后台大部分会选择<code>Koa</code>来做，<code>Koa</code>源码的代码量其实很少，接下来让我们一层层剥离，分析其中的源码</p>
<h2 id="Koa用法"><a href="#Koa用法" class="headerlink" title="Koa用法"></a>Koa用法</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">"koa"</span>);</div><div class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</div><div class="line">app.use(<span class="keyword">async</span> ctx =&gt; &#123;</div><div class="line">  ctx.body = &#123;</div><div class="line">    <span class="attr">a</span>: <span class="number">1</span></div><div class="line">  &#125;;</div><div class="line">&#125;);</div><div class="line">app.listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure>
<p>浏览器打开 <a href="http://localhost:3000" target="_blank" rel="external">http://localhost:3000</a> 可以看到返回了一个对象 <code>{a:1}</code><br><a id="more"></a></p>
<h2 id="洋葱模型"><a href="#洋葱模型" class="headerlink" title="洋葱模型"></a>洋葱模型</h2><p>Koa最经典的就是基于洋葱模型的HTTP中间件处理流程，可以看下图</p>
<p><img src="/img/koa-img-1.png" alt=""></p>
<p>看下面代码是否能理解</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">"koa"</span>);</div><div class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</div><div class="line">app.use(<span class="keyword">async</span> (ctx,next) =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</div><div class="line">  setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">    next()</div><div class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</div><div class="line">  &#125;,<span class="number">1000</span>)</div><div class="line">&#125;);</div><div class="line">app.use(<span class="keyword">async</span> (ctx,next) =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>);</div><div class="line">  next()</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>)</div><div class="line">&#125;);</div><div class="line">app.use(<span class="keyword">async</span> (ctx,next) =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">5</span>);</div><div class="line">  setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="number">6</span>)</div><div class="line">  &#125;,<span class="number">1000</span>)</div><div class="line">  next()</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">7</span>)</div><div class="line">&#125;);</div><div class="line">app.listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure>
<p>访问 <a href="http://localhost:3000" target="_blank" rel="external">http://localhost:3000</a> 输出<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="number">1</span></div><div class="line"><span class="number">3</span>  <span class="comment">// 1秒后开始输出</span></div><div class="line"><span class="number">5</span></div><div class="line"><span class="number">7</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="number">6</span> <span class="comment">// 1秒后开始输出</span></div></pre></td></tr></table></figure></p>
<p>不知道看到这你是否能够明白，不明白也没关系，我们可以深入源码来分析具体的实现</p>
<h2 id="koa源码"><a href="#koa源码" class="headerlink" title="koa源码"></a>koa源码</h2><p><a href="https://github.com/koajs/koa/blob/master/lib/application.js#L77" target="_blank" rel="external">https://github.com/koajs/koa/blob/master/lib/application.js#L77</a> </p>
<p>执行<code>app.listen(3000)</code>;会走以下代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Shorthand for:</div><div class="line"> *</div><div class="line"> *    http.createServer(app.callback()).listen(...)</div><div class="line"> *</div><div class="line"> * @param &#123;Mixed&#125; ...</div><div class="line"> * @return &#123;Server&#125;</div><div class="line"> * @api public</div><div class="line"> */</div><div class="line"></div><div class="line">listen(...args) &#123;</div><div class="line">  debug(<span class="string">'listen'</span>);</div><div class="line">  <span class="keyword">const</span> server = http.createServer(<span class="keyword">this</span>.callback());</div><div class="line">  <span class="keyword">return</span> server.listen(...args);</div><div class="line">&#125;、</div></pre></td></tr></table></figure>
<p><a href="https://github.com/koajs/koa/blob/master/lib/application.js#L141" target="_blank" rel="external">https://github.com/koajs/koa/blob/master/lib/application.js#L141</a><br>我们接着看<code>callback</code>方法<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Return a request handler callback</div><div class="line"> * for node's native http server.</div><div class="line"> *</div><div class="line"> * @return &#123;Function&#125;</div><div class="line"> * @api public</div><div class="line"> */</div><div class="line"></div><div class="line">callback() &#123;</div><div class="line">  <span class="keyword">const</span> fn = compose(<span class="keyword">this</span>.middleware);</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.listenerCount(<span class="string">'error'</span>)) <span class="keyword">this</span>.on(<span class="string">'error'</span>, <span class="keyword">this</span>.onerror);</div><div class="line"></div><div class="line">  <span class="keyword">const</span> handleRequest = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> ctx = <span class="keyword">this</span>.createContext(req, res);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.handleRequest(ctx, fn);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> handleRequest;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在上面<code>callback</code>执行了<code>compose</code>方法来处理中间件，<code>compose</code>方法就是今天我们需要重点讲的方法，等会再说，我们知道<code>Koa</code>大部分情况都是在处理中间件，那么它们是怎么拿到中间件的呢？<br>上面可以看到有一个<code>this.middleware</code>，中间件肯定是放在这里面的，于是我们搜索，在最上层可以在构造函数里看到初始化的时候，它把<code>this.middleware = []</code>;置为一个数组，我们使用中间件的时候是通过<code>app.use</code>来使用的。继续寻找<code>use</code>方法<br><a href="https://github.com/koajs/koa/blob/master/lib/application.js#L120" target="_blank" rel="external">https://github.com/koajs/koa/blob/master/lib/application.js#L120</a><br><code>use</code>方法<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Use the given middleware `fn`.</div><div class="line"> *</div><div class="line"> * Old-style middleware will be converted.</div><div class="line"> *</div><div class="line"> * @param &#123;Function&#125; fn</div><div class="line"> * @return &#123;Application&#125; self</div><div class="line"> * @api public</div><div class="line"> */</div><div class="line"></div><div class="line">use(fn) &#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">'function'</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'middleware must be a function!'</span>);</div><div class="line">  <span class="keyword">if</span> (isGeneratorFunction(fn)) &#123;</div><div class="line">    deprecate(<span class="string">'Support for generators will be removed in v3. '</span> +</div><div class="line">              <span class="string">'See the documentation for examples of how to convert old middleware '</span> +</div><div class="line">              <span class="string">'https://github.com/koajs/koa/blob/master/docs/migration.md'</span>);</div><div class="line">    fn = convert(fn);</div><div class="line">  &#125;</div><div class="line">  debug(<span class="string">'use %s'</span>, fn._name || fn.name || <span class="string">'-'</span>);</div><div class="line">  <span class="keyword">this</span>.middleware.push(fn);</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>每次我们调用<code>app.use</code>，<code>koa</code>都是把这个方法<code>push</code>到<code>middleware</code>数组里面。感觉说得有点啰嗦了，流程大体就是这样。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">定义中间件数组 -&gt; 收集中间件放到middleware数组里 -&gt; 通过compose方法处理中间件达到洋葱模式</div></pre></td></tr></table></figure>
<h2 id="koa-compose"><a href="#koa-compose" class="headerlink" title="koa-compose"></a>koa-compose</h2><p><a href="https://github.com/koajs/compose/blob/master/index.js" target="_blank" rel="external">https://github.com/koajs/compose/blob/master/index.js</a></p>
<p><code>compose</code>是引用的<code>koa-compose</code>包，查看源码发现关键只有20几行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Compose `middleware` returning</div><div class="line"> * a fully valid middleware comprised</div><div class="line"> * of all those which are passed.</div><div class="line"> *</div><div class="line"> * @param &#123;Array&#125; middleware</div><div class="line"> * @return &#123;Function&#125;</div><div class="line"> * @api public</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span> (<span class="params">middleware</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(middleware)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Middleware stack must be an array!'</span>)</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> fn <span class="keyword">of</span> middleware) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">'function'</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Middleware must be composed of functions!'</span>)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * @param &#123;Object&#125; context</div><div class="line">   * @return &#123;Promise&#125;</div><div class="line">   * @api public</div><div class="line">   */</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">context, next</span>) </span>&#123;</div><div class="line">    <span class="comment">// last called middleware #</span></div><div class="line">    <span class="keyword">let</span> index = <span class="number">-1</span></div><div class="line">    <span class="keyword">return</span> dispatch(<span class="number">0</span>)</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span> (<span class="params">i</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (i &lt;= index) <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'next() called multiple times'</span>))</div><div class="line">      index = i</div><div class="line">      <span class="keyword">let</span> fn = middleware[i]</div><div class="line">      <span class="keyword">if</span> (i === middleware.length) fn = next</div><div class="line">      <span class="keyword">if</span> (!fn) <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve()</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(fn(context, dispatch.bind(<span class="literal">null</span>, i + <span class="number">1</span>)));</div><div class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们默许中间件传入的是数组函数，进一步剥离，精简的代码如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span> (<span class="params">middleware</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">context, next</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> index = <span class="number">-1</span></div><div class="line">    <span class="keyword">return</span> dispatch(<span class="number">0</span>)</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span> (<span class="params">i</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (i &lt;= index) <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'next() called multiple times'</span>))</div><div class="line">      index = i</div><div class="line">      <span class="keyword">let</span> fn = middleware[i]</div><div class="line">      <span class="keyword">if</span> (i === middleware.length) fn = next</div><div class="line">      <span class="keyword">if</span> (!fn) <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve()</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(fn(context, dispatch.bind(<span class="literal">null</span>, i + <span class="number">1</span>)));</div><div class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>初略的看，<code>compose</code>返回的是一个函数，首先执行了<code>dispatch(0)</code>，函数内容返回的都是Promise对象。<br>最初执行<code>dispatch(0)</code>；通过递归的方式不断的运行中间件，每个中间件都接收了两个参数，分别是<code>context</code>和<code>next</code>，<code>context</code>其实就是<code>koa</code>的<code>ctx</code>，如果我们不传递<code>next</code>方法，后面的中间件就不会继续执行下去。</p>
<p>之前的代码我们可以初略的想象一下以下代码<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">context, next</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>);</div><div class="line">  next();</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params">context, next</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>);</div><div class="line">  next();</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params">context, next</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">5</span>);</div><div class="line">  next();</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">6</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> fn1(<span class="string">''</span>, () =&gt; &#123;</div><div class="line">    <span class="keyword">return</span> fn2(<span class="string">''</span>, () =&gt; &#123;</div><div class="line">      <span class="keyword">return</span> fn3(<span class="string">''</span>, () =&gt; &#123;</div><div class="line">      &#125;);</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出：<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="number">1</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">5</span></div><div class="line"><span class="number">6</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="number">2</span></div></pre></td></tr></table></figure></p>
<p>其实就是一层层嵌套执行中间件的方法，执行完<code>next</code>再往上执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">       -------------------------------------------------------------------------------------</div><div class="line">        |                                                                                  |</div><div class="line">        |                                       fn1                                        |</div><div class="line">        |          +-----------------------------------------------------------+           |</div><div class="line">        |          |                                                           |           |    </div><div class="line">        |          |                            fn2                            |           |</div><div class="line">        |          |            +---------------------------------+            |           |</div><div class="line">        |          |            |                                 |            |           |</div><div class="line">        |          |            |               fn3               |            |           |</div><div class="line">        |          |            |                                 |            |           |</div><div class="line">----------------------------------------------------------------------------------------------------&gt;</div><div class="line">        |          |            |                                 |            |           |</div><div class="line">        |     1    |      3     |       5                 6       |     4      |      2    |</div><div class="line">        |          |            |                                 |            |           |</div><div class="line">        |          |            +---------------------------------+            |           |</div><div class="line">        |          |                                                           |           |</div><div class="line">        |          +-----------------------------------------------------------+           |</div><div class="line">        |                                                                                  |</div><div class="line">        +----------------------------------------------------------------------------------+</div></pre></td></tr></table></figure>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p><code>koa-compose</code>大致就这些，流程大致如洋葱一样，代码也不多，很好理解，以后使用中间件的时候就清晰很多了。</p>
<p>原文地址： <a href="http://www.wclimb.site/2019/12/11/Koa源码系列之koa-compose/">http://www.wclimb.site/2019/12/11/Koa源码系列之koa-compose/</a></p>
]]></content>
      <categories>
        <category>Node</category>
        <category>Koa</category>
      </categories>
      <tags>
        <tag>原创</tag>
        <tag>javascript</tag>
        <tag>Koa</tag>
      </tags>
  </entry>
  <entry>
    <title>Koa源码系列之全流程解析</title>
    <url>/2019/12/23/Koa%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97%E4%B9%8B%E5%85%A8%E6%B5%81%E7%A8%8B%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>之前我们已经讲解了<code>koa</code>源码中的一些依赖包，<a href="http://www.wclimb.site/2019/12/16/Koa源码系列之依赖包解析/">Koa源码系列之依赖包解析</a> <a href="http://www.wclimb.site/2019/12/11/Koa源码系列之koa-compose/">Koa源码系列之koa-compose</a>，现在我们来看看<code>koa</code>源码的全流程</p>
<h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>我们首先来看看最简单的用法，一下是官网的示例<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</div><div class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</div><div class="line"></div><div class="line">app.use(<span class="keyword">async</span> ctx =&gt; &#123;</div><div class="line">  ctx.body = <span class="string">'Hello World'</span>;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure></p>
<p>首先我们引入<code>koa</code>包，然后实例化一个对象，也就是<code>const = new Koa()</code>。然后调用<code>use</code>方法，这个方法之前在<a href="http://www.wclimb.site/2019/12/11/Koa源码系列之koa-compose/">Koa源码系列之koa-compose</a>讲过，用处就是挂载中间件。当前内部执行的方法就是向前端返回一个<code>hello world</code>的内容，最后我们将应用挂载在<code>3000</code>端口下，这个<code>listen</code>很重要，因为一切我们定义的的方法都会从这里执行。我们看看 <code>Koa</code> 的构造函数的主入口是从哪暴露的，先来🤔思考一个问题，我们怎么快速找到一个包的主入口呢？如果你发布过<code>npm</code>包就知道，我们可以在<code>package.json</code>内找到<code>main</code>，<code>koa</code>的内容是 <code>&quot;main&quot;: &quot;lib/application.js&quot;</code>，现在我们可以直接去查看<code>lib</code>下的<code>application</code>文件，是不是很方便？</p>
<p>接下来部分解析可能在代码注释内<br><a href="https://github.com/koajs/koa/blob/master/lib/application.js#L30" target="_blank" rel="external">https://github.com/koajs/koa/blob/master/lib/application.js#L30</a><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="class"><span class="keyword">class</span> <span class="title">Application</span> <span class="keyword">extends</span> <span class="title">Emitter</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(options) &#123;</div><div class="line">    <span class="keyword">super</span>();</div><div class="line">    options = options || &#123;&#125;;</div><div class="line">    <span class="keyword">this</span>.proxy = options.proxy || <span class="literal">false</span>;</div><div class="line">    <span class="keyword">this</span>.subdomainOffset = options.subdomainOffset || <span class="number">2</span>;</div><div class="line">    <span class="keyword">this</span>.proxyIpHeader = options.proxyIpHeader || <span class="string">'X-Forwarded-For'</span>;</div><div class="line">    <span class="keyword">this</span>.maxIpsCount = options.maxIpsCount || <span class="number">0</span>;</div><div class="line">    <span class="keyword">this</span>.env = options.env || process.env.NODE_ENV || <span class="string">'development'</span>;</div><div class="line">    <span class="keyword">if</span> (options.keys) <span class="keyword">this</span>.keys = options.keys;</div><div class="line">    <span class="comment">// 存放中间件</span></div><div class="line">    <span class="keyword">this</span>.middleware = [];</div><div class="line">    <span class="keyword">this</span>.context = <span class="built_in">Object</span>.create(context);</div><div class="line">    <span class="keyword">this</span>.request = <span class="built_in">Object</span>.create(request);</div><div class="line">    <span class="keyword">this</span>.response = <span class="built_in">Object</span>.create(response);</div><div class="line">    <span class="keyword">if</span> (util.inspect.custom) &#123;</div><div class="line">      <span class="keyword">this</span>[util.inspect.custom] = <span class="keyword">this</span>.inspect;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>以上代码就是暴露出来的构造函数，所以我们可以使用<code>new Koa()</code>的形式调用，它继承了（<code>extends Emitter</code>这段代码）<code>node</code>提供的原生 <code>events</code>（事件触发器）方法，那么它在哪用到了呢？我们知道<code>koa</code>可以使用 <code>app.on(&#39;error&#39;)</code> 来监听错误，可以看下面代码<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">app.on(<span class="string">'error'</span>, err =&gt; &#123;</div><div class="line">  log.error(<span class="string">'server error'</span>, err)</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>我们添加了一个 <code>“error”</code> 事件侦听器，那么它在哪会触发，理想的代码肯定是 <code>xxx.emit(&#39;error&#39;, ...)</code>，搜索一下就知道，代码在 <a href="https://github.com/koajs/koa/blob/master/lib/context.js#L121" target="_blank" rel="external">lib/context下的onerror</a>，当程序出错走会走这个<code>onerror</code>方法。</p>
<p>继续看构造函数内代码，我们可以传递<code>option</code>，当前<code>this</code>下面挂载了讲过属性，分别是 <code>proxy</code>（代理） <code>subdomainOffset</code>（作用是子域偏移数） <code>proxyIpHeader</code> <code>maxIpsCount</code> <code>env</code>，这几个属性都可以从外部传入，当然不传的话会有默认值，比如<code>env</code>标记开发环境的变量，默认是 <code>&#39;development&#39;</code>。</p>
<p>往下看到有一个 <code>this.middleware = []</code>，这里是存放中间件的，<code>app.use()</code>内的方法都会<code>push</code>到这个数组内，那么它在哪会执行这些数组内部的方法呢？它会在当前实例的<code>callback</code>函数内调用，这个后面再讲。</p>
<p>然后继续看后面紧跟着三个创建对象的赋值的操作，分别是 <code>context/request/response</code>，他们其实都是来自另外三个文件暴露出来的对象。他们的作用简单来说就是对对象数据层做了处理，添加了很多方法，比如我们使用 <code>ctx.redirect</code> <code>ctx.body</code> <code>ctx.query</code>等等，都来自这三个对象内方法。后面会细说，先讲最外层的方法。</p>
<p>那么执行完构造函数，程序还是跑不起来不是？我们知道原生的创建一个后台应用需要使用到<code>http.createServer</code>，到目前为止我们还没有说到，我们先来看看原生怎么创建的<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</div><div class="line">  response.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</div><div class="line">  response.end(<span class="string">'Hello World\n'</span>);</div><div class="line">&#125;).listen(<span class="number">8888</span>);</div></pre></td></tr></table></figure></p>
<p>我们之前讲过<code>app.listen</code>方法是创建应用的关键，我们来看看源码<br><a href="https://github.com/koajs/koa/blob/master/lib/application.js#L77" target="_blank" rel="external">https://github.com/koajs/koa/blob/master/lib/application.js#L77</a><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">listen(...args) &#123;</div><div class="line">  debug(<span class="string">'listen'</span>);</div><div class="line">  <span class="keyword">const</span> server = http.createServer(<span class="keyword">this</span>.callback());</div><div class="line">  <span class="keyword">return</span> server.listen(...args);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>是不是跟之前我们写的很像？看上面代码可以看出执行<code>listen</code>构建了一个服务，调用了<code>callback</code>方法，继续看<code>callback</code><br><a href="https://github.com/koajs/koa/blob/master/lib/application.js#L141" target="_blank" rel="external">https://github.com/koajs/koa/blob/master/lib/application.js#L141</a><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">callback() &#123;</div><div class="line">  <span class="keyword">const</span> fn = compose(<span class="keyword">this</span>.middleware);</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.listenerCount(<span class="string">'error'</span>)) <span class="keyword">this</span>.on(<span class="string">'error'</span>, <span class="keyword">this</span>.onerror);</div><div class="line"></div><div class="line">  <span class="keyword">const</span> handleRequest = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> ctx = <span class="keyword">this</span>.createContext(req, res);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.handleRequest(ctx, fn);</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> handleRequest;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>回调内部首先执行了中间件，调用了<code>compose</code>，这个<a href="http://www.wclimb.site/2019/12/11/Koa源码系列之koa-compose/">上上篇文章</a>讲过，继续看，最后返回了一个处理请求的函数<code>handleRequest</code>，接收两个参数<code>req</code>，<code>res</code>，其实就是之前我们原生创建应用返回的数据，内部继续调用了<code>this.createContext</code>，该方法主要是对数据进行处理，源码如下：<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">createContext(req, res) &#123;</div><div class="line">  <span class="keyword">const</span> context = <span class="built_in">Object</span>.create(<span class="keyword">this</span>.context);</div><div class="line">  <span class="keyword">const</span> request = context.request = <span class="built_in">Object</span>.create(<span class="keyword">this</span>.request);</div><div class="line">  <span class="keyword">const</span> response = context.response = <span class="built_in">Object</span>.create(<span class="keyword">this</span>.response);</div><div class="line">  context.app = request.app = response.app = <span class="keyword">this</span>;</div><div class="line">  context.req = request.req = response.req = req;</div><div class="line">  context.res = request.res = response.res = res;</div><div class="line">  request.ctx = response.ctx = context;</div><div class="line">  request.response = response;</div><div class="line">  response.request = request;</div><div class="line">  context.originalUrl = request.originalUrl = req.url;</div><div class="line">  context.state = &#123;&#125;;</div><div class="line">  <span class="keyword">return</span> context;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>从上面可以看出，它的功能主要是对数据进行进一步处理，把它挂载多个<code>key</code>上，这也就是我们可以使用<code>ctx.req</code>和<code>ctx.response</code>的原因。等会会讲到<code>this.context/this.request/this.response</code>内部的实现。<br><code>callback</code>回调内部使用<code>this.handleRequest</code>方法来处理结果，我们看一下源码<br><a href="https://github.com/koajs/koa/blob/master/lib/application.js#L160" target="_blank" rel="external">https://github.com/koajs/koa/blob/master/lib/application.js#L160</a><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">handleRequest(ctx, fnMiddleware) &#123;</div><div class="line">  <span class="keyword">const</span> res = ctx.res;</div><div class="line">  res.statusCode = <span class="number">404</span>;</div><div class="line">  <span class="keyword">const</span> onerror = <span class="function"><span class="params">err</span> =&gt;</span> ctx.onerror(err);</div><div class="line">  <span class="keyword">const</span> handleResponse = <span class="function"><span class="params">()</span> =&gt;</span> respond(ctx);</div><div class="line">  onFinished(res, onerror);</div><div class="line">  <span class="keyword">return</span> fnMiddleware(ctx).then(handleResponse).catch(onerror);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的代码很好理解，意思就是中间件执行完后，再异步里处理返回请求的信息，也就是<code>respond</code>方法，如果内部报错自然会走<code>catch</code>方法，然后处理的函数是<code>lib/context.js</code>文件下暴露的<code>onerror</code>方法，这个方法上面有讲过。我们具体看一下<code>koa</code>是怎么处理请求返回数据的。</p>
<p>🤔分析之前我们先思考一下开发的时候是怎么返回数据给前端的？我们使用<code>ctx.body = &#39;xx&#39;</code>，当然这个值不一定是字符串，可以是对象、<code>buffer</code>等。然后思考一下原生的使用最后一般返回数据是怎么样的呢？肯定不是<code>ctx.body</code>，这个只是个语法糖而已，熟悉的人应该立马就知道，原生返回数据我们都是使用<code>res.end(data)</code>的形式返回，这里就可以猜测，<code>koa</code>肯定是先取到了我们<code>ctx.body</code>的值，最后使用<code>res.end(data)</code>来返回数据的。</p>
<p>respond方法<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">respond</span>(<span class="params">ctx</span>) </span>&#123;</div><div class="line">  <span class="comment">// allow bypassing koa</span></div><div class="line">  <span class="keyword">if</span> (<span class="literal">false</span> === ctx.respond) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (!ctx.writable) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">  <span class="keyword">const</span> res = ctx.res;</div><div class="line">  <span class="keyword">let</span> body = ctx.body;</div><div class="line">  <span class="keyword">const</span> code = ctx.status;</div><div class="line"></div><div class="line">  <span class="comment">// ignore body</span></div><div class="line">  <span class="keyword">if</span> (statuses.empty[code]) &#123;</div><div class="line">    <span class="comment">// strip headers</span></div><div class="line">    ctx.body = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">return</span> res.end();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (<span class="string">'HEAD'</span> === ctx.method) &#123;</div><div class="line">    <span class="keyword">if</span> (!res.headersSent &amp;&amp; !ctx.response.has(<span class="string">'Content-Length'</span>)) &#123;</div><div class="line">      <span class="keyword">const</span> &#123; length &#125; = ctx.response;</div><div class="line">      <span class="keyword">if</span> (<span class="built_in">Number</span>.isInteger(length)) ctx.length = length;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res.end();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// status body</span></div><div class="line">  <span class="keyword">if</span> (<span class="literal">null</span> == body) &#123;</div><div class="line">    <span class="keyword">if</span> (ctx.req.httpVersionMajor &gt;= <span class="number">2</span>) &#123;</div><div class="line">      body = <span class="built_in">String</span>(code);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      body = ctx.message || <span class="built_in">String</span>(code);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (!res.headersSent) &#123;</div><div class="line">      ctx.type = <span class="string">'text'</span>;</div><div class="line">      ctx.length = Buffer.byteLength(body);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res.end(body);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// responses</span></div><div class="line">  <span class="keyword">if</span> (Buffer.isBuffer(body)) <span class="keyword">return</span> res.end(body);</div><div class="line">  <span class="keyword">if</span> (<span class="string">'string'</span> == <span class="keyword">typeof</span> body) <span class="keyword">return</span> res.end(body);</div><div class="line">  <span class="keyword">if</span> (body <span class="keyword">instanceof</span> Stream) <span class="keyword">return</span> body.pipe(res);</div><div class="line"></div><div class="line">  <span class="comment">// body: json</span></div><div class="line">  body = <span class="built_in">JSON</span>.stringify(body);</div><div class="line">  <span class="keyword">if</span> (!res.headersSent) &#123;</div><div class="line">    ctx.length = Buffer.byteLength(body);</div><div class="line">  &#125;</div><div class="line">  res.end(body);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>好了，根据之前的理解，再看一下上面的代码是不是清楚很多？不过其中<code>koa</code>还是做了一些数据的处理，比如如果我们<code>ctx.body = {}</code>，<code>koa</code>会自动把对象转字符串，然后就算返回数据的<code>length</code>，最后再调用<code>res.end(body)</code>。</p>
<h2 id="context-js"><a href="#context-js" class="headerlink" title="context.js"></a>context.js</h2><p><a href="https://github.com/koajs/koa/blob/master/lib/context.js" target="_blank" rel="external">https://github.com/koajs/koa/blob/master/lib/context.js</a></p>
<p>之前说过会讲到三个文件暴露出来的方法，这是其中一个。他们其实都是对数据进行了一系列的处理。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="meta"></span></div><div class="line">'use strict';</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Module dependencies.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</div><div class="line"><span class="keyword">const</span> createError = <span class="built_in">require</span>(<span class="string">'http-errors'</span>);</div><div class="line"><span class="keyword">const</span> httpAssert = <span class="built_in">require</span>(<span class="string">'http-assert'</span>);</div><div class="line"><span class="keyword">const</span> delegate = <span class="built_in">require</span>(<span class="string">'delegates'</span>);</div><div class="line"><span class="keyword">const</span> statuses = <span class="built_in">require</span>(<span class="string">'statuses'</span>);</div><div class="line"><span class="keyword">const</span> Cookies = <span class="built_in">require</span>(<span class="string">'cookies'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> COOKIES = <span class="built_in">Symbol</span>(<span class="string">'context#cookies'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> proto = <span class="built_in">module</span>.exports = &#123;</div><div class="line"></div><div class="line">  inspect() &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> === proto) <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.toJSON();</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  toJSON() &#123;</div><div class="line">    ...</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">assert</span>: httpAssert,</div><div class="line"></div><div class="line">  <span class="keyword">throw</span>(...args) &#123;</div><div class="line">    <span class="keyword">throw</span> createError(...args);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  onerror(err) &#123;</div><div class="line">    ...</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  get cookies() &#123;</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>[COOKIES]) &#123;</div><div class="line">      <span class="keyword">this</span>[COOKIES] = <span class="keyword">new</span> Cookies(<span class="keyword">this</span>.req, <span class="keyword">this</span>.res, &#123;</div><div class="line">        <span class="attr">keys</span>: <span class="keyword">this</span>.app.keys,</div><div class="line">        <span class="attr">secure</span>: <span class="keyword">this</span>.request.secure</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>[COOKIES];</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  set cookies(_cookies) &#123;</div><div class="line">    <span class="keyword">this</span>[COOKIES] = _cookies;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (util.inspect.custom) &#123;</div><div class="line">  <span class="built_in">module</span>.exports[util.inspect.custom] = <span class="built_in">module</span>.exports.inspect;</div><div class="line">&#125;</div><div class="line">delegate(proto, <span class="string">'response'</span>)</div><div class="line">  ...</div><div class="line">  .method(<span class="string">'append'</span>)</div><div class="line">  .method(<span class="string">'flushHeaders'</span>)</div><div class="line">  .access(<span class="string">'status'</span>)</div><div class="line">  .access(<span class="string">'message'</span>)</div><div class="line">  .access(<span class="string">'body'</span>)</div><div class="line">  .access(<span class="string">'length'</span>)</div><div class="line">  .access(<span class="string">'type'</span>)</div><div class="line">  .access(<span class="string">'lastModified'</span>)</div><div class="line">  .access(<span class="string">'etag'</span>)</div><div class="line">  .getter(<span class="string">'headerSent'</span>)</div><div class="line">  .getter(<span class="string">'writable'</span>);</div><div class="line"></div><div class="line">delegate(proto, <span class="string">'request'</span>)</div><div class="line">  ...</div><div class="line">  .getter(<span class="string">'host'</span>)</div><div class="line">  .getter(<span class="string">'hostname'</span>)</div><div class="line">  .getter(<span class="string">'URL'</span>)</div><div class="line">  .getter(<span class="string">'header'</span>)</div><div class="line">  .getter(<span class="string">'headers'</span>)</div><div class="line">  .getter(<span class="string">'secure'</span>)</div><div class="line">  .getter(<span class="string">'stale'</span>)</div><div class="line">  .getter(<span class="string">'fresh'</span>)</div><div class="line">  .getter(<span class="string">'ips'</span>)</div><div class="line">  .getter(<span class="string">'ip'</span>);</div></pre></td></tr></table></figure>
<p>以上就是<code>context</code>的全部内容，我做了精简，把注释和一些相似的代码删除了，但是方法上面全部都在，<code>context</code>你可以直接理解为我们经常使用的<code>ctx</code>，<code>ctx</code>下面是不是有很多方法？其实基本上都是末尾<code>delegate</code>方法处理之后得到的，我们可以看到它分别处理了<code>response</code>、<code>request</code>，其实就算请求体和响应体，<a href="http://www.wclimb.site/2019/12/16/Koa%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97%E4%B9%8B%E4%BE%9D%E8%B5%96%E5%8C%85%E8%A7%A3%E6%9E%90/#delegates">上篇文章</a>我们介绍过它的机制，我们使用的<code>ctx.body</code>、<code>ctx.header</code>、<code>ctx.query</code>….基本上方法都可以在这里看到。除了这些，上面还有获取<code>cookie</code>和设置<code>cookie</code>的方法，还有我们之前讲到的 <code>onerror</code> 方法，</p>
<h2 id="request-js"><a href="#request-js" class="headerlink" title="request.js"></a>request.js</h2><p>现在我们自然可以知道，<code>body/header/query</code>这些方法都放在另外两个文件下面，<code>requset</code>下面会有<code>host/hostname/URL/header</code>…..方法，我们这里只看部分方法，因为方法有点多，篇幅很长<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> URL = <span class="built_in">require</span>(<span class="string">'url'</span>).URL;</div><div class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</div><div class="line"><span class="keyword">const</span> accepts = <span class="built_in">require</span>(<span class="string">'accepts'</span>);</div><div class="line"><span class="keyword">const</span> contentType = <span class="built_in">require</span>(<span class="string">'content-type'</span>);</div><div class="line"><span class="keyword">const</span> stringify = <span class="built_in">require</span>(<span class="string">'url'</span>).format;</div><div class="line"><span class="keyword">const</span> parse = <span class="built_in">require</span>(<span class="string">'parseurl'</span>);</div><div class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</div><div class="line"><span class="keyword">const</span> typeis = <span class="built_in">require</span>(<span class="string">'type-is'</span>);</div><div class="line"><span class="keyword">const</span> fresh = <span class="built_in">require</span>(<span class="string">'fresh'</span>);</div><div class="line"><span class="keyword">const</span> only = <span class="built_in">require</span>(<span class="string">'only'</span>);</div><div class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> IP = <span class="built_in">Symbol</span>(<span class="string">'context#ip'</span>);</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Prototype.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * Return request header.</div><div class="line">   *</div><div class="line">   * @return &#123;Object&#125;</div><div class="line">   * @api public</div><div class="line">   */</div><div class="line"></div><div class="line">  get header() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.req.headers;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * Set request header.</div><div class="line">   *</div><div class="line">   * @api public</div><div class="line">   */</div><div class="line"></div><div class="line">  set header(val) &#123;</div><div class="line">    <span class="keyword">this</span>.req.headers = val;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * Return request header, alias as request.header</div><div class="line">   *</div><div class="line">   * @return &#123;Object&#125;</div><div class="line">   * @api public</div><div class="line">   */</div><div class="line"></div><div class="line">  get headers() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.req.headers;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * Set request header, alias as request.header</div><div class="line">   *</div><div class="line">   * @api public</div><div class="line">   */</div><div class="line"></div><div class="line">  set headers(val) &#123;</div><div class="line">    <span class="keyword">this</span>.req.headers = val;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * Get request URL.</div><div class="line">   *</div><div class="line">   * @return &#123;String&#125;</div><div class="line">   * @api public</div><div class="line">   */</div><div class="line"></div><div class="line">  get url() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.req.url;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * Set request URL.</div><div class="line">   *</div><div class="line">   * @api public</div><div class="line">   */</div><div class="line"></div><div class="line">  set url(val) &#123;</div><div class="line">    <span class="keyword">this</span>.req.url = val;</div><div class="line">  &#125;,</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面就是部分<code>request</code>内的方法，是不是很简单，就是一些获取和值的设置。<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">get header() &#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.req.headers;</div><div class="line">&#125;,</div><div class="line">set header(val) &#123;</div><div class="line">  <span class="keyword">this</span>.req.headers = val;</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<p>比如上面获取我设置<code>header</code>会有两个方法，<code>ctx.header</code>，会调用第一个<code>get</code>方法，赋值则会走第二个方法，那么<code>this.req</code>是什么呢，我们肯定知道是<code>http.createServer</code>回调返回的<code>req</code>信息，那么<code>this</code>具体是什么呢？之前我们就讲过在<code>application.js</code>内的<code>createContext</code>方法，<code>request</code>赋值给了<code>context.requset</code>，然后<code>context.js</code>内部通过<code>delegate</code>代理了数据，<code>context</code>下也定义了<code>req</code>对象，这样我们就可以直接使用<code>this.req</code>直接获取数据<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">createContext(req, res) &#123;</div><div class="line">  <span class="keyword">const</span> context = <span class="built_in">Object</span>.create(<span class="keyword">this</span>.context);</div><div class="line">  <span class="keyword">const</span> request = (context.request = <span class="built_in">Object</span>.create(<span class="keyword">this</span>.request));</div><div class="line">  <span class="keyword">const</span> response = (context.response = <span class="built_in">Object</span>.create(<span class="keyword">this</span>.response));</div><div class="line">  context.app = request.app = response.app = <span class="keyword">this</span>;</div><div class="line">  context.req = request.req = response.req = req;</div><div class="line">  context.res = request.res = response.res = res;</div><div class="line">  request.ctx = response.ctx = context;</div><div class="line">  request.response = response;</div><div class="line">  response.request = request;</div><div class="line">  context.originalUrl = request.originalUrl = req.url;</div><div class="line">  context.state = &#123;&#125;;</div><div class="line">  <span class="keyword">return</span> context;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="response-js"><a href="#response-js" class="headerlink" title="response.js"></a>response.js</h2><p>这里跟上面的原理一样，我们简单看一下部分代码吧<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line"></div><div class="line">  get status() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.res.statusCode;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * Set response status code.</div><div class="line">   *</div><div class="line">   * @param &#123;Number&#125; code</div><div class="line">   * @api public</div><div class="line">   */</div><div class="line"></div><div class="line">  set status(code) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.headerSent) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">    assert(<span class="built_in">Number</span>.isInteger(code), <span class="string">'status code must be a number'</span>);</div><div class="line">    assert(code &gt;= <span class="number">100</span> &amp;&amp; code &lt;= <span class="number">999</span>, <span class="string">`invalid status code: <span class="subst">$&#123;code&#125;</span>`</span>);</div><div class="line">    <span class="keyword">this</span>._explicitStatus = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">this</span>.res.statusCode = code;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.req.httpVersionMajor &lt; <span class="number">2</span>) <span class="keyword">this</span>.res.statusMessage = statuses[code];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.body &amp;&amp; statuses.empty[code]) <span class="keyword">this</span>.body = <span class="literal">null</span>;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * Get response status message</div><div class="line">   *</div><div class="line">   * @return &#123;String&#125;</div><div class="line">   * @api public</div><div class="line">   */</div><div class="line"></div><div class="line">  get message() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.res.statusMessage || statuses[<span class="keyword">this</span>.status];</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * Set response status message</div><div class="line">   *</div><div class="line">   * @param &#123;String&#125; msg</div><div class="line">   * @api public</div><div class="line">   */</div><div class="line"></div><div class="line">  set message(msg) &#123;</div><div class="line">    <span class="keyword">this</span>.res.statusMessage = msg;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * Get response body.</div><div class="line">   *</div><div class="line">   * @return &#123;Mixed&#125;</div><div class="line">   * @api public</div><div class="line">   */</div><div class="line"></div><div class="line">  get body() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._body;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * Set response body.</div><div class="line">   *</div><div class="line">   * @param &#123;String|Buffer|Object|Stream&#125; val</div><div class="line">   * @api public</div><div class="line">   */</div><div class="line"></div><div class="line">  set body(val) &#123;</div><div class="line">    <span class="keyword">const</span> original = <span class="keyword">this</span>._body;</div><div class="line">    <span class="keyword">this</span>._body = val;</div><div class="line"></div><div class="line">    <span class="comment">// no content</span></div><div class="line">    <span class="keyword">if</span> (<span class="literal">null</span> == val) &#123;</div><div class="line">      <span class="keyword">if</span> (!statuses.empty[<span class="keyword">this</span>.status]) <span class="keyword">this</span>.status = <span class="number">204</span>;</div><div class="line">      <span class="keyword">this</span>.remove(<span class="string">'Content-Type'</span>);</div><div class="line">      <span class="keyword">this</span>.remove(<span class="string">'Content-Length'</span>);</div><div class="line">      <span class="keyword">this</span>.remove(<span class="string">'Transfer-Encoding'</span>);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// set the status</span></div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>._explicitStatus) <span class="keyword">this</span>.status = <span class="number">200</span>;</div><div class="line"></div><div class="line">    <span class="comment">// set the content-type only if not yet set</span></div><div class="line">    <span class="keyword">const</span> setType = !<span class="keyword">this</span>.has(<span class="string">'Content-Type'</span>);</div><div class="line"></div><div class="line">    <span class="comment">// string</span></div><div class="line">    <span class="keyword">if</span> (<span class="string">'string'</span> == <span class="keyword">typeof</span> val) &#123;</div><div class="line">      <span class="keyword">if</span> (setType) <span class="keyword">this</span>.type = <span class="regexp">/^\s*&lt;/</span>.test(val) ? <span class="string">'html'</span> : <span class="string">'text'</span>;</div><div class="line">      <span class="keyword">this</span>.length = Buffer.byteLength(val);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// buffer</span></div><div class="line">    <span class="keyword">if</span> (Buffer.isBuffer(val)) &#123;</div><div class="line">      <span class="keyword">if</span> (setType) <span class="keyword">this</span>.type = <span class="string">'bin'</span>;</div><div class="line">      <span class="keyword">this</span>.length = val.length;</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// stream</span></div><div class="line">    <span class="keyword">if</span> (<span class="string">'function'</span> == <span class="keyword">typeof</span> val.pipe) &#123;</div><div class="line">      onFinish(<span class="keyword">this</span>.res, destroy.bind(<span class="literal">null</span>, val));</div><div class="line">      ensureErrorHandler(val, err =&gt; <span class="keyword">this</span>.ctx.onerror(err));</div><div class="line"></div><div class="line">      <span class="comment">// overwriting</span></div><div class="line">      <span class="keyword">if</span> (<span class="literal">null</span> != original &amp;&amp; original != val) <span class="keyword">this</span>.remove(<span class="string">'Content-Length'</span>);</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (setType) <span class="keyword">this</span>.type = <span class="string">'bin'</span>;</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// json</span></div><div class="line">    <span class="keyword">this</span>.remove(<span class="string">'Content-Length'</span>);</div><div class="line">    <span class="keyword">this</span>.type = <span class="string">'json'</span>;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * Set Content-Length field to `n`.</div><div class="line">   *</div><div class="line">   * @param &#123;Number&#125; n</div><div class="line">   * @api public</div><div class="line">   */</div><div class="line"></div><div class="line">  set length(n) &#123;</div><div class="line">    <span class="keyword">this</span>.set(<span class="string">'Content-Length'</span>, n);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">   * Return parsed response Content-Length when present.</div><div class="line">   *</div><div class="line">   * @return &#123;Number&#125;</div><div class="line">   * @api public</div><div class="line">   */</div><div class="line"></div><div class="line">  get length() &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.has(<span class="string">'Content-Length'</span>)) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="built_in">parseInt</span>(<span class="keyword">this</span>.get(<span class="string">'Content-Length'</span>), <span class="number">10</span>) || <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">const</span> &#123; body &#125; = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">if</span> (!body || body <span class="keyword">instanceof</span> Stream) <span class="keyword">return</span> <span class="literal">undefined</span>;</div><div class="line">    <span class="keyword">if</span> (<span class="string">'string'</span> === <span class="keyword">typeof</span> body) <span class="keyword">return</span> Buffer.byteLength(body);</div><div class="line">    <span class="keyword">if</span> (Buffer.isBuffer(body)) <span class="keyword">return</span> body.length;</div><div class="line">    <span class="keyword">return</span> Buffer.byteLength(<span class="built_in">JSON</span>.stringify(body));</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面是部分代码，看起来很容易理解，获取状态码使用<code>ctx.status</code>，也可以设置。这里我们值得看看<code>body</code>方法，看看它是怎么处理的，我们经常使用的<code>ctx.body</code>就是来自这里<br><code>body</code>方法<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">set body(val) &#123;</div><div class="line">  <span class="keyword">const</span> original = <span class="keyword">this</span>._body;</div><div class="line">  <span class="keyword">this</span>._body = val;</div><div class="line"></div><div class="line">  <span class="comment">// no content</span></div><div class="line">  <span class="comment">// 如果没有内容返回状态码204</span></div><div class="line">  <span class="keyword">if</span> (<span class="literal">null</span> == val) &#123;</div><div class="line">    <span class="keyword">if</span> (!statuses.empty[<span class="keyword">this</span>.status]) <span class="keyword">this</span>.status = <span class="number">204</span>;</div><div class="line">    <span class="keyword">this</span>.remove(<span class="string">'Content-Type'</span>);</div><div class="line">    <span class="keyword">this</span>.remove(<span class="string">'Content-Length'</span>);</div><div class="line">    <span class="keyword">this</span>.remove(<span class="string">'Transfer-Encoding'</span>);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// set the status</span></div><div class="line">  <span class="comment">// 如果我们没有设置状态码，默认是200，this._explicitStatus在set status方法内会有赋值，意思是如果我们显示的设置了状态码，那么它的值为true</span></div><div class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>._explicitStatus) <span class="keyword">this</span>.status = <span class="number">200</span>;</div><div class="line"></div><div class="line">  <span class="comment">// set the content-type only if not yet set</span></div><div class="line">  <span class="comment">// 这里意思是，如果我们没有设置content-type的时候，判断是否需要设置数据类型</span></div><div class="line">  <span class="keyword">const</span> setType = !<span class="keyword">this</span>.has(<span class="string">'Content-Type'</span>);</div><div class="line"></div><div class="line">  <span class="comment">// string</span></div><div class="line">  <span class="comment">// 如果是字符串类型</span></div><div class="line">  <span class="keyword">if</span> (<span class="string">'string'</span> == <span class="keyword">typeof</span> val) &#123;</div><div class="line">    <span class="comment">// 如果需要设置content-type，那么会有两种类型，html、text</span></div><div class="line">    <span class="keyword">if</span> (setType) <span class="keyword">this</span>.type = <span class="regexp">/^\s*&lt;/</span>.test(val) ? <span class="string">'html'</span> : <span class="string">'text'</span>;</div><div class="line">    <span class="comment">// 顺便设置他们的length</span></div><div class="line">    <span class="keyword">this</span>.length = Buffer.byteLength(val);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// buffer</span></div><div class="line">  <span class="comment">// 如果是buffer，并且需要设置content-type，那么指定类型为bin，同样需要设置length</span></div><div class="line">  <span class="keyword">if</span> (Buffer.isBuffer(val)) &#123;</div><div class="line">    <span class="keyword">if</span> (setType) <span class="keyword">this</span>.type = <span class="string">'bin'</span>;</div><div class="line">    <span class="keyword">this</span>.length = val.length;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// stream</span></div><div class="line">  <span class="comment">// 如果是流文件，类型仍然是bin</span></div><div class="line">  <span class="keyword">if</span> (<span class="string">'function'</span> == <span class="keyword">typeof</span> val.pipe) &#123;</div><div class="line">    onFinish(<span class="keyword">this</span>.res, destroy.bind(<span class="literal">null</span>, val));</div><div class="line">    ensureErrorHandler(val, err =&gt; <span class="keyword">this</span>.ctx.onerror(err));</div><div class="line"></div><div class="line">    <span class="comment">// overwriting</span></div><div class="line">    <span class="keyword">if</span> (<span class="literal">null</span> != original &amp;&amp; original != val) <span class="keyword">this</span>.remove(<span class="string">'Content-Length'</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (setType) <span class="keyword">this</span>.type = <span class="string">'bin'</span>;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// json</span></div><div class="line">  <span class="comment">// 最后剩下的只有json类型了</span></div><div class="line">  <span class="keyword">this</span>.remove(<span class="string">'Content-Length'</span>);</div><div class="line">  <span class="keyword">this</span>.type = <span class="string">'json'</span>;</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>大体对<code>koa</code>执行的流程分析了一遍，总体来说还是很好理解的，就是用文字表达出来可能不太理想，现在其实我们已经可以写一个自己的<code>koa</code>了。本文还会继续完善，如有错误，还望指正。</p>
<p>原文地址：<a href="http://www.wclimb.site/2019/12/23/Koa源码系列之全流程解析/">http://www.wclimb.site/2019/12/23/Koa源码系列之全流程解析/</a></p>
]]></content>
      <categories>
        <category>Node</category>
        <category>Koa</category>
      </categories>
      <tags>
        <tag>原创</tag>
        <tag>javascript</tag>
        <tag>Koa</tag>
      </tags>
  </entry>
  <entry>
    <title>Koa源码系列之依赖包解析</title>
    <url>/2019/12/16/Koa%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97%E4%B9%8B%E4%BE%9D%E8%B5%96%E5%8C%85%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>上一篇我们讲了 <a href="http://www.wclimb.site/2019/12/11/Koa源码系列之koa-compose/">Koa源码系列之koa-compose</a>，其实也可以归为到这篇文章。今天开始我们看看<code>Koa</code>源码中使用了哪些包，他们起到了什么作用。ps: 这里不准备讲所有的包</p>
<h2 id="is-generator-function"><a href="#is-generator-function" class="headerlink" title="is-generator-function"></a>is-generator-function</h2><p><a href="https://github.com/koajs/koa/blob/master/lib/application.js#L122" target="_blank" rel="external">https://github.com/koajs/koa/blob/master/lib/application.js#L122</a><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">use(fn) &#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">'function'</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'middleware must be a function!'</span>);</div><div class="line">  <span class="keyword">if</span> (isGeneratorFunction(fn)) &#123;</div><div class="line">    deprecate(<span class="string">'Support for generators will be removed in v3. '</span> +</div><div class="line">              <span class="string">'See the documentation for examples of how to convert old middleware '</span> +</div><div class="line">              <span class="string">'https://github.com/koajs/koa/blob/master/docs/migration.md'</span>);</div><div class="line">    fn = convert(fn);</div><div class="line">  &#125;</div><div class="line">  debug(<span class="string">'use %s'</span>, fn._name || fn.name || <span class="string">'-'</span>);</div><div class="line">  <span class="keyword">this</span>.middleware.push(fn);</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看看上面一段代码，<code>koa</code>在注入中间件的之前先判断传入是否是函数，然后判断当前传入的函数是否是 <code>generator</code>，如果是 <code>generator</code> 那么使用<code>convert</code>（<code>koa-convert</code>包，下面会讲到）进行转换，其实转换出来返回的是一个 <code>promise</code>，那么怎么判断是否是 <code>generator</code> 函数的呢？使用了<code>isGeneratorFunction</code>方法，也就是 <code>is-generator-function</code>包，下面是源码<br><a id="more"></a><br><a href="https://github.com/inspect-js/is-generator-function/blob/master/index.js" target="_blank" rel="external">https://github.com/inspect-js/is-generator-function/blob/master/index.js</a><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> toStr = <span class="built_in">Object</span>.prototype.toString;</div><div class="line"><span class="keyword">var</span> fnToStr = <span class="built_in">Function</span>.prototype.toString;</div><div class="line"><span class="keyword">var</span> isFnRegex = <span class="regexp">/^\s*(?:function)?\*/</span>; </div><div class="line"><span class="keyword">var</span> hasToStringTag = <span class="keyword">typeof</span> <span class="built_in">Symbol</span> === <span class="string">'function'</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">Symbol</span>.toStringTag === <span class="string">'symbol'</span>;</div><div class="line"><span class="keyword">var</span> getProto = <span class="built_in">Object</span>.getPrototypeOf;</div><div class="line"><span class="keyword">var</span> getGeneratorFunc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// eslint-disable-line consistent-return</span></div><div class="line">	<span class="keyword">if</span> (!hasToStringTag) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		<span class="keyword">return</span> <span class="built_in">Function</span>(<span class="string">'return function*() &#123;&#125;'</span>)();</div><div class="line">	&#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">	&#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> generatorFunc = getGeneratorFunc();</div><div class="line"><span class="keyword">var</span> GeneratorFunction = generatorFunc ? getProto(generatorFunc) : &#123;&#125;;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">isGeneratorFunction</span>(<span class="params">fn</span>) </span>&#123;</div><div class="line">  <span class="comment">// 首先判断是否是函数，如果不是直接返回false</span></div><div class="line">	<span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">'function'</span>) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">	&#125;</div><div class="line">  <span class="comment">// 先将函数转为字符串，然后正则匹配判断</span></div><div class="line">	<span class="keyword">if</span> (isFnRegex.test(fnToStr.call(fn))) &#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (!hasToStringTag) &#123;</div><div class="line">		<span class="keyword">var</span> str = toStr.call(fn);</div><div class="line">		<span class="keyword">return</span> str === <span class="string">'[object GeneratorFunction]'</span>;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> getProto(fn) === GeneratorFunction;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="函数转字符串正则匹配"><a href="#函数转字符串正则匹配" class="headerlink" title="函数转字符串正则匹配"></a>函数转字符串正则匹配</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> isFnRegex = <span class="regexp">/^\s*(?:function)?\*/</span>;</div></pre></td></tr></table></figure>
<p>上面代码正则匹配 <code>function* (){}</code>，这里其实匹配有问题，因为可以写成 <code>function  * (){}</code>，没有规定<code>*</code>一定到紧跟<code>function</code>，正则可以改成 <code>/^\s*(?:function)?(\s+)?\*/</code></p>
<h3 id="判断Symbol-toStringTag"><a href="#判断Symbol-toStringTag" class="headerlink" title="判断Symbol.toStringTag"></a>判断<code>Symbol.toStringTag</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> hasToStringTag = <span class="keyword">typeof</span> <span class="built_in">Symbol</span> === <span class="string">'function'</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">Symbol</span>.toStringTag === <span class="string">'symbol'</span>;</div></pre></td></tr></table></figure>
<p>上面这段代码很多人其实很疑惑，其实这里就想得出有没有<code>Symbol</code>以及有没有<code>toStringTag</code>方法，这个很重要，如果存在<code>toStringTag</code>，那么我们用 <code>Object.prototype.toString</code>来判断数据类型变得不可靠了。我们可以看下面这段代码<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ValidatorClass</span> </span>&#123;</div><div class="line">  get [<span class="built_in">Symbol</span>.toStringTag]() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'Validator'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> ValidatorClass()));</div><div class="line"><span class="comment">// expected output: "[object Validator]"</span></div></pre></td></tr></table></figure></p>
<p>有了<code>toStringTag</code>方法，我们可以伪造数据类型，这肯定会有风险，所以之前首先判断是否存在，如果存在它会使用 <code>Object.getPrototypeOf</code>来判断他们的原型是不是来自同一个，也就是下面的代码<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> generatorFunc = getGeneratorFunc();</div><div class="line"><span class="keyword">var</span> getProto = <span class="built_in">Object</span>.getPrototypeOf;</div><div class="line"><span class="keyword">var</span> GeneratorFunction = generatorFunc ? getProto(generatorFunc) : &#123;&#125;;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">return getProto(fn) === GeneratorFunction;</div></pre></td></tr></table></figure></p>
<h3 id="直接使用Object-prototype-toString"><a href="#直接使用Object-prototype-toString" class="headerlink" title="直接使用Object.prototype.toString"></a>直接使用<code>Object.prototype.toString</code></h3><p>如果不存在<code>Symbol.toStringTag</code>，那么自然我们可以使用 <code>Object.prototype.toString</code> 来判断数据类型<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> (!hasToStringTag) &#123;</div><div class="line">  <span class="keyword">var</span> str = toStr.call(fn);</div><div class="line">  <span class="keyword">return</span> str === <span class="string">'[object GeneratorFunction]'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="delegates"><a href="#delegates" class="headerlink" title="delegates"></a>delegates</h2><p>在koa内使用<br><a href="https://github.com/koajs/koa/blob/master/lib/context.js#L191" target="_blank" rel="external">https://github.com/koajs/koa/blob/master/lib/context.js#L191</a><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Response delegation.</div><div class="line"> */</div><div class="line">delegate(proto, <span class="string">'response'</span>)</div><div class="line">  .method(<span class="string">'attachment'</span>)</div><div class="line">  .method(<span class="string">'redirect'</span>)</div><div class="line">  .method(<span class="string">'remove'</span>)</div><div class="line">  .method(<span class="string">'vary'</span>)</div><div class="line">  .method(<span class="string">'has'</span>)</div><div class="line">  .method(<span class="string">'set'</span>)</div><div class="line">  .method(<span class="string">'append'</span>)</div><div class="line">  .method(<span class="string">'flushHeaders'</span>)</div><div class="line">  .access(<span class="string">'status'</span>)</div><div class="line">  .access(<span class="string">'message'</span>)</div><div class="line">  .access(<span class="string">'body'</span>)</div><div class="line">  .access(<span class="string">'length'</span>)</div><div class="line">  .access(<span class="string">'type'</span>)</div><div class="line">  .access(<span class="string">'lastModified'</span>)</div><div class="line">  .access(<span class="string">'etag'</span>)</div><div class="line">  .getter(<span class="string">'headerSent'</span>)</div><div class="line">  .getter(<span class="string">'writable'</span>);</div></pre></td></tr></table></figure></p>
<p>乍一看看不出它有啥用处，其实很简单，它相当于做了代理，本来我们访问<code>body</code>需要<code>ctx.response.body</code>，现在你只需要<code>ctx.body</code>就可以了。是不是很简单？那么我们看一下这个包的源码具体怎么实现的<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Delegator</span>(<span class="params">proto, target</span>) </span>&#123;</div><div class="line"> ...</div><div class="line">&#125;</div><div class="line">Delegator.prototype.getter = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">  ...</div><div class="line">&#125;;</div><div class="line">Delegator.prototype.access = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">  ...</div><div class="line">&#125;;</div><div class="line">Delegator.prototype.setter = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">  ...</div><div class="line">&#125;;</div><div class="line">Delegator.prototype.method = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">  ...</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>上面的👆代码就是 <a href="https://github.com/tj/node-delegates" target="_blank" rel="external">delegates</a> 包的大致总体结构，还有其他几个方法这里不做介绍。我们可以先来看一下方法 <code>Delegator</code> 构造函数<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Delegator</span>(<span class="params">proto, target</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> Delegator)) <span class="keyword">return</span> <span class="keyword">new</span> Delegator(proto, target);</div><div class="line">  <span class="keyword">this</span>.proto = proto;</div><div class="line">  <span class="keyword">this</span>.target = target;</div><div class="line">  <span class="comment">// 以下可以忽略</span></div><div class="line">  <span class="keyword">this</span>.methods = [];</div><div class="line">  <span class="keyword">this</span>.getters = [];</div><div class="line">  <span class="keyword">this</span>.setters = [];</div><div class="line">  <span class="keyword">this</span>.fluents = [];</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>从上面我们可以看到，接收两个参数，分别是对应的对象和目标<code>key</code>值，<code>koa</code>使用的是 <code>delegate(proto, &#39;response&#39;)</code>，<code>proto</code>就是<code>ctx</code>，<code>response</code>就是目标<code>key</code>值。</p>
<p>继续看<code>getter</code><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">Delegator.prototype.getter = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> proto = <span class="keyword">this</span>.proto;</div><div class="line">  <span class="keyword">var</span> target = <span class="keyword">this</span>.target;</div><div class="line">  <span class="keyword">this</span>.getters.push(name);</div><div class="line"></div><div class="line">  proto.__defineGetter__(name, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>[target][name];</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>通过以上代码可以得知，它使用的是<code>__defineGetter__</code>来代理获取值，访问<code>ctx.body</code>的时候，其实返回的值是 <code>this[target][name]</code>，<code>target</code>我们已经知道，是<code>response</code>，然后在这里<code>body</code>就是<code>name</code>了。<br>但是我查看 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/__defineGetter__" target="_blank" rel="external"><strong>defineGetter</strong></a> 这个<code>api</code>，发现 <strong>该特性是非标准的，请尽量不要在生产环境中使用它！</strong>，我们思考以下，其实我们可以使用<code>Object.defineProperty</code>，把它进行改造<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">Object</span>.defineProperty(proto, name, &#123;</div><div class="line">  <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>[target][name];</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>其实我们看一下该项目的<code>PR</code>会发现，已经有人提了<code>PR</code>，但是一直没有<code>meger</code>。<br>剩下的可以同理，<code>setter</code>使用的是<code>__defineSetter__</code>方法，我们就可以借助<code>Object.defineProperty</code>的<code>set</code>进行改造。<br><code>access</code>方法则是两者方法的集合，如果满足可以获取值和设置值条件，都可以使用<code>access</code>，比较方便，它的源码也很好理解，同时调用 <code>get</code>和<code>set</code><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">Delegator.prototype.access = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.getter(name).setter(name);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="koa-convert"><a href="#koa-convert" class="headerlink" title="koa-convert"></a>koa-convert</h2><p>我们在上个模块看到了<code>Koa</code>源码有判断中间件传入的是否是 <code>generator</code> ，如果是<code>true</code>，那么它就调用了 <code>convert(fn)</code>，也就是这个模块需要解析的包 <code>koa-convert</code>，那么他到底有什么用呢？看下面他的源码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> co = <span class="built_in">require</span>(<span class="string">'co'</span>)</div><div class="line"><span class="keyword">const</span> compose = <span class="built_in">require</span>(<span class="string">'koa-compose'</span>)</div><div class="line"><span class="built_in">module</span>.exports = convert</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">convert</span> (<span class="params">mw</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> mw !== <span class="string">'function'</span>) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'middleware must be a function'</span>)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (mw.constructor.name !== <span class="string">'GeneratorFunction'</span>) &#123;</div><div class="line">    <span class="comment">// assume it's Promise-based middleware</span></div><div class="line">    <span class="keyword">return</span> mw</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">const</span> converted = <span class="function"><span class="keyword">function</span> (<span class="params">ctx, next</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> co.call(ctx, mw.call(ctx, createGenerator(next)))</div><div class="line">  &#125;</div><div class="line">  converted._name = mw._name || mw.name</div><div class="line">  <span class="keyword">return</span> converted</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> * <span class="title">createGenerator</span> (<span class="params">next</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">yield</span> next()</div><div class="line">&#125;</div><div class="line"></div><div class="line">convert.compose = <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(arr)) &#123;</div><div class="line">    arr = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> compose(arr.map(convert))</div><div class="line">&#125;</div><div class="line">convert.back = <span class="function"><span class="keyword">function</span> (<span class="params">mw</span>) </span>&#123;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以直接跳到第13行代码，直观的看到他使用了 <code>co</code> 方法，通过 <code>co</code>包（这里不展开讲这个包）处理返回的结果拿到最终需要转换的函数，使用 <code>call</code> 主要是想把 <code>this</code> 指向 <code>ctx</code> 对象。通过co处理得到的是一个 <code>Promise对象</code>，当然 <code>convert</code> 下还有两个方法，这里介绍一下，一个是 <code>compose</code>，看过上篇文章的应该知道，它依赖了 <code>koa-compose</code>，主要功能是将一个数组里的中间件全转成 <code>Promise</code> 对象。另一个方法是back，字面意思就能知道，就是回退，可以把函数转成 <code>generator</code></p>
<h2 id="only"><a href="#only" class="headerlink" title="only"></a>only</h2><p>看了koa源码你会发现在好几个地方用到了这个依赖包，这个包主要是输出你想要的对象数据，例子如下<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">var obj = &#123;</div><div class="line">  name: &apos;tobi&apos;,</div><div class="line">  last: &apos;holowaychuk&apos;,</div><div class="line">  email: &apos;tobi@learnboost.com&apos;,</div><div class="line">  _id: &apos;12345&apos;</div><div class="line">&#125;;</div><div class="line">var user = only(obj, &apos;name last email&apos;);</div><div class="line">输出：</div><div class="line">&#123;</div><div class="line">  name: &apos;tobi&apos;,</div><div class="line">  last: &apos;holowaychuk&apos;,</div><div class="line">  email: &apos;tobi@learnboost.com&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>koa源码使用的例子 <a href="https://github.com/koajs/koa/blob/master/lib/application.js#L92" target="_blank" rel="external">https://github.com/koajs/koa/blob/master/lib/application.js#L92</a><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">toJSON() &#123;</div><div class="line">  <span class="keyword">return</span> only(<span class="keyword">this</span>, [</div><div class="line">    <span class="string">'subdomainOffset'</span>,</div><div class="line">    <span class="string">'proxy'</span>,</div><div class="line">    <span class="string">'env'</span></div><div class="line">  ]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>依赖包源码 <a href="https://github.com/tj/node-only/blob/master/index.js" target="_blank" rel="external">https://github.com/tj/node-only/blob/master/index.js</a><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">obj, keys</span>)</span>&#123;</div><div class="line">  obj = obj || &#123;&#125;;</div><div class="line">  <span class="keyword">if</span> (<span class="string">'string'</span> == <span class="keyword">typeof</span> keys) keys = keys.split(<span class="regexp">/ +/</span>);</div><div class="line">  <span class="keyword">return</span> keys.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">ret, key</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="literal">null</span> == obj[key]) <span class="keyword">return</span> ret;</div><div class="line">    ret[key] = obj[key];</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">  &#125;, &#123;&#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>代码很简单，看源码知道，我们可以传字符串或者直接数组的形式传递需要的<code>key</code>值，默认定义一个空对象，调用<code>reduce</code>把结果循环传递下去，最终返回，如果没找指定的<code>value</code>，直接返回<code>ret</code>。额，感觉没有讲的必要，那么就。。。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本来一股脑想讲5 6个依赖包，但是看了一下，简单的讲起来感觉有点没意思，大部分依赖包内部又依赖其他包，想讲明白其实不容易，篇幅太长，所以先讲到这里吧，下一篇讲讲总体的<code>koa</code>构造流程，有一个更清楚的认识，毕竟看源码也主要是为了这一点。</p>
<p>原文地址：<a href="http://www.wclimb.site/2019/12/16/Koa源码系列之依赖包解析/">http://www.wclimb.site/2019/12/16/Koa源码系列之依赖包解析/</a></p>
]]></content>
      <categories>
        <category>Node</category>
        <category>Koa</category>
      </categories>
      <tags>
        <tag>原创</tag>
        <tag>javascript</tag>
        <tag>Koa</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL基础</title>
    <url>/2017/07/20/MySQL%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>转载自    <a href="https://github.com/jaywcjlove/mysql-tutorial" target="_blank" rel="external">mysql-tutorial</a></p>
<h3 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h3><p>MySQL 为关系型数据库(Relational Database Management System)，一个关系型数据库由一个或数个表格组成, 如图所示的一个表格：</p>
<ul>
<li><code>表头(header)</code>: 每一列的名称;</li>
<li><code>列(col)</code>: 具有相同数据类型的数据的集合;</li>
<li><code>行(row)</code>: 每一行用来描述某个人/物的具体信息;</li>
<li><code>值(value)</code>: 行的具体信息, 每个值必须与该列的数据类型相同;</li>
<li><code>键(key)</code>: 表中用来识别某个特定的人\物的方法, 键的值在当前列中具有唯一性。<h3 id="登录MySQL"><a href="#登录MySQL" class="headerlink" title="登录MySQL"></a>登录MySQL</h3></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><div class="line">mysql -h 127.0.0.1 -u 用户名 -p</div><div class="line">mysql -D 所选择的数据库名 -h 主机名 -u 用户名 -p</div><div class="line"><span class="meta">mysql&gt;</span> exit # 退出 使用 “quit;” 或 “\q;” 一样的效果</div><div class="line"><span class="meta">mysql&gt;</span> status;  # 显示当前mysql的version的各种信息</div><div class="line"><span class="meta">mysql&gt;</span> select version(); # 显示当前mysql的version信息</div><div class="line"><span class="meta">mysql&gt;</span> show global variables like 'port'; # 查看MySQL端口号</div></pre></td></tr></table></figure>
<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>对于表的操作需要先进入库<code>use 库名;</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="comment">-- 创建一个名为 samp_db 的数据库，数据库字符编码指定为 gbk</span></div><div class="line"><span class="keyword">create</span> <span class="keyword">database</span> samp_db <span class="built_in">character</span> <span class="keyword">set</span> gbk;</div><div class="line"><span class="keyword">drop</span> <span class="keyword">database</span> samp_db; <span class="comment">-- 删除 库名为samp_db的库</span></div><div class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;        <span class="comment">-- 显示数据库列表。</span></div><div class="line"><span class="keyword">use</span> samp_db;     <span class="comment">-- 选择创建的数据库samp_db</span></div><div class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;     <span class="comment">-- 显示samp_db下面所有的表名字</span></div><div class="line"><span class="keyword">describe</span> 表名;    <span class="comment">-- 显示数据表的结构</span></div><div class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名; <span class="comment">-- 清空表中记录</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="创建数据库表"><a href="#创建数据库表" class="headerlink" title="创建数据库表"></a>创建数据库表</h3><blockquote>
<p>使用 create table 语句可完成对表的创建, create table 的常见形式:<br>语法：create table 表名称(列声明);</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="comment">-- 如果数据库中存在user_accounts表，就把它从数据库中drop掉</span></div><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`user_accounts`</span>;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user_accounts`</span> (</div><div class="line">  <span class="string">`id`</span>             <span class="built_in">int</span>(<span class="number">100</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT primary <span class="keyword">key</span>,</div><div class="line">  <span class="string">`password`</span>       <span class="built_in">varchar</span>(<span class="number">32</span>)       <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'用户密码'</span>,</div><div class="line">  <span class="string">`reset_password`</span> tinyint(<span class="number">32</span>)       <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> <span class="keyword">COMMENT</span> <span class="string">'用户类型：0－不需要重置密码；1-需要重置密码'</span>,</div><div class="line">  <span class="string">`mobile`</span>         <span class="built_in">varchar</span>(<span class="number">20</span>)       <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span> <span class="keyword">COMMENT</span> <span class="string">'手机'</span>,</div><div class="line">  <span class="string">`create_at`</span>      <span class="keyword">timestamp</span>(<span class="number">6</span>)      <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span>(<span class="number">6</span>),</div><div class="line">  <span class="string">`update_at`</span>      <span class="keyword">timestamp</span>(<span class="number">6</span>)      <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span>(<span class="number">6</span>) <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span>(<span class="number">6</span>),</div><div class="line">  <span class="comment">-- 创建唯一索引，不允许重复</span></div><div class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> idx_user_mobile(<span class="string">`mobile`</span>)</div><div class="line">)</div><div class="line"><span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</div><div class="line"><span class="keyword">COMMENT</span>=<span class="string">'用户表信息'</span>;</div></pre></td></tr></table></figure>
<p>数据类型的属性解释</p>
<ul>
<li><code>NULL</code>：数据列可包含NULL值；</li>
<li><code>NOT NULL</code>：数据列不允许包含NULL值；</li>
<li><code>DEFAULT</code>：默认值；</li>
<li><code>PRIMARY</code>：KEY 主键；</li>
<li><code>AUTO_INCREMENT</code>：自动递增，适用于整数类型；</li>
<li><code>UNSIGNED</code>：是指数值类型只能为正数；</li>
<li><code>CHARACTER SET name</code>：指定一个字符集；</li>
<li><code>COMMENT</code>：对表或者字段说明；</li>
</ul>
<h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><h3 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h3><blockquote>
<p>SELECT 语句用于从表中选取数据。<br>语法：<code>SELECT 列名称 FROM 表名称</code><br>语法：<code>SELECT * FROM 表名称</code>  </p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="comment">-- 表station取个别名叫s，表station中不包含 字段id=13或者14 的，并且id不等于4的 查询出来，只显示id</span></div><div class="line"><span class="keyword">SELECT</span> s.id <span class="keyword">from</span> station s <span class="keyword">WHERE</span> <span class="keyword">id</span> <span class="keyword">in</span> (<span class="number">13</span>,<span class="number">14</span>) <span class="keyword">and</span> <span class="keyword">id</span> <span class="keyword">not</span> <span class="keyword">in</span> (<span class="number">4</span>);</div><div class="line"></div><div class="line"><span class="comment">-- 从表 Persons 选取 LastName 列的数据</span></div><div class="line"><span class="keyword">SELECT</span> LastName <span class="keyword">FROM</span> Persons</div><div class="line"></div><div class="line"><span class="comment">-- 从表 users 选取 id=3 的数据，并只拉一条数据(据说能优化性能)</span></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">3</span> <span class="keyword">limit</span> <span class="number">1</span></div><div class="line"></div><div class="line"><span class="comment">-- 结果集中会自动去重复数据</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Company <span class="keyword">FROM</span> Orders </div><div class="line"><span class="comment">-- 表 Persons 字段 Id_P 等于 Orders 字段 Id_P 的值，</span></div><div class="line"><span class="comment">-- 结果集显示 Persons表的 LastName、FirstName字段，Orders表的OrderNo字段</span></div><div class="line"><span class="keyword">SELECT</span> p.LastName, p.FirstName, o.OrderNo <span class="keyword">FROM</span> Persons p, Orders o <span class="keyword">WHERE</span> p.Id_P = o.Id_P </div><div class="line"></div><div class="line"><span class="comment">-- gbk 和 utf8 中英文混合排序最简单的办法 </span></div><div class="line"><span class="comment">-- ci是 case insensitive, 即 “大小写不敏感”</span></div><div class="line"><span class="keyword">SELECT</span> tag, <span class="keyword">COUNT</span>(tag) <span class="keyword">from</span> news <span class="keyword">GROUP</span> <span class="keyword">BY</span> tag <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">convert</span>(tag <span class="keyword">using</span> gbk) <span class="keyword">collate</span> gbk_chinese_ci;</div><div class="line"><span class="keyword">SELECT</span> tag, <span class="keyword">COUNT</span>(tag) <span class="keyword">from</span> news <span class="keyword">GROUP</span> <span class="keyword">BY</span> tag <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">convert</span>(tag <span class="keyword">using</span> utf8) <span class="keyword">collate</span> utf8_unicode_ci;</div></pre></td></tr></table></figure>
<h3 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h3><blockquote>
<p>Update 语句用于修改表中的数据。<br>语法：<code>UPDATE 表名称 SET 列名称 = 新值 WHERE 列名称 = 某值</code>  </p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="comment">-- update语句设置字段值为另一个结果取出来的字段</span></div><div class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> <span class="keyword">name</span> = (<span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> user1 <span class="keyword">where</span> user1 .id = <span class="number">1</span> )</div><div class="line"><span class="keyword">where</span> <span class="keyword">id</span> = (<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> user2 <span class="keyword">where</span> user2 .name=<span class="string">'小苏'</span>);</div><div class="line"><span class="comment">-- 更新表 orders 中 id=1 的那一行数据更新它的 title 字段</span></div><div class="line"><span class="keyword">UPDATE</span> <span class="string">`orders`</span> <span class="keyword">set</span> title=<span class="string">'这里是标题'</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="number">1</span>;</div></pre></td></tr></table></figure>
<h3 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h3><blockquote>
<p>INSERT INTO 语句用于向表格中插入新的行。<br>语法：<code>INSERT INTO 表名称 VALUES (值1, 值2,....)</code><br>语法：<code>INSERT INTO 表名称 (列1, 列2,...) VALUES (值1, 值2,....)</code>  </p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="comment">-- 向表 Persons 插入一条字段 LastName = JSLite 字段 Address = shanghai</span></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Persons (LastName, Address) <span class="keyword">VALUES</span> (<span class="string">'JSLite'</span>, <span class="string">'shanghai'</span>);</div><div class="line"><span class="comment">-- 向表 meeting 插入 字段 a=1 和字段 b=2</span></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> meeting <span class="keyword">SET</span> a=<span class="number">1</span>,b=<span class="number">2</span>;</div><div class="line"><span class="comment">-- </span></div><div class="line"><span class="comment">-- SQL实现将一个表的数据插入到另外一个表的代码</span></div><div class="line"><span class="comment">-- 如果只希望导入指定字段，可以用这种方法：</span></div><div class="line"><span class="comment">-- INSERT INTO 目标表 (字段1, 字段2, ...) SELECT 字段1, 字段2, ... FROM 来源表;</span></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders (user_account_id, title) <span class="keyword">SELECT</span> m.user_id, m.title <span class="keyword">FROM</span> meeting m <span class="keyword">where</span> m.id=<span class="number">1</span>;</div><div class="line"></div><div class="line"><span class="comment">-- 向表 charger 插入一条数据，已存在就对表 charger 更新 `type`,`update_at` 字段；</span></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`charger`</span> (<span class="string">`id`</span>,<span class="string">`type`</span>,<span class="string">`create_at`</span>,<span class="string">`update_at`</span>) <span class="keyword">VALUES</span> (<span class="number">3</span>,<span class="number">2</span>,<span class="string">'2017-05-18 11:06:17'</span>,<span class="string">'2017-05-18 11:06:17'</span>) <span class="keyword">ON</span> <span class="keyword">DUPLICATE</span> <span class="keyword">KEY</span> <span class="keyword">UPDATE</span> <span class="string">`id`</span>=<span class="keyword">VALUES</span>(<span class="string">`id`</span>), <span class="string">`type`</span>=<span class="keyword">VALUES</span>(<span class="string">`type`</span>), <span class="string">`update_at`</span>=<span class="keyword">VALUES</span>(<span class="string">`update_at`</span>);</div></pre></td></tr></table></figure>
<h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><blockquote>
<p>DELETE 语句用于删除表中的行。<br>语法：<code>DELETE FROM 表名称 WHERE 列名称 = 值</code>  </p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="comment">-- 在不删除table_name表的情况下删除所有的行，清空表。</span></div><div class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name</div><div class="line"><span class="comment">-- 或者</span></div><div class="line"><span class="keyword">DELETE</span> * <span class="keyword">FROM</span> table_name</div><div class="line"><span class="comment">-- 删除 Person表字段 LastName = 'JSLite' </span></div><div class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> Person <span class="keyword">WHERE</span> LastName = <span class="string">'JSLite'</span> </div><div class="line"><span class="comment">-- 删除 表meeting id 为2和3的两条数据</span></div><div class="line"><span class="keyword">DELETE</span> <span class="keyword">from</span> meeting <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">in</span> (<span class="number">2</span>,<span class="number">3</span>);</div></pre></td></tr></table></figure>
<h3 id="WHERE"><a href="#WHERE" class="headerlink" title="WHERE"></a>WHERE</h3><blockquote>
<p>WHERE 子句用于规定选择的标准。<br>语法：<code>SELECT 列名称 FROM 表名称 WHERE 列 运算符 值</code>  </p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="comment">-- 从表 Persons 中选出 Year 字段大于 1965 的数据</span></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> <span class="keyword">Year</span>&gt;<span class="number">1965</span></div></pre></td></tr></table></figure>
<h3 id="AND-和-OR"><a href="#AND-和-OR" class="headerlink" title="AND 和 OR"></a>AND 和 OR</h3><blockquote>
<p>AND - 如果第一个条件和第二个条件都成立；<br>OR - 如果第一个条件和第二个条件中只要有一个成立；  </p>
</blockquote>
<h3 id="AND"><a href="#AND" class="headerlink" title="AND"></a>AND</h3><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="comment">-- 删除 meeting 表字段 </span></div><div class="line"><span class="comment">-- id=2 并且 user_id=5 的数据  和</span></div><div class="line"><span class="comment">-- id=3 并且 user_id=6 的数据 </span></div><div class="line"><span class="keyword">DELETE</span> <span class="keyword">from</span> meeting <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">in</span> (<span class="number">2</span>,<span class="number">3</span>) <span class="keyword">and</span> user_id <span class="keyword">in</span> (<span class="number">5</span>,<span class="number">6</span>);</div><div class="line"></div><div class="line"><span class="comment">-- 使用 AND 来显示所有姓为 "Carter" 并且名为 "Thomas" 的人：</span></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> FirstName=<span class="string">'Thomas'</span> <span class="keyword">AND</span> LastName=<span class="string">'Carter'</span>;</div></pre></td></tr></table></figure>
<h3 id="OR"><a href="#OR" class="headerlink" title="OR"></a>OR</h3><figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="comment">-- 使用 OR 来显示所有姓为 "Carter" 或者名为 "Thomas" 的人：</span></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> firstname=<span class="string">'Thomas'</span> <span class="keyword">OR</span> lastname=<span class="string">'Carter'</span></div></pre></td></tr></table></figure>
<h3 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a>ORDER BY</h3><blockquote>
<p>语句默认按照升序对记录进行排序。<br><code>ORDER BY</code> - 语句用于根据指定的列对结果集进行排序。<br><code>DESC</code> - 按照降序对记录进行排序。<br><code>ASC</code> - 按照顺序对记录进行排序。  </p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="comment">-- Company在表Orders中为字母，则会以字母顺序显示公司名称</span></div><div class="line"><span class="keyword">SELECT</span> Company, OrderNumber <span class="keyword">FROM</span> Orders <span class="keyword">ORDER</span> <span class="keyword">BY</span> Company</div><div class="line"></div><div class="line"><span class="comment">-- 后面跟上 DESC 则为降序显示</span></div><div class="line"><span class="keyword">SELECT</span> Company, OrderNumber <span class="keyword">FROM</span> Orders <span class="keyword">ORDER</span> <span class="keyword">BY</span> Company <span class="keyword">DESC</span></div><div class="line"></div><div class="line"><span class="comment">-- Company以降序显示公司名称，并OrderNumber以顺序显示</span></div><div class="line"><span class="keyword">SELECT</span> Company, OrderNumber <span class="keyword">FROM</span> Orders <span class="keyword">ORDER</span> <span class="keyword">BY</span> Company <span class="keyword">DESC</span>, OrderNumber <span class="keyword">ASC</span></div></pre></td></tr></table></figure>
<h3 id="IN"><a href="#IN" class="headerlink" title="IN"></a>IN</h3><blockquote>
<p>IN - 操作符允许我们在 WHERE 子句中规定多个值。<br>IN - 操作符用来指定范围，范围中的每一条，都进行匹配。IN取值规律，由逗号分割，全部放置括号中。<br>语法：<code>SELECT &quot;字段名&quot;FROM &quot;表格名&quot;WHERE &quot;字段名&quot; IN (&#39;值一&#39;, &#39;值二&#39;, ...);</code></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="comment">-- 从表 Persons 选取 字段 LastName 等于 Adams、Carter</span></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> LastName <span class="keyword">IN</span> (<span class="string">'Adams'</span>,<span class="string">'Carter'</span>)</div></pre></td></tr></table></figure>
<h3 id="NOT"><a href="#NOT" class="headerlink" title="NOT"></a>NOT</h3><blockquote>
<p>NOT - 操作符总是与其他操作符一起使用，用在要过滤的前面。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> vend_id, prod_name <span class="keyword">FROM</span> Products <span class="keyword">WHERE</span> <span class="keyword">NOT</span> vend_id = <span class="string">'DLL01'</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> prod_name;</div></pre></td></tr></table></figure>
<h3 id="UNION"><a href="#UNION" class="headerlink" title="UNION"></a>UNION</h3><blockquote>
<p>UNION - 操作符用于合并两个或多个 SELECT 语句的结果集。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="comment">-- 列出所有在中国表（Employees_China）和美国（Employees_USA）的不同的雇员名</span></div><div class="line"><span class="keyword">SELECT</span> E_Name <span class="keyword">FROM</span> Employees_China <span class="keyword">UNION</span> <span class="keyword">SELECT</span> E_Name <span class="keyword">FROM</span> Employees_USA</div><div class="line"></div><div class="line"><span class="comment">-- 列出 meeting 表中的 pic_url，</span></div><div class="line"><span class="comment">-- station 表中的 number_station 别名设置成 pic_url 避免字段不一样报错</span></div><div class="line"><span class="comment">-- 按更新时间排序</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>,pic_url <span class="keyword">FROM</span> meeting <span class="keyword">UNION</span> ALL <span class="keyword">SELECT</span> <span class="keyword">id</span>,number_station <span class="keyword">AS</span> pic_url <span class="keyword">FROM</span> station  <span class="keyword">ORDER</span> <span class="keyword">BY</span> update_at;</div><div class="line"><span class="comment">-- 通过 UNION 语法同时查询了 products 表 和 comments 表的总记录数，并且按照 count 排序</span></div><div class="line"><span class="keyword">SELECT</span> <span class="string">'product'</span> <span class="keyword">AS</span> <span class="keyword">type</span>, <span class="keyword">count</span>(*) <span class="keyword">as</span> <span class="keyword">count</span> <span class="keyword">FROM</span> <span class="string">`products`</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="string">'comment'</span> <span class="keyword">as</span> <span class="keyword">type</span>, <span class="keyword">count</span>(*) <span class="keyword">as</span> <span class="keyword">count</span> <span class="keyword">FROM</span> <span class="string">`comments`</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">count</span>;</div></pre></td></tr></table></figure>
<h3 id="AS"><a href="#AS" class="headerlink" title="AS"></a>AS</h3><blockquote>
<p>as - 可理解为：用作、当成，作为；别名<br>一般是重命名列名或者表名。<br>语法：<code>select column_1 as 列1,column_2 as 列2 from table as 表</code></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Employee <span class="keyword">AS</span> emp</div><div class="line"><span class="comment">-- 这句意思是查找所有Employee 表里面的数据，并把Employee表格命名为 emp。</span></div><div class="line"><span class="comment">-- 当你命名一个表之后，你可以在下面用 emp 代替 Employee.</span></div><div class="line"><span class="comment">-- 例如 SELECT * FROM emp.</span></div><div class="line"></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(OrderPrice) <span class="keyword">AS</span> LargestOrderPrice <span class="keyword">FROM</span> Orders</div><div class="line"><span class="comment">-- 列出表 Orders 字段 OrderPrice 列最大值，</span></div><div class="line"><span class="comment">-- 结果集列不显示 OrderPrice 显示 LargestOrderPrice</span></div><div class="line"></div><div class="line"><span class="comment">-- 显示表 users_profile 中的 name 列</span></div><div class="line"><span class="keyword">SELECT</span> t.name <span class="keyword">from</span> (<span class="keyword">SELECT</span> * <span class="keyword">from</span> users_profile a) <span class="keyword">AS</span> t;</div><div class="line"></div><div class="line"><span class="comment">-- 表 user_accounts 命名别名 ua，表 users_profile 命名别名 up</span></div><div class="line"><span class="comment">-- 满足条件 表 user_accounts 字段 id 等于 表 users_profile 字段 user_id</span></div><div class="line"><span class="comment">-- 结果集只显示mobile、name两列</span></div><div class="line"><span class="keyword">SELECT</span> ua.mobile,up.name <span class="keyword">FROM</span> user_accounts <span class="keyword">as</span> ua <span class="keyword">INNER</span> <span class="keyword">JOIN</span> users_profile <span class="keyword">as</span> up <span class="keyword">ON</span> ua.id = up.user_id;</div></pre></td></tr></table></figure>
<h3 id="JOIN"><a href="#JOIN" class="headerlink" title="JOIN"></a>JOIN</h3><blockquote>
<p>用于根据两个或多个表中的列之间的关系，从这些表中查询数据。  </p>
</blockquote>
<ul>
<li><code>JOIN</code>: 如果表中有至少一个匹配，则返回行</li>
<li><code>INNER JOIN</code>:在表中存在至少一个匹配时，INNER JOIN 关键字返回行。</li>
<li><code>LEFT JOIN</code>: 即使右表中没有匹配，也从左表返回所有的行</li>
<li><code>RIGHT JOIN</code>: 即使左表中没有匹配，也从右表返回所有的行</li>
<li><code>FULL JOIN</code>: 只要其中一个表中存在匹配，就返回行</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> Persons.LastName, Persons.FirstName, Orders.OrderNo</div><div class="line"><span class="keyword">FROM</span> Persons</div><div class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> Orders</div><div class="line"><span class="keyword">ON</span> Persons.Id_P = Orders.Id_P</div><div class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> Persons.LastName;</div></pre></td></tr></table></figure>
<h3 id="SQL-函数"><a href="#SQL-函数" class="headerlink" title="SQL 函数"></a>SQL 函数</h3><h3 id="COUNT"><a href="#COUNT" class="headerlink" title="COUNT"></a>COUNT</h3><blockquote>
<p>COUNT 让我们能够数出在表格中有多少笔资料被选出来。<br>语法：<code>SELECT COUNT(&quot;字段名&quot;) FROM &quot;表格名&quot;;</code></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="comment">-- 表 Store_Information 有几笔 store_name 栏不是空白的资料。</span></div><div class="line"><span class="comment">-- "IS NOT NULL" 是 "这个栏位不是空白" 的意思。</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span> (Store_Name) <span class="keyword">FROM</span> Store_Information <span class="keyword">WHERE</span> Store_Name <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>; </div><div class="line"><span class="comment">-- 获取 Persons 表的总数</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="number">1</span>) <span class="keyword">AS</span> totals <span class="keyword">FROM</span> Persons;</div><div class="line"><span class="comment">-- 获取表 station 字段 user_id 相同的总数</span></div><div class="line"><span class="keyword">select</span> user_id, <span class="keyword">count</span>(*) <span class="keyword">as</span> totals <span class="keyword">from</span> station <span class="keyword">group</span> <span class="keyword">by</span> user_id;</div></pre></td></tr></table></figure>
<h3 id="MAX"><a href="#MAX" class="headerlink" title="MAX"></a>MAX</h3><blockquote>
<p>MAX 函数返回一列中的最大值。NULL 值不包括在计算中。<br>语法：<code>SELECT MAX(&quot;字段名&quot;) FROM &quot;表格名&quot;</code>  </p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="comment">-- 列出表 Orders 字段 OrderPrice 列最大值，</span></div><div class="line"><span class="comment">-- 结果集列不显示 OrderPrice 显示 LargestOrderPrice</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(OrderPrice) <span class="keyword">AS</span> LargestOrderPrice <span class="keyword">FROM</span> Orders</div></pre></td></tr></table></figure>
<h3 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h3><blockquote>
<p>语法：<br>create trigger &lt;触发器名称&gt;<br>{ before | after}             # 之前或者之后出发<br>insert | update | delete      # 指明了激活触发程序的语句的类型<br>on &lt;表名&gt;                     # 操作哪张表<br>for each row                  # 触发器的执行间隔，for each row 通知触发器每隔一行执行一次动作，而不是对整个表执行一次。<br>&lt;触发器SQL语句&gt;</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><div class="line">delimiter $</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> set_userdate <span class="keyword">BEFORE</span> <span class="keyword">INSERT</span> </div><div class="line"><span class="keyword">on</span> <span class="string">`message`</span></div><div class="line"><span class="keyword">for</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span></div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">  <span class="keyword">set</span> @statu = new.status; <span class="comment">-- 声明复制变量 statu</span></div><div class="line">  if @statu = 0 then       <span class="comment">-- 判断 statu 是否等于 0</span></div><div class="line">    <span class="keyword">UPDATE</span> <span class="string">`user_accounts`</span> <span class="keyword">SET</span> <span class="keyword">status</span>=<span class="number">1</span> <span class="keyword">WHERE</span> openid=NEW.openid;</div><div class="line">  <span class="keyword">end</span> <span class="keyword">if</span>;</div><div class="line"><span class="keyword">END</span></div><div class="line">$</div><div class="line">DELIMITER ; <span class="comment">-- 恢复结束符号</span></div></pre></td></tr></table></figure>
<p>OLD和NEW不区分大小写</p>
<ul>
<li>NEW 用NEW.col_name，没有旧行。在DELETE触发程序中，仅能使用OLD.col_name，没有新行。</li>
<li>OLD 用OLD.col_name来引用更新前的某一行的列</li>
</ul>
<h3 id="添加索引"><a href="#添加索引" class="headerlink" title="添加索引"></a>添加索引</h3><h3 id="普通索引-INDEX"><a href="#普通索引-INDEX" class="headerlink" title="普通索引(INDEX)"></a>普通索引(INDEX)</h3><blockquote>
<p>语法：ALTER TABLE <code>表名字</code> ADD INDEX 索引名字 ( <code>字段名字</code> )</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="comment">-- –直接创建索引</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> index_user <span class="keyword">ON</span> <span class="keyword">user</span>(title)</div><div class="line"><span class="comment">-- –修改表结构的方式添加索引</span></div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span> <span class="keyword">INDEX</span> index_name <span class="keyword">ON</span> (<span class="keyword">column</span>(<span class="keyword">length</span>))</div><div class="line"><span class="comment">-- 给 user 表中的 name字段 添加普通索引(INDEX)</span></div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`table`</span> <span class="keyword">ADD</span> <span class="keyword">INDEX</span> index_name (<span class="keyword">name</span>)</div><div class="line"><span class="comment">-- –创建表的时候同时创建索引</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`table`</span> (</div><div class="line">    <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT ,</div><div class="line">    <span class="string">`title`</span> <span class="built_in">char</span>(<span class="number">255</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> ,</div><div class="line">    <span class="string">`content`</span> <span class="built_in">text</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="literal">NULL</span> ,</div><div class="line">    <span class="string">`time`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> ,</div><div class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</div><div class="line">    <span class="keyword">INDEX</span> index_name (title(<span class="keyword">length</span>))</div><div class="line">)</div><div class="line"><span class="comment">-- –删除索引</span></div><div class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span> index_name <span class="keyword">ON</span> <span class="keyword">table</span></div></pre></td></tr></table></figure>
<h3 id="主键索引-PRIMARY-key"><a href="#主键索引-PRIMARY-key" class="headerlink" title="主键索引(PRIMARY key)"></a>主键索引(PRIMARY key)</h3><blockquote>
<p>语法：ALTER TABLE <code>表名字</code> ADD PRIMARY KEY ( <code>字段名字</code> )</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="comment">-- 给 user 表中的 id字段 添加主键索引(PRIMARY key)</span></div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> <span class="keyword">ADD</span> PRIMARY <span class="keyword">key</span> (<span class="keyword">id</span>);</div></pre></td></tr></table></figure>
<h3 id="唯一索引-UNIQUE"><a href="#唯一索引-UNIQUE" class="headerlink" title="唯一索引(UNIQUE)"></a>唯一索引(UNIQUE)</h3><blockquote>
<p>语法：ALTER TABLE <code>表名字</code> ADD UNIQUE (<code>字段名字</code>)</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="comment">-- 给 user 表中的 creattime 字段添加唯一索引(UNIQUE)</span></div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> (creattime);</div></pre></td></tr></table></figure>
<h3 id="全文索引-FULLTEXT"><a href="#全文索引-FULLTEXT" class="headerlink" title="全文索引(FULLTEXT)"></a>全文索引(FULLTEXT)</h3><blockquote>
<p>语法：ALTER TABLE <code>表名字</code> ADD FULLTEXT (<code>字段名字</code>)</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="comment">-- 给 user 表中的 description 字段添加全文索引(FULLTEXT)</span></div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> <span class="keyword">ADD</span> FULLTEXT (description);</div></pre></td></tr></table></figure>
<h3 id="添加多列索引"><a href="#添加多列索引" class="headerlink" title="添加多列索引"></a>添加多列索引</h3><blockquote>
<p>语法：<br>ALTER TABLE <code>table_name</code> ADD INDEX index_name ( <code>column1</code>, <code>column2</code>, <code>column3</code>)</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="comment">-- 给 user 表中的 name、city、age 字段添加名字为name_city_age的普通索引(INDEX)</span></div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">ADD</span> <span class="keyword">INDEX</span> name_city_age (<span class="keyword">name</span>(<span class="number">10</span>),city,age);</div></pre></td></tr></table></figure>
<h3 id="建立索引的时机"><a href="#建立索引的时机" class="headerlink" title="建立索引的时机"></a>建立索引的时机</h3><p>在<code>WHERE</code>和<code>JOIN</code>中出现的列需要建立索引，但也不完全如此：</p>
<ul>
<li>MySQL只对<code>&lt;</code>，<code>&lt;=</code>，<code>=</code>，<code>&gt;</code>，<code>&gt;=</code>，<code>BETWEEN</code>，<code>IN</code>使用索引</li>
<li>某些时候的<code>LIKE</code>也会使用索引。</li>
<li>在<code>LIKE</code>以通配符%和_开头作查询时，MySQL不会使用索引。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="comment">-- 此时就需要对city和age建立索引，</span></div><div class="line"><span class="comment">-- 由于mytable表的userame也出现在了JOIN子句中，也有对它建立索引的必要。</span></div><div class="line"><span class="keyword">SELECT</span> t.Name  </div><div class="line"><span class="keyword">FROM</span> mytable t <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> mytable m <span class="keyword">ON</span> t.Name=m.username </div><div class="line"><span class="keyword">WHERE</span> m.age=<span class="number">20</span> <span class="keyword">AND</span> m.city=<span class="string">'上海'</span>;</div><div class="line"></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> mytable <span class="keyword">WHERE</span> username <span class="keyword">like</span><span class="string">'admin%'</span>; <span class="comment">-- 而下句就不会使用：</span></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> mytable WHEREt <span class="keyword">Name</span> <span class="keyword">like</span><span class="string">'%admin'</span>; <span class="comment">-- 因此，在使用LIKE时应注意以上的区别。</span></div></pre></td></tr></table></figure>
<p>索引的注意事项</p>
<ul>
<li>索引不会包含有NULL值的列</li>
<li>使用短索引</li>
<li>不要在列上进行运算 索引会失效</li>
</ul>
<h3 id="创建后表的修改"><a href="#创建后表的修改" class="headerlink" title="创建后表的修改"></a>创建后表的修改</h3><h3 id="添加列"><a href="#添加列" class="headerlink" title="添加列"></a>添加列</h3><blockquote>
<p>语法：<code>alter table 表名 add 列名 列数据类型 [after 插入位置];</code></p>
</blockquote>
<p>示例:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="comment">-- 在表students的最后追加列 address: </span></div><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students <span class="keyword">add</span> address <span class="built_in">char</span>(<span class="number">60</span>);</div><div class="line"><span class="comment">-- 在名为 age 的列后插入列 birthday: </span></div><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students <span class="keyword">add</span> birthday <span class="built_in">date</span> <span class="keyword">after</span> age;</div><div class="line"><span class="comment">-- 在名为 number_people 的列后插入列 weeks: </span></div><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students <span class="keyword">add</span> <span class="keyword">column</span> <span class="string">`weeks`</span> <span class="built_in">varchar</span>(<span class="number">5</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">default</span> <span class="string">""</span> <span class="keyword">after</span> <span class="string">`number_people`</span>;</div></pre></td></tr></table></figure>
<h3 id="修改列"><a href="#修改列" class="headerlink" title="修改列"></a>修改列</h3><blockquote>
<p>语法：<code>alter table 表名 change 列名称 列新名称 新数据类型;</code></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="comment">-- 将表 tel 列改名为 telphone: </span></div><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students <span class="keyword">change</span> tel telphone <span class="built_in">char</span>(<span class="number">13</span>) <span class="keyword">default</span> <span class="string">"-"</span>;</div><div class="line"><span class="comment">-- 将 name 列的数据类型改为 char(16): </span></div><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students <span class="keyword">change</span> <span class="keyword">name</span> <span class="keyword">name</span> <span class="built_in">char</span>(<span class="number">16</span>) <span class="keyword">not</span> <span class="literal">null</span>;</div><div class="line"><span class="comment">-- 修改 COMMENT 前面必须得有类型属性</span></div><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students <span class="keyword">change</span> <span class="keyword">name</span> <span class="keyword">name</span> <span class="built_in">char</span>(<span class="number">16</span>) <span class="keyword">COMMENT</span> <span class="string">'这里是名字'</span>;</div><div class="line"><span class="comment">-- 修改列属性的时候 建议使用modify,不需要重建表</span></div><div class="line"><span class="comment">-- change用于修改列名字，这个需要重建表</span></div><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> meeting <span class="keyword">modify</span> <span class="string">`weeks`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">""</span> <span class="keyword">COMMENT</span> <span class="string">"开放日期 周一到周日：0~6，间隔用英文逗号隔开"</span>;</div></pre></td></tr></table></figure>
<h3 id="删除列"><a href="#删除列" class="headerlink" title="删除列"></a>删除列</h3><blockquote>
<p>语法：<code>alter table 表名 drop 列名称;</code></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="comment">-- 删除表students中的 birthday 列: </span></div><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students <span class="keyword">drop</span> birthday;</div></pre></td></tr></table></figure>
<h3 id="重命名表"><a href="#重命名表" class="headerlink" title="重命名表"></a>重命名表</h3><blockquote>
<p>语法：<code>alter table 表名 rename 新表名;</code></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="comment">-- 重命名 students 表为 workmates: </span></div><div class="line"><span class="keyword">alter</span> <span class="keyword">table</span> students <span class="keyword">rename</span> workmates;</div></pre></td></tr></table></figure>
<h3 id="清空表数据"><a href="#清空表数据" class="headerlink" title="清空表数据"></a>清空表数据</h3><blockquote>
<p>方法一：<code>delete from 表名;</code><br>方法二：<code>truncate from &quot;表名&quot;;</code></p>
</blockquote>
<ul>
<li><code>DELETE:</code>1. DML语言;2. 可以回退;3. 可以有条件的删除;</li>
<li><code>TRUNCATE:</code>1. DDL语言;2. 无法回退;3. 默认所有的表内容都删除;4. 删除速度比delete快。</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="comment">-- 清空表为 workmates 里面的数据，不删除表。 </span></div><div class="line"><span class="keyword">delete</span> <span class="keyword">from</span> workmates;</div><div class="line"><span class="comment">-- 删除workmates表中的所有数据，且无法恢复</span></div><div class="line"><span class="keyword">truncate</span> <span class="keyword">from</span> workmates;</div></pre></td></tr></table></figure>
<h3 id="删除整张表"><a href="#删除整张表" class="headerlink" title="删除整张表"></a>删除整张表</h3><blockquote>
<p>语法：<code>drop table 表名;</code></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="comment">-- 删除 workmates 表: </span></div><div class="line"><span class="keyword">drop</span> <span class="keyword">table</span> workmates;</div></pre></td></tr></table></figure>
<h3 id="删除整个数据库"><a href="#删除整个数据库" class="headerlink" title="删除整个数据库"></a>删除整个数据库</h3><blockquote>
<p>语法：<code>drop database 数据库名;</code></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="comment">-- 删除 samp_db 数据库: </span></div><div class="line"><span class="keyword">drop</span> <span class="keyword">database</span> samp_db;</div></pre></td></tr></table></figure>
<h3 id="个人小程序"><a href="#个人小程序" class="headerlink" title="个人小程序"></a>个人小程序</h3><p><img src="http://www.wclimb.site/cdn/xcx.jpeg" alt="img"></p>
]]></content>
      <tags>
        <tag>数据库</tag>
        <tag>mysql</tag>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue之vuex源码分析</title>
    <url>/2019/10/14/Vue%E4%B9%8Bvuex%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="vuex使用"><a href="#vuex使用" class="headerlink" title="vuex使用"></a>vuex使用</h2><p>当前vuex版本：3.1.0</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</div><div class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span>;</div><div class="line"></div><div class="line">Vue.use(Vuex);</div><div class="line"><span class="keyword">const</span> state = &#123;</div><div class="line">  <span class="attr">test</span>: <span class="number">1</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> actions = &#123;</div><div class="line">  changeTest(&#123; commit &#125;, payload)&#123;</div><div class="line">    commit(<span class="string">'setTestValue'</span>, payload)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> mutations = &#123;</div><div class="line">  setTestValue(state, payload)&#123;</div><div class="line">    state.test = payload</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</div><div class="line">  state,</div><div class="line">  actions,</div><div class="line">  mutations,</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</div><div class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span>;</div><div class="line"></div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">  <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">  store,</div><div class="line">  <span class="attr">template</span>: <span class="string">'&lt;App/&gt;'</span>,</div><div class="line">  <span class="attr">components</span>: &#123; App &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>首先我们先注册<code>vuex</code>，然后设置一些<code>state/mutation/actions</code> 实例化出来，最后交给 <code>Vue</code> 处理<br><a id="more"></a></p>
<p>对 <code>API</code> 不熟悉的同学可以移步 <a href="https://vuex.vuejs.org/zh/" target="_blank" rel="external">vuex</a></p>
<h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><p>用法我们知道了，那么问题来了，<code>Vuex</code>是怎样把store注入到Vue实例中去的呢？</p>
<p>我们知道使用插件一般都需要<code>vue.use()</code>，传入的参数内部必须要提供一个<code>install</code>的方法，上面我们使用<code>vue.use(vuex)</code>去安装，那么vuex内部肯定是暴露了应该<code>install</code>的方法得</p>
<p>vuex install的实现</p>
<p>vuex/index.js  <a href="https://github.com/vuejs/vuex/blob/665455f8da/src/index.js" target="_blank" rel="external">源码地址</a><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Store, install &#125; <span class="keyword">from</span> <span class="string">'./store'</span></div><div class="line"><span class="keyword">import</span> &#123; mapState, mapMutations, mapGetters, mapActions, createNamespacedHelpers &#125; <span class="keyword">from</span> <span class="string">'./helpers'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  Store,</div><div class="line">  install,</div><div class="line">  <span class="attr">version</span>: <span class="string">'__VERSION__'</span>,</div><div class="line">  mapState,</div><div class="line">  mapMutations,</div><div class="line">  mapGetters,</div><div class="line">  mapActions,</div><div class="line">  createNamespacedHelpers</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>install方法<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">install</span> (<span class="params">_Vue</span>) </span>&#123;</div><div class="line">  <span class="comment">// 首先判断vuex是否已经注册过了</span></div><div class="line">  <span class="keyword">if</span> (Vue &amp;&amp; _Vue === Vue) &#123;</div><div class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</div><div class="line">      <span class="built_in">console</span>.error(</div><div class="line">        <span class="string">'[vuex] already installed. Vue.use(Vuex) should be called only once.'</span></div><div class="line">      )</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span></div><div class="line">  &#125;</div><div class="line">  Vue = _Vue</div><div class="line">  <span class="comment">// 调用全局混入方法</span></div><div class="line">  applyMixin(Vue)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先判断<code>vuex</code>是否被重复安装，安装完成之后调用<code>applyMixin</code>方法，内部方法见下文</p>
<p><code>applyMixin</code> <a href="https://github.com/vuejs/vuex/blob/665455f8da/src/mixin.js" target="_blank" rel="external">源码地址</a><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">Vue</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> version = <span class="built_in">Number</span>(Vue.version.split(<span class="string">'.'</span>)[<span class="number">0</span>])</div><div class="line">  <span class="comment">// 如果vue版本大于2 则调用全局混淆方法，混淆进beforeCreate钩子</span></div><div class="line">  <span class="keyword">if</span> (version &gt;= <span class="number">2</span>) &#123;</div><div class="line">    Vue.mixin(&#123; <span class="attr">beforeCreate</span>: vuexInit &#125;)</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// 如果vue小于2版本，把vuexInit放入Vue的_init方法中执行</span></div><div class="line">    <span class="keyword">const</span> _init = Vue.prototype._init</div><div class="line">    Vue.prototype._init = <span class="function"><span class="keyword">function</span> (<span class="params">options = &#123;&#125;</span>) </span>&#123;</div><div class="line">      options.init = options.init</div><div class="line">        ? [vuexInit].concat(options.init)</div><div class="line">        : vuexInit</div><div class="line">      _init.call(<span class="keyword">this</span>, options)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// Vuex的init钩子，会存入每一个Vue实例等钩子列表</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">vuexInit</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> options = <span class="keyword">this</span>.$options</div><div class="line">    <span class="comment">// store injection</span></div><div class="line">    <span class="keyword">if</span> (options.store) &#123;</div><div class="line">      <span class="keyword">this</span>.$store = <span class="keyword">typeof</span> options.store === <span class="string">'function'</span></div><div class="line">        ? options.store()</div><div class="line">        : options.store</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options.parent &amp;&amp; options.parent.$store) &#123;</div><div class="line">      <span class="keyword">this</span>.$store = options.parent.$store</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先判断当前<code>Vue</code>的版本选择执行，大于<code>2.0</code>的版本直接把<code>vuexInit</code>混淆进<code>beforeCreate</code>，否则把<code>vuexInit</code>放入<code>Vue</code>的<code>_init</code>方法中执行。<br><code>vuexInit</code>会先从<code>options</code>中取<code>store</code>，如果当前组件为跟组件，那么<code>options.store</code>肯定会存在，把<code>store</code>挂载在<code>vue</code>的<code>$store</code>内，如果是非根组件，则获取<code>options</code>的<code>parent</code>，也就是父组件的<code>$store</code>，这样就实现了，所有的组件都获取到同一份地址的<code>Store</code>，那么现在我们来看看<code>Store</code>的实现</p>
<h2 id="Store构造函数"><a href="#Store构造函数" class="headerlink" title="Store构造函数"></a>Store构造函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span> (options = &#123;&#125;) &#123;</div><div class="line">    <span class="comment">// 首先先安装Vue</span></div><div class="line">    <span class="keyword">if</span> (!Vue &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span> &amp;&amp; <span class="built_in">window</span>.Vue) &#123;</div><div class="line">      install(<span class="built_in">window</span>.Vue)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</div><div class="line">      <span class="comment">// 判断vue是否安装</span></div><div class="line">      assert(Vue, <span class="string">`must call Vue.use(Vuex) before creating a store instance.`</span>)</div><div class="line">      <span class="comment">// promise是否支持</span></div><div class="line">      assert(<span class="keyword">typeof</span> <span class="built_in">Promise</span> !== <span class="string">'undefined'</span>, <span class="string">`vuex requires a Promise polyfill in this browser.`</span>)</div><div class="line">      <span class="comment">// 判断this是否是Store的实例</span></div><div class="line">      assert(<span class="keyword">this</span> <span class="keyword">instanceof</span> Store, <span class="string">`store must be called with the new operator.`</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 一般options传入的是</span></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * &#123;</div><div class="line">     *  state,</div><div class="line">     *  mutations,</div><div class="line">     *  actions,</div><div class="line">     *  modules</div><div class="line">     * &#125;</div><div class="line">     **/</div><div class="line">    <span class="keyword">const</span> &#123;</div><div class="line">      <span class="comment">// store 上的插件方法</span></div><div class="line">      plugins = [],</div><div class="line">      <span class="comment">// 标记是否是严格模式，如果是严格模式，不允许直接修改state，一定要通过mutations</span></div><div class="line">      strict = <span class="literal">false</span></div><div class="line">    &#125; = options</div><div class="line"></div><div class="line">    <span class="comment">// store internal state</span></div><div class="line">    <span class="comment">// 用来判断是否是mutations来修改的state</span></div><div class="line">    <span class="keyword">this</span>._committing = <span class="literal">false</span></div><div class="line">    <span class="comment">// 存放action</span></div><div class="line">    <span class="keyword">this</span>._actions = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</div><div class="line">    <span class="keyword">this</span>._actionSubscribers = []</div><div class="line">    <span class="comment">// 存放mutations</span></div><div class="line">    <span class="keyword">this</span>._mutations = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</div><div class="line">    <span class="comment">// 存放getter</span></div><div class="line">    <span class="keyword">this</span>._wrappedGetters = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</div><div class="line">    <span class="comment">// 存放module</span></div><div class="line">    <span class="keyword">this</span>._modules = <span class="keyword">new</span> ModuleCollection(options)</div><div class="line">    <span class="comment">// 跟进命名空间存放module</span></div><div class="line">    <span class="keyword">this</span>._modulesNamespaceMap = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</div><div class="line">    <span class="comment">// 存放订阅者</span></div><div class="line">    <span class="keyword">this</span>._subscribers = []</div><div class="line">    <span class="comment">// 实现Vue的watch</span></div><div class="line">    <span class="keyword">this</span>._watcherVM = <span class="keyword">new</span> Vue()</div><div class="line"></div><div class="line">    <span class="comment">// bind commit and dispatch to self</span></div><div class="line">    <span class="keyword">const</span> store = <span class="keyword">this</span></div><div class="line">    <span class="keyword">const</span> &#123; dispatch, commit &#125; = <span class="keyword">this</span></div><div class="line">    <span class="comment">// 把dispatch的this绑定到Store</span></div><div class="line">    <span class="keyword">this</span>.dispatch = <span class="function"><span class="keyword">function</span> <span class="title">boundDispatch</span> (<span class="params">type, payload</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> dispatch.call(store, type, payload)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 把commit的this绑定到Store</span></div><div class="line">    <span class="keyword">this</span>.commit = <span class="function"><span class="keyword">function</span> <span class="title">boundCommit</span> (<span class="params">type, payload, options</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> commit.call(store, type, payload, options)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// strict mode</span></div><div class="line">    <span class="comment">// 是否为严格模式</span></div><div class="line">    <span class="keyword">this</span>.strict = strict</div><div class="line"></div><div class="line">    <span class="comment">// 获取根模块的state</span></div><div class="line">    <span class="keyword">const</span> state = <span class="keyword">this</span>._modules.root.state</div><div class="line"></div><div class="line">    <span class="comment">// init root module.</span></div><div class="line">    <span class="comment">// this also recursively registers all sub-modules</span></div><div class="line">    <span class="comment">// and collects all module getters inside this._wrappedGetters</span></div><div class="line">    <span class="comment">// 递归地注册传入的module</span></div><div class="line">    installModule(<span class="keyword">this</span>, state, [], <span class="keyword">this</span>._modules.root)</div><div class="line"></div><div class="line">    <span class="comment">// initialize the store vm, which is responsible for the reactivity</span></div><div class="line">    <span class="comment">// (also registers _wrappedGetters as computed properties)</span></div><div class="line">    <span class="comment">// 通过vm重新设置store，等会看它的内部实现，原理是借助Vue的响应式来注册state和getter</span></div><div class="line">    resetStoreVM(<span class="keyword">this</span>, state)</div><div class="line"></div><div class="line">    <span class="comment">// apply plugins</span></div><div class="line">    <span class="comment">// 调用插件</span></div><div class="line">    plugins.forEach(<span class="function"><span class="params">plugin</span> =&gt;</span> plugin(<span class="keyword">this</span>))</div><div class="line"></div><div class="line">    <span class="comment">// devtool插件调用</span></div><div class="line">    <span class="keyword">const</span> useDevtools = options.devtools !== <span class="literal">undefined</span> ? options.devtools : Vue.config.devtools</div><div class="line">    <span class="keyword">if</span> (useDevtools) &#123;</div><div class="line">      devtoolPlugin(<span class="keyword">this</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="dispatch（action）"><a href="#dispatch（action）" class="headerlink" title="dispatch（action）"></a>dispatch（action）</h2><p>我们知道如果我们需要改变<code>state</code>，需要先调用<code>this.$store.dispatch()</code>，来触发<code>action</code>，然后再调用<code>commit</code>来触发<code>mutation</code>，最终更改<code>state</code>，那么<code>dispatch</code>是怎么实现的呢？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">dispatch (_type, _payload) &#123;</div><div class="line">  <span class="comment">// check object-style dispatch</span></div><div class="line">  <span class="comment">// 校验参数</span></div><div class="line">  <span class="keyword">const</span> &#123;</div><div class="line">    type,</div><div class="line">    payload</div><div class="line">  &#125; = unifyObjectStyle(_type, _payload)</div><div class="line"></div><div class="line">  <span class="keyword">const</span> action = &#123; type, payload &#125;</div><div class="line">  <span class="comment">// 获取当前需要触发action的函数集合，注意，这里entry是一个数组集合，一般来说是只会存在一个方法，type: function，至于为什么后面讲到</span></div><div class="line">  <span class="keyword">const</span> entry = <span class="keyword">this</span>._actions[type]</div><div class="line">  <span class="keyword">if</span> (!entry) &#123;</div><div class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</div><div class="line">      <span class="built_in">console</span>.error(<span class="string">`[vuex] unknown action type: <span class="subst">$&#123;type&#125;</span>`</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    <span class="comment">// action 执行前，先调用订阅 action 变化的回调函数</span></div><div class="line">    <span class="keyword">this</span>._actionSubscribers</div><div class="line">      .filter(<span class="function"><span class="params">sub</span> =&gt;</span> sub.before)</div><div class="line">      .forEach(<span class="function"><span class="params">sub</span> =&gt;</span> sub.before(action, <span class="keyword">this</span>.state))</div><div class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</div><div class="line">      <span class="built_in">console</span>.warn(<span class="string">`[vuex] error in before action subscribers: `</span>)</div><div class="line">      <span class="built_in">console</span>.error(e)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 如果集合大于1则调用Promise.all，全部resolve之后得到result，也是个promise对象，最后直接执行.then()方法返回执行的结果res</span></div><div class="line">  <span class="keyword">const</span> result = entry.length &gt; <span class="number">1</span></div><div class="line">    ? <span class="built_in">Promise</span>.all(entry.map(<span class="function"><span class="params">handler</span> =&gt;</span> handler(payload)))</div><div class="line">    : entry[<span class="number">0</span>](payload)</div><div class="line"></div><div class="line">  <span class="keyword">return</span> result.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      <span class="comment">// action 执行后，先调用订阅 action 变化的回调函数</span></div><div class="line">      <span class="keyword">this</span>._actionSubscribers</div><div class="line">        .filter(<span class="function"><span class="params">sub</span> =&gt;</span> sub.after)</div><div class="line">        .forEach(<span class="function"><span class="params">sub</span> =&gt;</span> sub.after(action, <span class="keyword">this</span>.state))</div><div class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</div><div class="line">        <span class="built_in">console</span>.warn(<span class="string">`[vuex] error in after action subscribers: `</span>)</div><div class="line">        <span class="built_in">console</span>.error(e)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码可以看到我们使用<code>Promise.all</code>来执行<code>entry</code>，执行每个<code>handle</code>函数，全部执行完成后再<code>.then()</code>返回结果。那么这个<code>handle</code>是什么呢？</p>
<h3 id="installModule"><a href="#installModule" class="headerlink" title="installModule"></a>installModule</h3><p><code>installModule</code>内安装<code>action</code><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">installModule</span> (<span class="params">store, rootState, path, module, hot</span>) </span>&#123;</div><div class="line"></div><div class="line">  ...</div><div class="line"></div><div class="line">  module.forEachAction(<span class="function">(<span class="params">action, key</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> type = action.root ? key : namespace + key</div><div class="line">    <span class="keyword">const</span> handler = action.handler || action</div><div class="line">    registerAction(store, type, handler, local)</div><div class="line">  &#125;)</div><div class="line"></div><div class="line">  ...</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="registerAction"><a href="#registerAction" class="headerlink" title="registerAction"></a>registerAction</h3><p>在<code>Store</code>构造函数内执行安装模块，内部会循环注册传入的<code>action</code>，调用<code>registerAction</code>方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">registerAction</span> (<span class="params">store, type, handler, local</span>) </span>&#123;</div><div class="line">  <span class="comment">// 首先获取当前需要传入的action名字，如果没有则赋值为一个空对象，如果找到赋值给entry</span></div><div class="line">  <span class="keyword">const</span> entry = store._actions[type] || (store._actions[type] = [])</div><div class="line">  <span class="comment">// 往entry增加一个方法，也就是上面dispatch执行的handle</span></div><div class="line">  <span class="comment">// handle的this指向store，传入三个参数，&#123;dispatch,commit...&#125; (触发mutation需要使用，大部分只需要用到commit)，payload(外部传递进来的参数) cb（回调函数）</span></div><div class="line">  entry.push(<span class="function"><span class="keyword">function</span> <span class="title">wrappedActionHandler</span> (<span class="params">payload, cb</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> res = handler.call(store, &#123;</div><div class="line">      <span class="attr">dispatch</span>: local.dispatch,</div><div class="line">      <span class="attr">commit</span>: local.commit,</div><div class="line">      <span class="attr">getters</span>: local.getters,</div><div class="line">      <span class="attr">state</span>: local.state,</div><div class="line">      <span class="attr">rootGetters</span>: store.getters,</div><div class="line">      <span class="attr">rootState</span>: store.state</div><div class="line">    &#125;, payload, cb)</div><div class="line">    <span class="comment">// 如果不是个promise，用promise包装一下返回</span></div><div class="line">    <span class="keyword">if</span> (!isPromise(res)) &#123;</div><div class="line">      res = <span class="built_in">Promise</span>.resolve(res)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// devtool插件相关</span></div><div class="line">    <span class="keyword">if</span> (store._devtoolHook) &#123;</div><div class="line">      <span class="keyword">return</span> res.catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</div><div class="line">        store._devtoolHook.emit(<span class="string">'vuex:error'</span>, err)</div><div class="line">        <span class="keyword">throw</span> err</div><div class="line">      &#125;)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span> res</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们一般是这么使用<code>dispath</code>的，👇<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">this</span>.$store.dispatch(<span class="string">'actionName'</span>,&#123;</div><div class="line">  <span class="attr">test</span>: <span class="number">123</span></div><div class="line">&#125;).then((<span class="function"><span class="params">res</span>=&gt;</span>&#123;</div><div class="line">  ...</div><div class="line">&#125;))</div></pre></td></tr></table></figure></p>
<p>再来想想<code>dispatch</code>的执行机制，是不是变得很清晰了？首先调用<code>dispatch</code>方法，获取需要调用的<code>action</code>，也是就<code>actionName</code>，然后把<code>payload</code>传入，也就是<code>{test:1}</code>，然后完成之后调用<code>.then()</code>异步执行所需操作</p>
<h2 id="commit-（mutation）"><a href="#commit-（mutation）" class="headerlink" title="commit （mutation）"></a>commit （mutation）</h2><p>先来看看实际应用是这么触发<code>commit</code>的<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> actions = &#123;</div><div class="line">  changeTest(&#123; commit &#125;, payload)&#123;</div><div class="line">    commit(<span class="string">'setTestValue'</span>, payload)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> mutations = &#123;</div><div class="line">  setTestValue(state, payload)&#123;</div><div class="line">    state.test = payload</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在触发<code>action</code>的时候，调用<code>commit</code>，至于为什么会有<code>commit</code>方法，是因为上面<code>registerAction</code> push的方法第一个传输传入了一个对象<code>{dispatch,commit...}</code>，然后把<code>dispatch</code>传入的<code>payload</code>再代入<code>commit</code>方法捏</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">commit (_type, _payload, _options) &#123;</div><div class="line">  <span class="comment">// check object-style commit</span></div><div class="line">  <span class="comment">// 校验参数</span></div><div class="line">  <span class="keyword">const</span> &#123;</div><div class="line">    type,</div><div class="line">    payload,</div><div class="line">    options</div><div class="line">  &#125; = unifyObjectStyle(_type, _payload, _options)</div><div class="line"></div><div class="line">  <span class="keyword">const</span> mutation = &#123; type, payload &#125;</div><div class="line">  <span class="comment">// 获取当前对应的mutation方法集合</span></div><div class="line">  <span class="keyword">const</span> entry = <span class="keyword">this</span>._mutations[type]</div><div class="line">  <span class="keyword">if</span> (!entry) &#123;</div><div class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</div><div class="line">      <span class="built_in">console</span>.error(<span class="string">`[vuex] unknown mutation type: <span class="subst">$&#123;type&#125;</span>`</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span></div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 遍历调用集合内的方法，最后把payload参数传入集合的方法，等会介绍handle函数</span></div><div class="line">  <span class="comment">// _withCommit方法是判断当前操作是否是通过commit提交来修改state的</span></div><div class="line">  <span class="keyword">this</span>._withCommit(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    entry.forEach(<span class="function"><span class="keyword">function</span> <span class="title">commitIterator</span> (<span class="params">handler</span>) </span>&#123;</div><div class="line">      handler(payload)</div><div class="line">    &#125;)</div><div class="line">  &#125;)</div><div class="line">  <span class="comment">// 通知所有订阅者</span></div><div class="line">  <span class="keyword">this</span>._subscribers.forEach(<span class="function"><span class="params">sub</span> =&gt;</span> sub(mutation, <span class="keyword">this</span>.state))</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (</div><div class="line">    process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp;</div><div class="line">    options &amp;&amp; options.silent</div><div class="line">  ) &#123;</div><div class="line">    <span class="built_in">console</span>.warn(</div><div class="line">      <span class="string">`[vuex] mutation type: <span class="subst">$&#123;type&#125;</span>. Silent option has been removed. `</span> +</div><div class="line">      <span class="string">'Use the filter functionality in the vue-devtools'</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="string">``</span><span class="string">` </span></div><div class="line">### installModule</div><div class="line"></div><div class="line">`<span class="string">``</span>js</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">installModule</span> (<span class="params">store, rootState, path, module, hot</span>) </span>&#123;</div><div class="line"></div><div class="line">  ...</div><div class="line"></div><div class="line">  module.forEachMutation(<span class="function">(<span class="params">mutation, key</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> namespacedType = namespace + key</div><div class="line">    registerMutation(store, namespacedType, mutation, local)</div><div class="line">  &#125;)</div><div class="line"></div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>和<code>action</code>同理，注册所有的<code>mutation</code>，调用<code>registerMutation</code>方法</p>
<h3 id="registerMutation"><a href="#registerMutation" class="headerlink" title="registerMutation"></a>registerMutation</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">registerMutation</span> (<span class="params">store, type, handler, local</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> entry = store._mutations[type] || (store._mutations[type] = [])</div><div class="line">  entry.push(<span class="function"><span class="keyword">function</span> <span class="title">wrappedMutationHandler</span> (<span class="params">payload</span>) </span>&#123;</div><div class="line">    handler.call(store, local.state, payload)</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>registerMutation</code>方法比较简单，直接把<code>state</code>、<code>payload</code>传入<code>handler</code>函数</p>
<p>再来看看实际使用<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> actions = &#123;</div><div class="line">  changeTest(&#123; commit &#125;, payload)&#123;</div><div class="line">    commit(<span class="string">'setTestValue'</span>, payload)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> mutations = &#123;</div><div class="line">  setTestValue(state, payload)&#123;</div><div class="line">    state.test = payload</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>commit</code>调用之后，获取到对应需要触发的<code>mutation</code>，也就是<code>setTestValue</code>，然后实际执行的是<code>registerMutation</code>处理赋值给 <code>store._mutations[&#39;setTestValue]</code>的方法集合，也就是<code>entry</code>，内部会传入两个参数，<code>state</code>、<code>payload</code>,这就是我们可以直接使用 <code>state.test = payload</code> 的原因</p>
<h2 id="mapState-mapAction-mapGetter等工具函数"><a href="#mapState-mapAction-mapGetter等工具函数" class="headerlink" title="mapState/mapAction/mapGetter等工具函数"></a>mapState/mapAction/mapGetter等工具函数</h2><p>开发中我们经常会使用到<code>mapState</code>来获取数据<br><a href="https://github.com/vuejs/vuex/blob/665455f8da/src/helpers.js" target="_blank" rel="external">工具函数源码地址</a></p>
<h3 id="mapState"><a href="#mapState" class="headerlink" title="mapState"></a>mapState</h3><p>先来看看我们在实际项目怎么使用<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 在单独构建的版本中辅助函数为 Vuex.mapState</span></div><div class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  computed: mapState(&#123;</div><div class="line">    <span class="comment">// 箭头函数可使代码更简练</span></div><div class="line">    count: <span class="function"><span class="params">state</span> =&gt;</span> state.count,</div><div class="line"></div><div class="line">    <span class="comment">// 传字符串参数 'count' 等同于 `state =&gt; state.count`</span></div><div class="line">    countAlias: <span class="string">'count'</span>,</div><div class="line"></div><div class="line">    <span class="comment">// 为了能够使用 `this` 获取局部状态，必须使用常规函数</span></div><div class="line">    countPlusLocalState (state) &#123;</div><div class="line">      <span class="keyword">return</span> state.count + <span class="keyword">this</span>.localCount</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">  <span class="comment">// 或者带命名空间的使用，这就是下面normalizeNamespace得作用</span></div><div class="line">  computed: &#123;</div><div class="line">  ...mapState(<span class="string">'some/nested/module'</span>, &#123;</div><div class="line">    <span class="attr">a</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.a, <span class="comment">// 如果不使用则需要通过 state.some.nested.module.a</span></div><div class="line">    b: <span class="function"><span class="params">state</span> =&gt;</span> state.b</div><div class="line">  &#125;)</div><div class="line">&#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> <a href="https://github.com/vuejs/vuex/blob/665455f8da/src/helpers.js#L7" target="_blank" rel="external">mapState 源码地址</a><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 首先是判断是否使用了命名空间，如果没有的话namespace会被赋值为空，normalizeNamespace实现见代码底部</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> mapState = normalizeNamespace(<span class="function">(<span class="params">namespace, states</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">const</span> res = &#123;&#125;</div><div class="line">  <span class="comment">// 先把传入的states转换一下，转换例子如下，转换成数组对象的形式，都有key和val</span></div><div class="line">  normalizeMap(states).forEach(<span class="function">(<span class="params">&#123; key, val &#125;</span>) =&gt;</span> &#123;</div><div class="line">    res[key] = <span class="function"><span class="keyword">function</span> <span class="title">mappedState</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="comment">// 获取state</span></div><div class="line">      <span class="keyword">let</span> state = <span class="keyword">this</span>.$store.state</div><div class="line">      <span class="keyword">let</span> getters = <span class="keyword">this</span>.$store.getters</div><div class="line">      <span class="comment">// 如果有命名则解析完成之后重新赋值state和getter</span></div><div class="line">      <span class="keyword">if</span> (namespace) &#123;</div><div class="line">        <span class="comment">// 通过模块来解析访问路径 some/nested/module =&gt;  store._modulesNamespaceMap['some/nested/module/] = &#123; // 当前模块 &#125;</span></div><div class="line">        <span class="comment">// 关于如何实现的，源码地址 https://github.com/vuejs/vuex/blob/665455f8da/src/store.js#L301</span></div><div class="line">        <span class="keyword">const</span> <span class="built_in">module</span> = getModuleByNamespace(<span class="keyword">this</span>.$store, <span class="string">'mapState'</span>, namespace)</div><div class="line">        <span class="keyword">if</span> (!<span class="built_in">module</span>) &#123;</div><div class="line">          <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        state = <span class="built_in">module</span>.context.state</div><div class="line">        getters = <span class="built_in">module</span>.context.getters</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// 如果传入的函数，则把state和getter传入到函数内</span></div><div class="line">      <span class="comment">// 否则如果传入的是字符串，则直接取出返回数据，也就是上面使用 countAlias: 'count',</span></div><div class="line">      <span class="keyword">return</span> <span class="keyword">typeof</span> val === <span class="string">'function'</span></div><div class="line">        ? val.call(<span class="keyword">this</span>, state, getters)</div><div class="line">        : state[val]</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// mark vuex getter for devtools</span></div><div class="line">    res[key].vuex = <span class="literal">true</span></div><div class="line">  &#125;)</div><div class="line">  <span class="comment">// 最终把处理好的对象返回处理，所以可知mapState返回的是一个对象</span></div><div class="line">  <span class="keyword">return</span> res</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Normalize the map</div><div class="line"> * normalizeMap([1, 2, 3]) =&gt; [ &#123; key: 1, val: 1 &#125;, &#123; key: 2, val: 2 &#125;, &#123; key: 3, val: 3 &#125; ]</div><div class="line"> * normalizeMap(&#123;a: 1, b: 2, c: 3&#125;) =&gt; [ &#123; key: 'a', val: 1 &#125;, &#123; key: 'b', val: 2 &#125;, &#123; key: 'c', val: 3 &#125; ]</div><div class="line"> * @param &#123;Array|Object&#125; map</div><div class="line"> * @return &#123;Object&#125;</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">normalizeMap</span> (<span class="params">map</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.isArray(map)</div><div class="line">    ? map.map(<span class="function"><span class="params">key</span> =&gt;</span> (&#123; key, <span class="attr">val</span>: key &#125;))</div><div class="line">    : <span class="built_in">Object</span>.keys(map).map(<span class="function"><span class="params">key</span> =&gt;</span> (&#123; key, <span class="attr">val</span>: map[key] &#125;))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Return a function expect two param contains namespace and map. it will normalize the namespace and then the param's function will handle the new namespace and the map.</div><div class="line"> * @param &#123;Function&#125; fn</div><div class="line"> * @return &#123;Function&#125;</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">normalizeNamespace</span> (<span class="params">fn</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">namespace, map</span>) =&gt;</span> &#123;</div><div class="line">    <span class="comment">// 首先判断第一个参数是否为字符串，因为我们大部分情况都是传递的是对象，只有使用命名空间的时候第一个参数会是字符串</span></div><div class="line">    <span class="comment">// 如果不是字符串的话，把第一个参数也就是namespace赋值为map，自己置为空，这样就达到了第一个参数传入对象也是可以的</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> namespace !== <span class="string">'string'</span>) &#123;</div><div class="line">      map = namespace</div><div class="line">      namespace = <span class="string">''</span></div><div class="line">    <span class="comment">// 如果传入的是对象，如果最后一个字符不是/，则自动拼接，因为 store._modulesNamespaceMap 下都是这样的key 'some/nested/module'</span></div><div class="line">    <span class="comment">// 具体怎么实现这种路径的见源码 getNamespace 方法 https://github.com/vuejs/vuex/blob/665455f8da/src/module/module-collection.js#L16</span></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (namespace.charAt(namespace.length - <span class="number">1</span>) !== <span class="string">'/'</span>) &#123;</div><div class="line">      namespace += <span class="string">'/'</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> fn(namespace, map)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里只讲<code>mapState</code>，其他的实现大同小异，都差不太多</p>
<h2 id="vuex响应式原理"><a href="#vuex响应式原理" class="headerlink" title="vuex响应式原理"></a>vuex响应式原理</h2><p>为什么我们通过修改<code>state</code>，模板里的视图也一起更新了呢？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">resetStoreVM</span> (<span class="params">store, state, hot</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> oldVm = store._vm</div><div class="line"></div><div class="line">  <span class="comment">// bind store public getters</span></div><div class="line">  <span class="comment">// 初始化store的getter</span></div><div class="line">  store.getters = &#123;&#125;</div><div class="line">  <span class="comment">// 获取registerGetter方法注册的getter</span></div><div class="line">  <span class="keyword">const</span> wrappedGetters = store._wrappedGetters</div><div class="line">  <span class="keyword">const</span> computed = &#123;&#125;</div><div class="line">  forEachValue(wrappedGetters, (fn, key) =&gt; &#123;</div><div class="line">    <span class="comment">// use computed to leverage its lazy-caching mechanism</span></div><div class="line">    <span class="comment">// 因为getter的value都是函数，相当于vue的computed，这里直接执行获取结果</span></div><div class="line">    computed[key] = <span class="function"><span class="params">()</span> =&gt;</span> fn(store)</div><div class="line">    <span class="comment">// 通过Object.defineProperty为给个getter设置get方法，改变getter获取值方式，如this.$store.getter.a会直接获取store._vm.a</span></div><div class="line">    <span class="built_in">Object</span>.defineProperty(store.getters, key, &#123;</div><div class="line">      <span class="attr">get</span>: <span class="function"><span class="params">()</span> =&gt;</span> store._vm[key],</div><div class="line">      <span class="attr">enumerable</span>: <span class="literal">true</span> <span class="comment">// for local getters</span></div><div class="line">    &#125;)</div><div class="line">  &#125;)</div><div class="line"></div><div class="line">  <span class="comment">// use a Vue instance to store the state tree</span></div><div class="line">  <span class="comment">// suppress warnings just in case the user has added</span></div><div class="line">  <span class="comment">// some funky global mixins</span></div><div class="line">  <span class="comment">// 先获取当前警告的配置</span></div><div class="line">  <span class="keyword">const</span> silent = Vue.config.silent</div><div class="line">  <span class="comment">// 将他置为true，意思是new Vue的时候不会抛出警告</span></div><div class="line">  Vue.config.silent = <span class="literal">true</span></div><div class="line">  <span class="comment">// 这里是关键，借助Vue的响应式来实现，这样state和getter的修改都会有响应式</span></div><div class="line">  store._vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">data</span>: &#123;</div><div class="line">      <span class="attr">$$state</span>: state</div><div class="line">    &#125;,</div><div class="line">    computed</div><div class="line">  &#125;)</div><div class="line">  <span class="comment">// new完之后恢复之前的配置</span></div><div class="line">  Vue.config.silent = silent</div><div class="line"></div><div class="line">  <span class="comment">// enable strict mode for new vm</span></div><div class="line">  <span class="comment">// 保证修改值一定是通过mutation的</span></div><div class="line">  <span class="keyword">if</span> (store.strict) &#123;</div><div class="line">    enableStrictMode(store)</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 注销旧的state的引用，销毁旧的Vue对象</span></div><div class="line">  <span class="keyword">if</span> (oldVm) &#123;</div><div class="line">    <span class="keyword">if</span> (hot) &#123;</div><div class="line">      <span class="comment">// dispatch changes in all subscribed watchers</span></div><div class="line">      <span class="comment">// to force getter re-evaluation for hot reloading.</span></div><div class="line">      store._withCommit(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        oldVm._data.$$state = <span class="literal">null</span></div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">    Vue.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> oldVm.$destroy())</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从上面我们可以看到，<code>vuex</code>实现响应式，借助的是<code>Vue</code>的响应式，通过把<code>store.state</code>赋值给<code>store._vm.$$state</code>，这样修改<code>state</code>，同样<code>store._vm.$$state也</code>会被修改<br><code>getter</code>通过<code>Object.defineProperty</code>定义的<code>get</code>方法，访问的是<code>store._vm.computed</code>，让<code>getter</code>成为<code>vue</code>的计算实现，因此<code>getter</code>既拥有监听<code>store._vm.$$state</code>改变（并重新计算出自身的新值）的能力，又拥有在自身值改变之后通知外部<code>watcher</code>的能力</p>
<h2 id="命名空间的副作用"><a href="#命名空间的副作用" class="headerlink" title="命名空间的副作用"></a>命名空间的副作用</h2><p>我们之前提到<code>action</code>和<code>mutation</code>对应的名称的值是一个数组，而不是直接的一个方法，正常应该下面这样👇<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> actionCollect = &#123;</div><div class="line">  <span class="attr">changeValue</span>: <span class="function">(<span class="params">&#123; commit &#125;, payload</span>))=&gt;</span>&#123;</div><div class="line">    ...</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>但是看源码我们知道，他是一个数组<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> actionCollect = &#123;</div><div class="line">    <span class="attr">changeValue</span>: [</div><div class="line">      <span class="function">(<span class="params">&#123; commit &#125;, payload</span>)=&gt;</span>&#123;</div><div class="line">          ...</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      ,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">      ...</div><div class="line">    ]</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>难道<code>action</code>还有<code>mutaion</code>会有同名的吗？答案肯定是的，这就要讲到命名空间了<code>namespace</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">new</span> Vuex.Store(&#123;</div><div class="line">  <span class="attr">state</span>: &#123;</div><div class="line">    <span class="attr">a</span>: <span class="number">1</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">modules</span>: &#123;</div><div class="line">    <span class="attr">test1</span>: &#123;</div><div class="line">      <span class="attr">namespaced</span>: <span class="literal">true</span>,</div><div class="line">      <span class="attr">state</span>: &#123;</div><div class="line">        <span class="attr">a</span>: <span class="string">'2'</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">mutations</span>: &#123;</div><div class="line">        <span class="attr">changeValue</span>: <span class="function">(<span class="params">state, payload</span>) =&gt;</span> &#123;</div><div class="line">          <span class="built_in">console</span>.log(<span class="string">'1'</span>)</div><div class="line">          state.a = payload</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">test2</span>: &#123;</div><div class="line">      <span class="attr">namespaced</span>: <span class="literal">false</span>,</div><div class="line">      <span class="attr">state</span>: &#123;</div><div class="line">        <span class="attr">a</span>: <span class="string">'2'</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">modules</span>: &#123;</div><div class="line">        <span class="attr">test1</span>: &#123;</div><div class="line">          <span class="attr">namespaced</span>: <span class="literal">true</span>,</div><div class="line">          <span class="attr">state</span>: &#123;</div><div class="line">            <span class="attr">a</span>: <span class="number">3</span></div><div class="line">          &#125;,</div><div class="line">          <span class="attr">mutations</span>: &#123;</div><div class="line">            <span class="attr">changeValue</span>: <span class="function">(<span class="params">state, payload</span>) =&gt;</span> &#123;</div><div class="line">              <span class="built_in">console</span>.log(<span class="string">'2'</span>)</div><div class="line">              state.a = payload</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'App'</span>,</div><div class="line">  mounted () &#123;</div><div class="line">    <span class="keyword">this</span>.$store.commit(<span class="string">'test1/changeValue'</span>, <span class="string">'the same value'</span>)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 输出：1</span></div><div class="line"><span class="comment">// 输出：2</span></div></pre></td></tr></table></figure>
<p>你会发现你<code>commit</code>了一次缺触发了两个不同模块的<code>mutation</code>，这就是命名空间的副作用，具体内部是如何处理<code>namespace</code>之前也讲到了，<a href="https://github.com/vuejs/vuex/blob/665455f8da/src/module/module-collection.js#L16" target="_blank" rel="external">源码地址</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">getNamespace (path) &#123;</div><div class="line">  <span class="keyword">let</span> <span class="built_in">module</span> = <span class="keyword">this</span>.root</div><div class="line">  <span class="keyword">return</span> path.reduce(<span class="function">(<span class="params">namespace, key</span>) =&gt;</span> &#123;</div><div class="line">    <span class="built_in">module</span> = <span class="built_in">module</span>.getChild(key)</div><div class="line">    <span class="keyword">return</span> namespace + (<span class="built_in">module</span>.namespaced ? key + <span class="string">'/'</span> : <span class="string">''</span>)</div><div class="line">  &#125;, <span class="string">''</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过模块的<code>key</code>来拼接，如之前代码设置的<code>namespace</code>，<code>namespace</code>就是<code>test1/changeValue</code></p>
<p>所以使用<code>namespace</code>一定要注意路径名问题，还是就是避免名称相同，除非你就想这么干</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>vuex</code>源码就先讲这么多，其实还有好几个点没讲，例如各种工具方法和<code>vue-devtools</code>的实现，总体多读几遍还是可以看明白的，这就是<code>debugger</code>的过程了</p>
<p>原文地址 <a href="http://www.wclimb.site/2019/10/14/Vue之vuex源码分析/">http://www.wclimb.site/2019/10/14/Vue之vuex源码分析/</a></p>
]]></content>
      <categories>
        <category>javascript</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>原创</tag>
        <tag>javascript</tag>
        <tag>vue</tag>
        <tag>源码</tag>
      </tags>
  </entry>
  <entry>
    <title>canvas仿微信红包照片</title>
    <url>/2017/06/28/canvas%E5%BE%AE%E4%BF%A1%E7%BA%A2%E5%8C%85%E7%85%A7%E7%89%87/</url>
    <content><![CDATA[<h1 id="canvas仿微信红包照片-By-wclimb"><a href="#canvas仿微信红包照片-By-wclimb" class="headerlink" title="canvas仿微信红包照片 By wclimb"></a>canvas仿微信红包照片 By wclimb</h1><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;canvas id=&quot;cav&quot; width=&quot;500&quot; height=&quot;500&quot;&gt;&lt;/canvas&gt;</div></pre></td></tr></table></figure>
<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><blockquote>
<p>设置canvas的背景图</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">canvas</span>&#123;</div><div class="line">    <span class="attribute">background</span>:<span class="built_in">url</span>(https://b-ssl.duitang.com/uploads/item/201501/22/20150122203239_Cfr58.thumb.700_0.jpeg) no-repeat;</div><div class="line">    <span class="attribute">background-size</span>:<span class="number">100%</span> <span class="number">100%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.querySelector(<span class="string">"#cav"</span>)</div><div class="line"><span class="keyword">var</span> context = canvas.getContext(<span class="string">"2d"</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> randomX = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">440</span>+<span class="number">30</span>)</div><div class="line"><span class="keyword">var</span> randomY = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">440</span>+<span class="number">30</span>)</div><div class="line"></div><div class="line">context.globalAlpha = <span class="number">0.96</span>;</div><div class="line">context.fillStyle = <span class="string">'#333'</span></div><div class="line">context.rect(<span class="number">0</span>,<span class="number">0</span>,canvas.width,canvas.height);</div><div class="line">context.fill();</div><div class="line"></div><div class="line">context.save()</div><div class="line">context.beginPath()</div><div class="line">context.arc(randomX,randomY,<span class="number">30</span>,<span class="number">0</span>,<span class="built_in">Math</span>.PI*<span class="number">2</span>,<span class="literal">false</span>);</div><div class="line">context.clip();</div><div class="line">context.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvas.width,canvas.height)</div><div class="line">context.restore();</div><div class="line"></div><div class="line"><span class="keyword">var</span> num = <span class="number">30</span>;</div><div class="line"><span class="keyword">var</span> time = <span class="literal">null</span>;</div><div class="line"><span class="built_in">document</span>.body.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">circle</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        num += <span class="number">5</span></div><div class="line">        context.save()</div><div class="line">        context.beginPath()</div><div class="line">        context.arc(randomX,randomY,num,<span class="number">0</span>,<span class="built_in">Math</span>.PI*<span class="number">2</span>,<span class="literal">false</span>);</div><div class="line">        context.clip();</div><div class="line">        context.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvas.width,canvas.height)</div><div class="line">        context.restore();</div><div class="line">        <span class="built_in">console</span>.log(num)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (num &gt;= <span class="number">677</span>)&#123;</div><div class="line">        	clearInterval(timer)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    timer = setInterval(circle,<span class="number">10</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><blockquote>
<p>随机出现圆心的位置，因为canvas为500*500 圆心为30 所以圆心的范围为 X(30,470) Y(470,30)</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> randomX = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">440</span>+<span class="number">30</span>)</div><div class="line"><span class="keyword">var</span> randomY = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">440</span>+<span class="number">30</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p>绘制矩形 透明度为0.96 填充颜色#333 宽高为canvas的宽高 最后用fill填充</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">context.globalAlpha = <span class="number">0.96</span>;</div><div class="line">context.fillStyle = <span class="string">'#333'</span></div><div class="line">context.rect(<span class="number">0</span>,<span class="number">0</span>,canvas.width,canvas.height);</div><div class="line">context.fill();</div></pre></td></tr></table></figure>
<blockquote>
<p>初始化圆心的位置，用arc绘制圆，默认半径为30，用clip剪切，只有被剪切区域内是可见的</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">context.save()</div><div class="line">context.beginPath()</div><div class="line">context.arc(randomX,randomY,<span class="number">30</span>,<span class="number">0</span>,<span class="built_in">Math</span>.PI*<span class="number">2</span>,<span class="literal">false</span>);</div><div class="line">context.clip();</div><div class="line">context.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvas.width,canvas.height)</div><div class="line">context.restore();</div></pre></td></tr></table></figure>
<blockquote>
<p>点击body的时候，设置定时器，让圆的半径每隔10毫秒增加5，当num半径大于677关闭定时器，677为canvas对角的长度</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">document</span>.body.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div></pre></td></tr></table></figure>
<h2 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h2><p><img src="/img/canvas6.gif" alt="img"></p>
]]></content>
      <categories>
        <category>javascript</category>
        <category>canvas</category>
      </categories>
      <tags>
        <tag>原创</tag>
        <tag>canvas</tag>
      </tags>
  </entry>
  <entry>
    <title>gulp基础教程</title>
    <url>/2017/06/27/gulp/</url>
    <content><![CDATA[<h2 id="入门指南–引用gulp官网示例"><a href="#入门指南–引用gulp官网示例" class="headerlink" title="入门指南–引用gulp官网示例"></a>入门指南–引用gulp官网示例</h2><blockquote>
<p>全局安装 gulp：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">$ npm install --global gulp</div></pre></td></tr></table></figure>
<blockquote>
<p>作为项目的开发依赖（devDependencies）安装：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">$ npm install --save-dev gulp</div></pre></td></tr></table></figure>
<blockquote>
<p>在项目根目录下创建一个名为 gulpfile.js 的文件：</p>
</blockquote>
<a id="more"></a>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 将你的默认的任务代码放在这</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>运行 gulp</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ gulp  //默认的名为 default 的任务（task）将会被运行，在这里，这个任务并未做任何事情。</div></pre></td></tr></table></figure>
<p>至此，一个简单的gulp已经完成，接下来让我们来完善部分功能</p>
<h2 id="gulp功能完善"><a href="#gulp功能完善" class="headerlink" title="gulp功能完善"></a>gulp功能完善</h2><h3 id="生成package-json文件"><a href="#生成package-json文件" class="headerlink" title="生成package.json文件"></a>生成package.json文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ npm init //一直回车，有需要的可以设置</div></pre></td></tr></table></figure>
<h3 id="安装所需包"><a href="#安装所需包" class="headerlink" title="安装所需包"></a>安装所需包</h3><blockquote>
<p>使用淘宝镜像</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">$ npm install -g cnpm --registry=https:<span class="comment">//registry.npm.taobao.org</span></div><div class="line">示例 $ cnpm install [name]</div></pre></td></tr></table></figure>
<p>接着<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">$ cnpm i browser-sync gulp gulp-clean-css gulp-imagemin gulp-rename  gulp-sass gulp-uglify gulp.spritesmith gulp-autoprefixer --save</div></pre></td></tr></table></figure></p>
<h3 id="新建gulpfile-js文件"><a href="#新建gulpfile-js文件" class="headerlink" title="新建gulpfile.js文件"></a>新建gulpfile.js文件</h3><p>添加<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp         = <span class="built_in">require</span>(<span class="string">'gulp'</span>); </div><div class="line"><span class="keyword">var</span> browserSync  = <span class="built_in">require</span>(<span class="string">'browser-sync'</span>).create(); <span class="comment">//通过流的方式创建任务流程, 这样您就可以在您的任务完成后调用reload，所有的浏览器将被告知的变化并实时更新</span></div><div class="line"><span class="keyword">var</span> sass         = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>); <span class="comment">//sass转css</span></div><div class="line"><span class="keyword">var</span> reload       = browserSync.reload; </div><div class="line"><span class="keyword">var</span> minifyCSS    = <span class="built_in">require</span>(<span class="string">'gulp-clean-css'</span>)  <span class="comment">//css压缩</span></div><div class="line"><span class="keyword">var</span> uglify       = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>) <span class="comment">//js压缩</span></div><div class="line"><span class="keyword">var</span> imagemin     = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>) <span class="comment">//图片压缩</span></div><div class="line"><span class="keyword">var</span> rename       = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>) <span class="comment">//文件重命名</span></div><div class="line"><span class="keyword">var</span> autoprefixer = <span class="built_in">require</span>(<span class="string">'gulp-autoprefixer'</span>) <span class="comment">//自动添加前缀</span></div></pre></td></tr></table></figure></p>
<h3 id="设置默认文件地址"><a href="#设置默认文件地址" class="headerlink" title="设置默认文件地址"></a>设置默认文件地址</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">code为文件夹，里面存放html css js文件</div><div class="line"><span class="keyword">var</span> src = &#123;</div><div class="line">    <span class="attr">scss</span>: <span class="string">'code/scss/*.scss'</span>,</div><div class="line">    <span class="attr">css</span>:  <span class="string">'code/css/*.css'</span>,</div><div class="line">    <span class="attr">html</span>: <span class="string">'code/*.html'</span>,</div><div class="line">    <span class="attr">js</span>:   <span class="string">'code/js/*.js'</span>,</div><div class="line">    <span class="attr">images</span>: <span class="string">'code/images/*.&#123;png,jpg,gif,ico&#125;'</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="gulp-task-name-deps-fn"><a href="#gulp-task-name-deps-fn" class="headerlink" title="gulp.task(name[, deps], fn)"></a>gulp.task(name[, deps], fn)</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">name: 任务的名字</div><div class="line">deps: 一个包含任务列表的数组，这些任务会在你当前任务运行之前完成。</div><div class="line">fn: 该函数定义任务所要执行的一些操作。通常来说，它会是这种形式：gulp.src().pipe(someplugin())。</div><div class="line"></div><div class="line"><span class="comment">// 静态服务器 + 监听 scss/html 文件</span></div><div class="line"> gulp.task(<span class="string">'serve'</span>, [<span class="string">'sass'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    browserSync.init(&#123;</div><div class="line">        <span class="attr">server</span>: <span class="string">"./code"</span></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    gulp.watch(src.scss, [<span class="string">'sass'</span>]);</div><div class="line">    gulp.watch(src.css, [<span class="string">'css'</span>]);</div><div class="line">    gulp.watch(src.images, [<span class="string">'images'</span>])</div><div class="line">    gulp.watch(src.js, [<span class="string">'js'</span>]);</div><div class="line">    gulp.watch(src.html).on(<span class="string">'change'</span>, reload);</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="scss编译后的css将注入到浏览器里实现更新"><a href="#scss编译后的css将注入到浏览器里实现更新" class="headerlink" title="scss编译后的css将注入到浏览器里实现更新"></a>scss编译后的css将注入到浏览器里实现更新</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">gulp.task(<span class="string">'sass'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src(src.scss)</div><div class="line">        .pipe(sass())</div><div class="line">        .pipe(minifyCSS(&#123;</div><div class="line">            <span class="attr">advanced</span>: <span class="literal">false</span>,<span class="comment">//类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]</span></div><div class="line">            compatibility: <span class="string">'ie7'</span>,<span class="comment">//保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式]</span></div><div class="line">            keepBreaks: <span class="literal">true</span>,<span class="comment">//类型：Boolean 默认：false [是否保留换行]</span></div><div class="line">            keepSpecialComments: <span class="string">'*'</span></div><div class="line">            <span class="comment">//保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀</span></div><div class="line">        &#125;))</div><div class="line">        .pipe(autoprefixer())</div><div class="line">        .pipe(rename(&#123;<span class="attr">suffix</span>: <span class="string">'.min'</span>&#125;))</div><div class="line">        .pipe(gulp.dest(<span class="string">"code/css"</span>))</div><div class="line">        .pipe(reload(&#123;<span class="attr">stream</span>: <span class="literal">true</span>&#125;));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="雪碧图（有需要可以尝试）"><a href="#雪碧图（有需要可以尝试）" class="headerlink" title="雪碧图（有需要可以尝试）"></a>雪碧图（有需要可以尝试）</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> spritesmith = <span class="built_in">require</span>(<span class="string">'gulp.spritesmith'</span>);</div><div class="line"> </div><div class="line"> gulp.task(<span class="string">'sprite'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> gulp.src(<span class="string">'code/images/*.png'</span>)</div><div class="line">         .pipe(spritesmith(&#123;</div><div class="line">             <span class="attr">imgName</span>:<span class="string">'images/sprite20161010.png'</span>,  <span class="comment">//保存合并后图片的地址</span></div><div class="line">             cssName:<span class="string">'css/sprite.css'</span>,   <span class="comment">//保存合并后对于css样式的地址</span></div><div class="line">             padding:<span class="number">20</span>,</div><div class="line">             <span class="attr">algorithm</span>:<span class="string">'binary-tree'</span>,</div><div class="line">         &#125;))</div><div class="line">         .pipe(gulp.dest(<span class="string">'code/scss'</span>));</div><div class="line"> &#125;);</div></pre></td></tr></table></figure>
<h3 id="监听css文件"><a href="#监听css文件" class="headerlink" title="监听css文件"></a>监听css文件</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">gulp.task(<span class="string">'css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src(src.css)</div><div class="line">        .pipe(minifyCSS())</div><div class="line">        .pipe(rename(&#123;<span class="attr">suffix</span>: <span class="string">'.min'</span>&#125;))</div><div class="line">        .pipe(gulp.dest(<span class="string">"code/css"</span>))</div><div class="line">        .pipe(reload(&#123;<span class="attr">stream</span>: <span class="literal">true</span>&#125;));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="监听js文件"><a href="#监听js文件" class="headerlink" title="监听js文件"></a>监听js文件</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">gulp.task(<span class="string">'js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 1. 找到文件</span></div><div class="line">    <span class="keyword">return</span>  gulp.src(src.js)</div><div class="line">        <span class="comment">//2. 压缩文件</span></div><div class="line">        .pipe(uglify())</div><div class="line">        .pipe(rename(&#123;<span class="attr">suffix</span>: <span class="string">'.min'</span>&#125;))</div><div class="line">        <span class="comment">//3. 另存压缩后的文件</span></div><div class="line">        .pipe(gulp.dest(<span class="string">'code/dest'</span>))</div><div class="line">        .pipe(reload(&#123;<span class="attr">stream</span>: <span class="literal">true</span>&#125;));</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="压缩图片任务"><a href="#压缩图片任务" class="headerlink" title="压缩图片任务"></a>压缩图片任务</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 在命令行输入 gulp images 启动此任务</span></div><div class="line">gulp.task(<span class="string">'images'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// 1. 找到图片</span></div><div class="line">        gulp.src(src.images)</div><div class="line">        <span class="comment">// 2. 压缩图片</span></div><div class="line">        .pipe($.imagemin())</div><div class="line">        <span class="comment">// 3. 另存图片</span></div><div class="line">        .pipe(gulp.dest(<span class="string">'images'</span>))</div><div class="line">        .pipe(reload(&#123;<span class="attr">stream</span>: <span class="literal">true</span>&#125;));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="最后控制台输入gulp执行"><a href="#最后控制台输入gulp执行" class="headerlink" title="最后控制台输入gulp执行"></a>最后控制台输入gulp执行</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'serve'</span>]);</div></pre></td></tr></table></figure>
<hr>
<p>如果觉得帮助到了你，欢迎star -&gt; <a href="https://github.com/wclimb/wclimb.github.io" target="_blank" rel="external">https://github.com/wclimb/wclimb.github.io</a></p>
<hr>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><h3 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">-code</div><div class="line">    -imgage</div><div class="line">       1.png</div><div class="line">    -css</div><div class="line">       default.css</div><div class="line">    -scss</div><div class="line">       default.scss</div><div class="line">    -js</div><div class="line">       default.js</div><div class="line">    index.html</div><div class="line">gulpfile.js</div><div class="line">package.json</div></pre></td></tr></table></figure>
<h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"gulp-test"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="string">"description"</span>: <span class="string">"Gulp &amp; SASS"</span>,</div><div class="line">  <span class="string">"main"</span>: <span class="string">"gulpfile.js"</span>,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"start"</span>: <span class="string">"gulp"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"author"</span>: <span class="string">""</span>,</div><div class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span>,</div><div class="line">  <span class="string">"devDependencies"</span>: &#123;</div><div class="line">    <span class="string">"browser-sync"</span>: <span class="string">"^2.2.0"</span>,</div><div class="line">    <span class="string">"gulp"</span>: <span class="string">"^3.9.1"</span>,</div><div class="line">    <span class="string">"gulp-clean-css"</span>: <span class="string">"^3.0.3"</span>,</div><div class="line">    <span class="string">"gulp-imagemin"</span>: <span class="string">"^3.1.1"</span>,</div><div class="line">    <span class="string">"gulp-rename"</span>: <span class="string">"^1.2.2"</span>,</div><div class="line">    <span class="string">"gulp-sass"</span>: <span class="string">"^3.1.0"</span>,</div><div class="line">    <span class="string">"gulp-uglify"</span>: <span class="string">"^2.0.1"</span>,</div><div class="line">    <span class="string">"gulp.spritesmith"</span>: <span class="string">"^6.4.0"</span>,</div><div class="line">    <span class="string">"gulp-autoprefixer"</span>: <span class="string">"^4.0.0"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"dependencies"</span>: &#123;</div><div class="line">    </div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="gulpfile-js"><a href="#gulpfile-js" class="headerlink" title="gulpfile.js"></a>gulpfile.js</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp         = <span class="built_in">require</span>(<span class="string">'gulp'</span>); </div><div class="line"><span class="keyword">var</span> browserSync  = <span class="built_in">require</span>(<span class="string">'browser-sync'</span>).create(); <span class="comment">//通过流的方式创建任务流程, 这样您就可以在您的任务完成后调用reload，所有的浏览器将被告知的变化并实时更新</span></div><div class="line"><span class="keyword">var</span> sass         = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>); <span class="comment">//sass转css</span></div><div class="line"><span class="keyword">var</span> reload       = browserSync.reload; </div><div class="line"><span class="keyword">var</span> minifyCSS    = <span class="built_in">require</span>(<span class="string">'gulp-clean-css'</span>)  <span class="comment">//css压缩</span></div><div class="line"><span class="keyword">var</span> uglify       = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>) <span class="comment">//js压缩</span></div><div class="line"><span class="keyword">var</span> imagemin     = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>) <span class="comment">//图片压缩</span></div><div class="line"><span class="keyword">var</span> rename       = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>) <span class="comment">//文件重命名</span></div><div class="line"><span class="keyword">var</span> autoprefixer = <span class="built_in">require</span>(<span class="string">'gulp-autoprefixer'</span>) <span class="comment">//自动添加前缀</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> src = &#123;</div><div class="line">    <span class="attr">scss</span>: <span class="string">'code/scss/*.scss'</span>,</div><div class="line">    <span class="attr">css</span>:  <span class="string">'code/css/*.css'</span>,</div><div class="line">    <span class="attr">html</span>: <span class="string">'code/*.html'</span>,</div><div class="line">    <span class="attr">js</span>:   <span class="string">'code/js/*.js'</span>,</div><div class="line">    <span class="attr">images</span>: <span class="string">'code/images/*.&#123;png,jpg,gif,ico&#125;'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 静态服务器 + 监听 scss/html 文件</span></div><div class="line"> gulp.task(<span class="string">'serve'</span>, [<span class="string">'sass'</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    browserSync.init(&#123;</div><div class="line">        <span class="attr">server</span>: <span class="string">"./code"</span></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    gulp.watch(src.scss, [<span class="string">'sass'</span>]);</div><div class="line">    gulp.watch(src.css, [<span class="string">'css'</span>]);</div><div class="line">    gulp.watch(src.images, [<span class="string">'images'</span>])</div><div class="line">    gulp.watch(src.js, [<span class="string">'js'</span>]);</div><div class="line">    gulp.watch(src.html).on(<span class="string">'change'</span>, reload);</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// scss编译后的css将注入到浏览器里实现更新</span></div><div class="line">gulp.task(<span class="string">'sass'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src(src.scss)</div><div class="line">        .pipe(sass())</div><div class="line">        .pipe(minifyCSS(&#123;</div><div class="line">            <span class="attr">advanced</span>: <span class="literal">false</span>,<span class="comment">//类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]</span></div><div class="line">            compatibility: <span class="string">'ie7'</span>,<span class="comment">//保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式]</span></div><div class="line">            keepBreaks: <span class="literal">true</span>,<span class="comment">//类型：Boolean 默认：false [是否保留换行]</span></div><div class="line">            keepSpecialComments: <span class="string">'*'</span></div><div class="line">            <span class="comment">//保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀</span></div><div class="line">        &#125;))</div><div class="line">        .pipe(autoprefixer())</div><div class="line">        .pipe(rename(&#123;<span class="attr">suffix</span>: <span class="string">'.min'</span>&#125;))</div><div class="line">        .pipe(gulp.dest(<span class="string">"code/css"</span>)) <span class="comment">//重新输出数据到某个文件夹，如果没有就会自动创建</span></div><div class="line">        .pipe(reload(&#123;<span class="attr">stream</span>: <span class="literal">true</span>&#125;));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 雪碧图（有需要可以尝试）</span></div><div class="line"><span class="comment">//var spritesmith = require('gulp.spritesmith');</span></div><div class="line"> </div><div class="line"><span class="comment">// gulp.task('sprite', function () &#123;</span></div><div class="line"><span class="comment">//     return gulp.src('code/images/*.png')</span></div><div class="line"><span class="comment">//         .pipe(spritesmith(&#123;</span></div><div class="line"><span class="comment">//             imgName:'images/sprite20161010.png',  //保存合并后图片的地址</span></div><div class="line"><span class="comment">//             cssName:'css/sprite.css',   //保存合并后对于css样式的地址</span></div><div class="line"><span class="comment">//             padding:20,</span></div><div class="line"><span class="comment">//             algorithm:'binary-tree',</span></div><div class="line"><span class="comment">//         &#125;))</span></div><div class="line"><span class="comment">//         .pipe(gulp.dest('code/scss'));</span></div><div class="line"><span class="comment">// &#125;);</span></div><div class="line"></div><div class="line"></div><div class="line">gulp.task(<span class="string">'css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src(src.css)</div><div class="line">        .pipe(minifyCSS())</div><div class="line">        .pipe(rename(&#123;<span class="attr">suffix</span>: <span class="string">'.min'</span>&#125;))</div><div class="line">        .pipe(gulp.dest(<span class="string">"code/css"</span>))</div><div class="line">        .pipe(reload(&#123;<span class="attr">stream</span>: <span class="literal">true</span>&#125;));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line">gulp.task(<span class="string">'js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 1. 找到文件</span></div><div class="line">    <span class="keyword">return</span>  gulp.src(src.js)</div><div class="line">        <span class="comment">//2. 压缩文件</span></div><div class="line">        .pipe(uglify())</div><div class="line">        .pipe(rename(&#123;<span class="attr">suffix</span>: <span class="string">'.min'</span>&#125;))</div><div class="line">        <span class="comment">//3. 另存压缩后的文件</span></div><div class="line">        .pipe(gulp.dest(<span class="string">'code/dest'</span>))</div><div class="line">        .pipe(reload(&#123;<span class="attr">stream</span>: <span class="literal">true</span>&#125;));</div><div class="line">&#125;)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 压缩图片任务</span></div><div class="line"><span class="comment">// 在命令行输入 gulp images 启动此任务</span></div><div class="line">gulp.task(<span class="string">'images'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// 1. 找到图片</span></div><div class="line">        gulp.src(src.images)</div><div class="line">        <span class="comment">// 2. 压缩图片</span></div><div class="line">        .pipe($.imagemin())</div><div class="line">        <span class="comment">// 3. 另存图片</span></div><div class="line">        .pipe(gulp.dest(<span class="string">'images'</span>))</div><div class="line">        .pipe(reload(&#123;<span class="attr">stream</span>: <span class="literal">true</span>&#125;));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'serve'</span>]);</div></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>javascript</category>
        <category>gulp</category>
      </categories>
      <tags>
        <tag>原创</tag>
        <tag>gulp</tag>
      </tags>
  </entry>
  <entry>
    <title>Nodejs之实现代理</title>
    <url>/2020/04/04/node-proxy/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们上线一个网站，往往需要代理来完成需求，不然的话就只能使用 <code>IP</code> 加端口的方式来访问应用，目前基本上都会使用 <code>Nginx</code> 来完成反向代理，那么我们开发 <code>Node</code> 应用一定需要 <code>Nginx</code> 吗？肯定不是，我们完全可以通过 <code>Node</code> 来做，但是大多是不建议你用 <code>Node</code> 去处理，因为 <code>Nginx</code> 功能更强大，比如负载均衡，本文主要是帮你了解如何通过 <code>Node</code> 实现代理</p>
<h2 id="使用http-proxy"><a href="#使用http-proxy" class="headerlink" title="使用http-proxy"></a>使用http-proxy</h2><p>最简单的做法是拿已经写好的包直接使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ cnpm i http-proxy</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> proxy = <span class="built_in">require</span>(<span class="string">"http-proxy"</span>).createProxyServer(&#123;&#125;);</div><div class="line"></div><div class="line">server = <span class="built_in">require</span>(<span class="string">"http"</span>).createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> host = req.headers.host;</div><div class="line">  <span class="keyword">switch</span> (host) &#123;</div><div class="line">    <span class="keyword">case</span> <span class="string">"your domain"</span>:</div><div class="line">      proxy.web(req, res, &#123; <span class="attr">target</span>: <span class="string">"http://localhost:8000"</span> &#125;);</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">      res.writeHead(<span class="number">200</span>, &#123;</div><div class="line">        <span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span></div><div class="line">      &#125;);</div><div class="line">      res.end(<span class="string">"Welcome to my server!"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">"listening on port 80"</span>);</div><div class="line"></div><div class="line">server.listen(<span class="number">80</span>);</div></pre></td></tr></table></figure>
<p>上面👆代码监听 <code>80</code> 端口（如果你的服务器目前使用来 <code>Nginx</code>，暂用<code>80</code> 端口的话，需要先暂停 <code>Nginx</code> 服务），然后我们通过访问域名（前提是域名做好了解析），然后使用 <code>proxy.web</code>方法反向代理到当前服务下的 <code>8000</code> 端口，到此一个简单的服务完成了<br><a id="more"></a></p>
<h2 id="原生实现"><a href="#原生实现" class="headerlink" title="原生实现"></a>原生实现</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> reqUrl = url.parse(req.url);</div><div class="line">  <span class="keyword">const</span> target = url.parse(<span class="string">"http://localhost:3000"</span>);</div><div class="line">  <span class="keyword">const</span> options = &#123;</div><div class="line">    <span class="attr">hostname</span>: target.hostname,</div><div class="line">    <span class="attr">port</span>: target.port,</div><div class="line">    <span class="attr">path</span>: reqUrl.path,</div><div class="line">    <span class="attr">method</span>: req.method,</div><div class="line">    <span class="attr">headers</span>: req.headers</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  <span class="keyword">const</span> proxyReq = http.request(options);</div><div class="line"></div><div class="line">  proxyReq.on(<span class="string">"response"</span>, proxyRes =&gt; &#123;</div><div class="line">    res.writeHead(proxyRes.statusCode, proxyRes.headers);</div><div class="line">    proxyRes.pipe(res);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  req.pipe(proxyReq);</div><div class="line">&#125;</div><div class="line"></div><div class="line">http</div><div class="line">  .createServer()</div><div class="line">  .on(<span class="string">"request"</span>, request)</div><div class="line">  .listen(<span class="number">8003</span>);</div></pre></td></tr></table></figure>
<p>是不是很简单？通过访问 <code>8003</code> 端口，我们将请求转发到 <code>3000</code> 端口，可以复制当前代码尝试一下，前提是 <code>3000</code> 端口可以正常访问。当访问 <code>8003</code> 端口的时候，内部重新请求我们需要代理的地址，然后通过 <code>pipe</code> 返回转发后的数据</p>
<h2 id="http-proxy源码实现原理"><a href="#http-proxy源码实现原理" class="headerlink" title="http-proxy源码实现原理"></a>http-proxy源码实现原理</h2><p><a href="https://github.com/http-party/node-http-proxy/blob/master/lib/http-proxy/index.js#L96" target="_blank" rel="external">源码地址</a><br>执行 <code>proxy.web</code><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ProxyServer</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">  ...</div><div class="line"></div><div class="line">  this.web = <span class="keyword">this</span>.proxyRequest = createRightProxy(<span class="string">'web'</span>)(options);</div><div class="line"></div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/http-party/node-http-proxy/blob/master/lib/http-proxy/index.js#L72" target="_blank" rel="external">源码地址</a></p>
<p>内部关键代码执行了一下这段，<code>passes</code> 是一个数组方法，包含<code>deleteLength</code>、<code>timeout</code>、<code>XHeaders</code>、<code>stream</code>，关键点在 <code>stream</code>，其他基本是辅助作用，<code>XHeaders</code> 功能是设置 <code>x-forwarded-*</code> 这种 <code>header</code>，不过前提是 <code>option</code> 配置了 <code>xfwd</code> 才行，<code>timeout</code> 是设置超时时间的，<code>deleteLength</code> 只有请求方法是 <code>OPTIONS</code> 和 <code>DELETE</code> 才会执行<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">...</div><div class="line">for(<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; passes.length; i++) &#123;</div><div class="line">  <span class="keyword">if</span>(passes[i](req, res, requestOptions, head, <span class="keyword">this</span>, cbl)) &#123; <span class="comment">// passes can return a truthy value to halt the loop</span></div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/http-party/node-http-proxy/blob/master/lib/http-proxy/passes/web-incoming.js#L100" target="_blank" rel="external">源码地址</a><br><code>stream</code> 方法<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">deleteLength</span>: ....,</div><div class="line">  <span class="attr">timeout</span>: ...,</div><div class="line">  <span class="attr">XHeaders</span>: ...,</div><div class="line">  <span class="attr">stream</span>: <span class="function"><span class="keyword">function</span> <span class="title">stream</span>(<span class="params">req, res, options, _, server, clb</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// And we begin!</span></div><div class="line">    server.emit(<span class="string">'start'</span>, req, res, options.target || options.forward);</div><div class="line"></div><div class="line">    <span class="keyword">var</span> agents = options.followRedirects ? followRedirects : nativeAgents;</div><div class="line">    <span class="keyword">var</span> http = agents.http;</div><div class="line">    <span class="keyword">var</span> https = agents.https;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(options.forward) &#123;</div><div class="line">      <span class="comment">// If forward enable, so just pipe the request</span></div><div class="line">      <span class="keyword">var</span> forwardReq = (options.forward.protocol === <span class="string">'https:'</span> ? https : http).request(</div><div class="line">        common.setupOutgoing(options.ssl || &#123;&#125;, options, req, <span class="string">'forward'</span>)</div><div class="line">      );</div><div class="line"></div><div class="line">      <span class="comment">// error handler (e.g. ECONNRESET, ECONNREFUSED)</span></div><div class="line">      <span class="comment">// Handle errors on incoming request as well as it makes sense to</span></div><div class="line">      <span class="keyword">var</span> forwardError = createErrorHandler(forwardReq, options.forward);</div><div class="line">      req.on(<span class="string">'error'</span>, forwardError);</div><div class="line">      forwardReq.on(<span class="string">'error'</span>, forwardError);</div><div class="line"></div><div class="line">      (options.buffer || req).pipe(forwardReq);</div><div class="line">      <span class="keyword">if</span>(!options.target) &#123; <span class="keyword">return</span> res.end(); &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Request initalization</span></div><div class="line">    <span class="keyword">var</span> proxyReq = (options.target.protocol === <span class="string">'https:'</span> ? https : http).request(</div><div class="line">      common.setupOutgoing(options.ssl || &#123;&#125;, options, req)</div><div class="line">    );</div><div class="line"></div><div class="line">    <span class="comment">// Enable developers to modify the proxyReq before headers are sent</span></div><div class="line">    proxyReq.on(<span class="string">'socket'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">socket</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span>(server) &#123; server.emit(<span class="string">'proxyReq'</span>, proxyReq, req, res, options); &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">// allow outgoing socket to timeout so that we could</span></div><div class="line">    <span class="comment">// show an error page at the initial request</span></div><div class="line">    <span class="keyword">if</span>(options.proxyTimeout) &#123;</div><div class="line">      proxyReq.setTimeout(options.proxyTimeout, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">          proxyReq.abort();</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Ensure we abort proxy if request is aborted</span></div><div class="line">    req.on(<span class="string">'aborted'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      proxyReq.abort();</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">// handle errors in proxy and incoming request, just like for forward proxy</span></div><div class="line">    <span class="keyword">var</span> proxyError = createErrorHandler(proxyReq, options.target);</div><div class="line">    req.on(<span class="string">'error'</span>, proxyError);</div><div class="line">    proxyReq.on(<span class="string">'error'</span>, proxyError);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createErrorHandler</span>(<span class="params">proxyReq, url</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">proxyError</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (req.socket.destroyed &amp;&amp; err.code === <span class="string">'ECONNRESET'</span>) &#123;</div><div class="line">          server.emit(<span class="string">'econnreset'</span>, err, req, res, url);</div><div class="line">          <span class="keyword">return</span> proxyReq.abort();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (clb) &#123;</div><div class="line">          clb(err, req, res, url);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          server.emit(<span class="string">'error'</span>, err, req, res, url);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    (options.buffer || req).pipe(proxyReq);</div><div class="line"></div><div class="line">    proxyReq.on(<span class="string">'response'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">proxyRes</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span>(server) &#123; server.emit(<span class="string">'proxyRes'</span>, proxyRes, req, res); &#125;</div><div class="line"></div><div class="line">      <span class="keyword">if</span>(!res.headersSent &amp;&amp; !options.selfHandleResponse) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; web_o.length; i++) &#123;</div><div class="line">          <span class="keyword">if</span>(web_o[i](req, res, proxyRes, options)) &#123; <span class="keyword">break</span>; &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (!res.finished) &#123;</div><div class="line">        <span class="comment">// Allow us to listen when the proxy has completed</span></div><div class="line">        proxyRes.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">          <span class="keyword">if</span> (server) server.emit(<span class="string">'end'</span>, req, res, proxyRes);</div><div class="line">        &#125;);</div><div class="line">        <span class="comment">// We pipe to the response unless its expected to be handled by the user</span></div><div class="line">        <span class="keyword">if</span> (!options.selfHandleResponse) proxyRes.pipe(res);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (server) server.emit(<span class="string">'end'</span>, req, res, proxyRes);</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>关键代码<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Request initalization</span></div><div class="line"><span class="keyword">var</span> proxyReq = (options.target.protocol === <span class="string">'https:'</span> ? https : http).request(</div><div class="line">  common.setupOutgoing(options.ssl || &#123;&#125;, options, req)</div><div class="line">);</div><div class="line">(options.buffer || req).pipe(proxyReq);</div><div class="line">proxyReq.on(<span class="string">'response'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">proxyRes</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span>(!res.headersSent &amp;&amp; !options.selfHandleResponse) &#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; web_o.length; i++) &#123;</div><div class="line">      <span class="keyword">if</span>(web_o[i](req, res, proxyRes, options)) &#123; <span class="keyword">break</span>; &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (!res.finished) &#123;</div><div class="line">    <span class="comment">// We pipe to the response unless its expected to be handled by the user</span></div><div class="line">    <span class="keyword">if</span> (!options.selfHandleResponse) proxyRes.pipe(res);</div><div class="line">  &#125; </div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>实现大致和我们之前写得差不多，但是他考虑得更多，支持 <code>https</code>，错误处理也做得很好，已经很成熟了</p>
<h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>至此就基本讲完了，本文意在实操，理论讲解涉及极少，在写一个功能的时候，还是要多了解一下内部的原理知识，能帮助你更好的理解，如果错误还望指正。</p>
<p>本文地址 <a href="http://www.wclimb.site/2020/04/04/node-proxy/">Nodejs之实现代理</a></p>
]]></content>
      <categories>
        <category>Node</category>
        <category>代理</category>
      </categories>
      <tags>
        <tag>原创</tag>
        <tag>javascript</tag>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>Nodejs之进程</title>
    <url>/2020/04/15/node-process/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>本文大部分借鉴自深入浅出Node.js</p>
</blockquote>
<p>本文开始讲一下 <code>Node</code> 的进程，<code>Node</code> 是建立在 <code>V8</code> 引擎之上的，程序基本上是运行在单进程的单线程上的，那么这样就会导致机器的资源没有被合理的利用，<code>CPU</code> 使用率低，所以我们需要多开进程，充分利用多核 <code>CPU</code> 服务器，但是多开进程又会面临进程管理方面的问题。下面我们来具体说说。</p>
<h2 id="单线程？"><a href="#单线程？" class="headerlink" title="单线程？"></a>单线程？</h2><p>我们知道 <code>JavaScript</code> 是单线程的，<code>Node</code> 也是？，<code>Node</code> 其实不是，<code>Node</code> 并非真正的单线程架构，<code>Node</code> 自身还有 一定的 <code>I/O</code> 线程存在，这些 <code>I/O</code> 线程由底层 <code>libuv</code> 处理，这部分线程对于 <code>JavaScript</code> 开发者而言是透明的，只在 <code>C++</code> 扩展开发时才会关注到。<code>JavaScript</code> 代码永远运行在 <code>V8</code> 上，是单线程的。</p>
<h2 id="创建多进程"><a href="#创建多进程" class="headerlink" title="创建多进程"></a>创建多进程</h2><p><code>Node</code> 提供了创建进程的方法，<code>child_process</code>，这里我们使用 <code>fork</code> 方法，它还有其他几个方法这里就不作介绍了<br><code>master.js</code><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> fork = <span class="built_in">require</span>(<span class="string">"child_process"</span>).fork</div><div class="line"><span class="keyword">const</span> cpus = <span class="built_in">require</span>(<span class="string">'os'</span>).cpus();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cpus.length; i++) &#123;</div><div class="line">  fork(<span class="string">'./worker.js'</span>); </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到我们获取当前机器的 <code>cpu</code> 数量，然后批量创建子进程，我们新建 <code>worker.js</code>，内容如下<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line">process.title = <span class="string">"worker"</span>;</div><div class="line"><span class="built_in">console</span>.log(process.pid)</div><div class="line">http</div><div class="line">  .createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    res.writeHead(<span class="number">200</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span> &#125;);</div><div class="line">    res.end(<span class="string">"Hello World\n"</span>);</div><div class="line">  &#125;)</div><div class="line">  .listen(<span class="built_in">Math</span>.round((<span class="number">1</span> + <span class="built_in">Math</span>.random()) * <span class="number">1000</span>);</div></pre></td></tr></table></figure></p>
<p>启动<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">node master.js</div></pre></td></tr></table></figure></p>
<p>控制台打印的pid<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">35115</div><div class="line">35116</div><div class="line">35117</div><div class="line">35118</div><div class="line">35119</div><div class="line">35120</div><div class="line">...</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">            +--------+         </div><div class="line">            | Master | &lt;------ master.js</div><div class="line">            +--------+        </div><div class="line">            /   |     \</div><div class="line">          /     |       \</div><div class="line">        /       |        \ &lt;----复制</div><div class="line">      /         |          \</div><div class="line">    v           v            v</div><div class="line">+--------+   +--------+   +---------+</div><div class="line">| 工作进程 |  | 工作进程 |   | 工作进程 | &lt;------ worker.js</div><div class="line">+--------+   +--------+   +---------+</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="多进程通信"><a href="#多进程通信" class="headerlink" title="多进程通信"></a>多进程通信</h2><p>进程通信使用 <code>send</code> 这个方法，如下<br><code>master</code> -&gt; <code>worker</code> 传递信息<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> fork = <span class="built_in">require</span>(<span class="string">"child_process"</span>).fork;</div><div class="line"><span class="keyword">var</span> cpus = <span class="built_in">require</span>(<span class="string">"os"</span>).cpus();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cpus.length; i++) &#123;</div><div class="line">  <span class="keyword">const</span> worker = fork(<span class="string">"./worker.js"</span>);</div><div class="line">  worker.send(<span class="string">"hello，I'm from master"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>worker</code>子进程接收<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">process.on(<span class="string">"message"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">message</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"worker accept:"</span>, message);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>运行结果如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">worker accept: hello，I&apos;m from master</div><div class="line">worker accept: hello，I&apos;m from master</div><div class="line">worker accept: hello，I&apos;m from master</div></pre></td></tr></table></figure></p>
<p><code>worker</code> -&gt; <code>master</code>传递信息<br><code>worker</code> 子进程发送消息<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">process.send(<span class="string">"hello，I'm from worker"</span>);</div></pre></td></tr></table></figure></p>
<p><code>master</code>接收<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> fork = <span class="built_in">require</span>(<span class="string">"child_process"</span>).fork;</div><div class="line"><span class="keyword">var</span> cpus = <span class="built_in">require</span>(<span class="string">"os"</span>).cpus();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cpus.length; i++) &#123;</div><div class="line">  <span class="keyword">const</span> worker = fork(<span class="string">"./worker.js"</span>);</div><div class="line">  worker.on(<span class="string">'message'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"master accept:"</span>, message);</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>主进程master收到消息，打印如下<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">master accept: hello，I&apos;m from worker</div><div class="line">master accept: hello，I&apos;m from worker</div><div class="line">master accept: hello，I&apos;m from worker</div></pre></td></tr></table></figure></p>
<h3 id="进程间通信原理"><a href="#进程间通信原理" class="headerlink" title="进程间通信原理"></a>进程间通信原理</h3><p><code>IPC</code> 的全称是<code>Inter-Process Communication</code>，即进程间通信。进程间通信的目的是为了让不同的进程能够互相访问资源并进行协调工作。实现进程间通信的技术有很多，如命名管道、匿名管 道、<code>socket</code>、信号量、共享内存、消息队列、<code>Domain Socket</code>等。<code>Node</code> 中实现 <code>IPC</code> 通道的是管道(<code>pipe</code>) 技术。但此管道非彼管道，在 <code>Node</code> 中管道是个抽象层面的称呼，具体细节实现由 <code>libuv</code> 提供，在 <code>Windows</code>下由命名管道(<code>named pipe</code>)实现，<code>*nix</code> 系统则采用 <code>Unix Domain Socket</code> 实现。表现在应用层上的进程间通信只有简单的 <code>message</code> 事件和 <code>send()</code> 方法，接口十分简洁和消息化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">          IPC创建和实现示意图</div><div class="line">+--------+                  +--------+             </div><div class="line">| 父进程  | &lt;---- IPC ----&gt;  | 子进程  | </div><div class="line">+--------+        |         +--------+    </div><div class="line">                  |</div><div class="line">                  |</div><div class="line">                  v</div><div class="line">              +--------+                  </div><div class="line">              | libuv  |</div><div class="line">              |  管道   |</div><div class="line">              +--------+</div><div class="line">              /        \</div><div class="line">            /            \</div><div class="line">          /                \</div><div class="line">        /                   \</div><div class="line">       v                     v</div><div class="line">  +--------+        +----------------+</div><div class="line">  | windows |       |     *nix       |  </div><div class="line">  | 命名管道 |       | Domain Scocket |  </div><div class="line">  +--------+        +----------------+</div></pre></td></tr></table></figure>
<p>父进程在实际创建子进程之前，会创建 <code>IPC</code> 通道并监听它，然后才真正创建出子进程，并通过环境变量(<code>NODE_CHANNEL_FD</code>)告诉子进程这个 <code>IPC</code> 通道的文件描述符。子进程在启动的过程中，根据文件描述符去连接这个已存在的 <code>IPC</code> 通道，从而完成父子进程之间的连接。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">          创建IPC管道的步骤示意图</div><div class="line">+--------+                  +--------+             </div><div class="line">| 父进程  | ------生成-----&gt;  | 子进程  | </div><div class="line">+--------+                  +--------+    </div><div class="line">    \                           /</div><div class="line">     \                         / </div><div class="line">    监听/接受                 连接</div><div class="line">       \                     /</div><div class="line">        \                   /</div><div class="line">         \   +--------+    /                </div><div class="line">          &gt;  |   IPC  |  &lt;</div><div class="line">             +--------+</div></pre></td></tr></table></figure>
<p>建立连接之后的父子进程就可以自由地通信了。由于 <code>IPC</code> 通道是用命名管道或 <code>Domain Socket</code> 创建的，它们与网络 <code>socket</code> 的行为比较类似，属于双向通信。不同的是它们在系统内核中就完成了进程间的通信，而不用经过实际的网络层，非常高效。在 <code>Node</code> 中，<code>IPC</code> 通道被抽象为 <code>Stream</code> 对象，在调用 <code>send()</code> 时发送数据(类似于<code>write()</code>)，接收到的消息会通过 <code>message</code> 事件(类似于 <code>data</code> ) 触发给应用层。</p>
<h2 id="句柄传递"><a href="#句柄传递" class="headerlink" title="句柄传递"></a>句柄传递</h2><p>我们可以看到每创建一个进程就会随机监听一个端口，那么能不能让他们都监听一个端口？我们试试，把 <code>Math.round((1 + Math.random()) * 1000</code> 改为3000，让他们都监听3000端口<br>运行结果如下，报3000端口占用，只能开启一个3000端口的进程<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">events.js:<span class="number">183</span></div><div class="line">      <span class="keyword">throw</span> er; <span class="comment">// Unhandled 'error' event</span></div><div class="line">      ^</div><div class="line"><span class="built_in">Error</span>: listen EADDRINUSE :::<span class="number">3000</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>如果我们像之前一样随机分配端口，然后主进程监听80端口，将请求分别代理到不同端口的进程上，这样做当然可以，甚至可以做适当的负载均衡，但是进程每接收到一个连接，就会用掉一个文件描述符(fd)，而后代理进程又连接到子进程又会消耗掉一个文件描述符，操作系统的文件描述符是有限的。</p>
</blockquote>
<p>为了解决这个问题，我们需要使用发送句柄功能，这个功能在版本 <code>v0.5.9</code> 引入。<code>send()</code> 方法除了能通过 <code>IPC</code> 发送数据外，还能发送句柄，第二个可选参数就是句柄，如下所示<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">worker.send(message, [sendHandle])</div></pre></td></tr></table></figure></p>
<p>那什么是句柄？句柄是一种可以用来<strong>标识资源的引用</strong>，它的内部包含了指向对象的文件描述符。比如句柄可以用来标识一个服务器端 <code>socket</code> 对象、一个客户端 <code>socket</code> 对象、一个 <code>UDP</code> 套接字、 一个管道等。</p>
<p>修改主进程代码 <code>master</code><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> child = <span class="built_in">require</span>(<span class="string">"child_process"</span>).fork(<span class="string">"worker.js"</span>);</div><div class="line"><span class="keyword">const</span> server = <span class="built_in">require</span>(<span class="string">"net"</span>).createServer();</div><div class="line">server.on(<span class="string">"connection"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">socket</span>) </span>&#123;</div><div class="line">  socket.end(<span class="string">"handled by parent\n"</span>);</div><div class="line">&#125;);</div><div class="line">server.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  child.send(<span class="string">"server"</span>, server);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>子进程代码worker<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">process.on(<span class="string">"message"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">message, server</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (message === <span class="string">"server"</span>) &#123;</div><div class="line">    server.on(<span class="string">"connection"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">socket</span>) </span>&#123;</div><div class="line">      socket.end(<span class="string">"handled by child\n"</span>);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>启动服务<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">node master.js</div></pre></td></tr></table></figure></p>
<p>然后新建一个命令行窗口请求刚刚的服务<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">➜ curl &quot;http://127.0.0.1:3000/&quot;</div><div class="line">handled by parent</div><div class="line">➜ curl &quot;http://127.0.0.1:3000/&quot;</div><div class="line">handled by child</div><div class="line">➜ curl &quot;http://127.0.0.1:3000/&quot;</div><div class="line">handled by parent</div></pre></td></tr></table></figure></p>
<p>你会发现程序随机被主进程或者子进程处理</p>
<p>我们再多 <code>fork</code> 出一个子进程，刚刚只 <code>fork</code> 了一个，修改代码<br>master.js<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> cp = <span class="built_in">require</span>(<span class="string">'child_process'</span>); </div><div class="line"><span class="keyword">const</span> child1 = cp.fork(<span class="string">'worker.js'</span>); </div><div class="line"><span class="keyword">const</span> child2 = cp.fork(<span class="string">'worker.js'</span>);</div><div class="line"><span class="keyword">const</span> server = <span class="built_in">require</span>(<span class="string">'net'</span>).createServer(); </div><div class="line">server.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;</div><div class="line">  socket.end(<span class="string">'handled by parent\n'</span>); </div><div class="line">&#125;);</div><div class="line">server.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </div><div class="line">  child1.send(<span class="string">'server'</span>, server); </div><div class="line">  child2.send(<span class="string">'server'</span>, server);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>worker.js<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"><span class="keyword">const</span> server = http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">  res.writeHead(<span class="number">200</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span> &#125;);</div><div class="line">  res.end(<span class="string">"handled by child, pid is "</span> + process.pid + <span class="string">"\n"</span>);</div><div class="line">&#125;);</div><div class="line">process.on(<span class="string">"message"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">message, tcp</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (message === <span class="string">"server"</span>) &#123;</div><div class="line">    tcp.on(<span class="string">"connection"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">socket</span>) </span>&#123;</div><div class="line">      server.emit(<span class="string">"connection"</span>, socket);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>再用 <code>curl</code> 测试我们的服务，结果如下<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">➜  curl &quot;http://127.0.0.1:3000/&quot;</div><div class="line">handled by child, pid is 35851</div><div class="line">➜  curl &quot;http://127.0.0.1:3000/&quot;</div><div class="line">handled by child, pid is 35852</div><div class="line">➜  curl &quot;http://127.0.0.1:3000/&quot;</div><div class="line">handled by parent</div><div class="line">➜  curl &quot;http://127.0.0.1:3000/&quot;</div><div class="line">handled by child, pid is 35852</div><div class="line">➜  curl &quot;http://127.0.0.1:3000/&quot;</div><div class="line">handled by child, pid is 35851</div></pre></td></tr></table></figure></p>
<p>测试的结果是每次出现的结果都可能不同，结果可能被父进程处理，也可能被不同的子进程处理。并且这是在 <code>TCP</code> 层面上完成的事情，我们尝试将其转化到 <code>HTTP</code> 层面来试试。对于主进程而言，我们甚至想要它更轻量一点，那么是否将服务器句柄发送给子进程之后，就可以关掉服务器的监听，让子进程来处理请求呢?<br>我们对主进程进行改动，如下所示:<br><code>master.js</code><br><figure class="highlight diff"><table><tr><td class="code"><pre><div class="line">const cp = require('child_process'); </div><div class="line">const child1 = cp.fork('worker.js'); </div><div class="line">const child2 = cp.fork('worker.js');</div><div class="line">const server = require('net').createServer(); </div><div class="line">server.on('connection', function (socket) &#123;</div><div class="line">  socket.end('handled by parent\n'); </div><div class="line">&#125;);</div><div class="line">server.listen(3000, function () &#123; </div><div class="line">  child1.send('server', server); </div><div class="line">  child2.send('server', server);</div><div class="line"><span class="addition">+  server.close();</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>再次重启发现不会出现 <code>handled by parent</code> 的打印信息了，这样所有的请求都交给子进程处理了</p>
<h3 id="句柄传递是对象传递吗？"><a href="#句柄传递是对象传递吗？" class="headerlink" title="句柄传递是对象传递吗？"></a>句柄传递是对象传递吗？</h3><p>经过上面的操作，我们应用层的表象明显感觉就是对象的传递，但是其实不是，在传递句柄之前，会进行一层封装，<code>send()</code> 方法在将消息发送到 <code>IPC</code> 管道前，将消息组装成两个对象，一个参数是 <code>handle</code>，另一个是<code>message</code>。<code>message</code> 参数如下所示<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">cmd</span>: <span class="string">'NODE_HANDLE'</span>, </div><div class="line">  <span class="attr">type</span>: <span class="string">'net.Server'</span>, </div><div class="line">  <span class="attr">msg</span>: message</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>发送到 <code>IPC</code> 管道的实际上是我们要发送的句柄文件描述符，文件描述符实际上是一个整数值。这个 <code>message</code> 对象在写入到 <code>IPC</code> 管道时也会通过 <code>JSON.stringify()</code> 进行序列化。所以最终发送到 <code>IPC</code> 通道中的信息都是字符串，<code>send()</code> 方法能发送消息和句柄并不意味着它能发送任意对象。</p>
<p>连接了 <code>IPC</code> 通道的子进程可以读取到父进程发来的消息，将字符串通过 <code>JSON.parse()</code> 解析还原为对象后，才触发 <code>message</code> 事件将消息体传递给应用层使用。在这个过程中，消息对象还要被进行过滤处理，<code>message.cmd</code> 的值如果以 <code>NODE_</code> 为前缀，它将响应一个内部事件 <code>internalMessage</code>。<br>如果 <code>message.cmd</code> 值为 <code>NODE_HANDLE</code>，它将取出 <code>message.type</code> 值和得到的文件描述符一起还原出一个对应的对象</p>
<h3 id="为什么句柄就可以解决端口占用"><a href="#为什么句柄就可以解决端口占用" class="headerlink" title="为什么句柄就可以解决端口占用"></a>为什么句柄就可以解决端口占用</h3><p>按照之前的做法的话，他们不同进程之间的文件描述符是不一样的，由于独立启动的进程互相之间并不知道文件描述符，所以监听相同端口时就会失败。如果使用句柄传递的方式，他们的文件描述符是一样的，所以监听相同端口不会引起异常</p>
<h3 id="文件描述符是什么？"><a href="#文件描述符是什么？" class="headerlink" title="文件描述符是什么？"></a>文件描述符是什么？</h3><p>文件描述符（<code>File descriptor</code>）在形式上是一个非负整数。实际上，它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程返回一个文件描述符。在程序设计中，一些涉及底层的程序编写往往会围绕着文件描述符展开。但是文件描述符这一概念往往只适用于 <code>UNIX</code>、<code>Linux</code> 这样的操作系统。在<code>UNIX</code>、<code>Linux</code> 的系统调用中，大量的系统调用都是依赖于文件描述符</p>
<h2 id="异常重启"><a href="#异常重启" class="headerlink" title="异常重启"></a>异常重启</h2><p>我们上面讲了子进程的 <code>send</code> 方法和 <code>message</code> 事件，除了 <code>message</code> 事件外，还有如下事件</p>
<ul>
<li><code>error</code>: 当子进程无法被复制创建、无法被杀死、无法发送消息时会触发该事件</li>
<li><code>exit</code>: 子进程退出时触发该事件，子进程如果是正常退出，这个事件的第一个参数为退出码，否则为 <code>null</code>。如果进程是通过 <code>kill()</code> 方法被杀死的，会得到第二个参数，它表示杀死进程时的信号。</li>
<li><code>close</code>: 在子进程的标准输入输出流中止时触发该事件，参数与 <code>exit</code> 相同。</li>
<li><code>disconnect</code>: 在父进程或子进程中调用 <code>disconnect()</code> 方法时触发该事件，在调用该方法时将关闭监听IPC通道</li>
</ul>
<p>修改代码<br><code>master.js</code><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> fork = <span class="built_in">require</span>(<span class="string">"child_process"</span>).fork;</div><div class="line"><span class="keyword">const</span> cpus = <span class="built_in">require</span>(<span class="string">"os"</span>).cpus();</div><div class="line"><span class="keyword">const</span> server = <span class="built_in">require</span>(<span class="string">"net"</span>).createServer();</div><div class="line">server.listen(<span class="number">3000</span>);</div><div class="line"><span class="keyword">const</span> workers = &#123;&#125;;</div><div class="line"><span class="keyword">const</span> createWorker = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> worker = fork(__dirname + <span class="string">"/worker.js"</span>); <span class="comment">// 退出时重新启动新的进程</span></div><div class="line">  worker.on(<span class="string">"exit"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Worker "</span> + worker.pid + <span class="string">" exited."</span>);</div><div class="line">    <span class="keyword">delete</span> workers[worker.pid];</div><div class="line">    createWorker();</div><div class="line">  &#125;);</div><div class="line">  <span class="comment">// 句柄转发</span></div><div class="line">  worker.send(<span class="string">"server"</span>, server);</div><div class="line">  workers[worker.pid] = worker;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Create worker. pid: "</span> + worker.pid);</div><div class="line">&#125;;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cpus.length; i++) &#123;</div><div class="line">  createWorker();</div><div class="line">&#125;</div><div class="line"><span class="comment">// 进程自己退出时，让所有工作进程退出</span></div><div class="line">process.on(<span class="string">"exit"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> pid <span class="keyword">in</span> workers) &#123;</div><div class="line">    workers[pid].kill();</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>测试运行<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">➜  node master</div><div class="line">Create worker. pid: 36736</div><div class="line">Create worker. pid: 36737</div><div class="line">Create worker. pid: 36738</div><div class="line">Create worker. pid: 36739</div><div class="line">Create worker. pid: 36740</div><div class="line">Create worker. pid: 36741</div><div class="line">Create worker. pid: 36742</div><div class="line">Create worker. pid: 36743</div><div class="line">Create worker. pid: 36744</div><div class="line">Create worker. pid: 36745</div><div class="line">Create worker. pid: 36746</div><div class="line">Create worker. pid: 36747</div></pre></td></tr></table></figure></p>
<p>我们使用命令行杀死一个进程<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">kill 36747</div></pre></td></tr></table></figure></p>
<p>36747进程退出后，再看看刚刚的命令行窗口，是不是多了两段，杀死之后又重新创建了一个进程，这里主要是使用了事件 <code>exit</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Worker 36747 exited.</div><div class="line">Create worker. pid: 36761</div></pre></td></tr></table></figure></p>
<p>但是实际开发中，我们都不会主动去杀死某个进程，大多数都是因为程序错误，所以我们需要处理子进程的异常，修改 <code>worker.js</code><br><figure class="highlight diff"><table><tr><td class="code"><pre><div class="line">const http = require("http");</div><div class="line">const server = http.createServer(function(req, res) &#123;</div><div class="line">  res.writeHead(200, &#123; "Content-Type": "text/plain" &#125;);</div><div class="line">  res.end("handled by child, pid is " + process.pid + "\n");</div><div class="line">&#125;);</div><div class="line">let worker;</div><div class="line">process.on("message", function(message, tcp) &#123;</div><div class="line">  if (message <span class="comment">=== "server") &#123;</span></div><div class="line">    worker = tcp;</div><div class="line">    worker.on("connection", function(socket) &#123;</div><div class="line">      server.emit("connection", socket);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"><span class="addition">+process.on("uncaughtException", function() &#123;</span></div><div class="line"><span class="addition">+  // 停止接收新的连接</span></div><div class="line"><span class="addition">+  worker.close(function() &#123;</span></div><div class="line"><span class="addition">+    // 所有已有连接断开后，退出进程</span></div><div class="line"><span class="addition">+    process.exit(1);</span></div><div class="line"><span class="addition">+  &#125;);</span></div><div class="line"><span class="addition">+&#125;);</span></div></pre></td></tr></table></figure></p>
<p>上述代码的处理流程是，一旦有未捕获的异常出现，工作进程就会立即停止接收新的连接; 当所有连接断开后，退出进程。主进程在侦听到工作进程的 <code>exit</code> 后，将会立即启动新的进程服务， 以此保证整个集群中总是有进程在为用户服务的</p>
<p>等等，刚刚一个进程程序出错了之后我们关闭了，那么少了一个进程，<code>CPU</code>没有完全利用，我们需要通知主进程去重新创建一个进程，这里给主进程发送自杀信号</p>
<p>worker<br><figure class="highlight diff"><table><tr><td class="code"><pre><div class="line">process.on("uncaughtException", function() &#123;</div><div class="line"><span class="addition">+  process.send(&#123;act: 'suicide'&#125;);</span></div><div class="line">  // 停止接收新的连接</div><div class="line">  worker.close(function() &#123;</div><div class="line">    // 所有已有连接断开后，退出进程</div><div class="line">    process.exit(1);</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>master.js主进程接收自杀信号<br><figure class="highlight diff"><table><tr><td class="code"><pre><div class="line">const fork = require("child_process").fork;</div><div class="line">const cpus = require("os").cpus();</div><div class="line">const server = require("net").createServer();</div><div class="line">server.listen(3000);</div><div class="line">const workers = &#123;&#125;;</div><div class="line">const createWorker = function() &#123;</div><div class="line">  const worker = fork(__dirname + "/worker.js"); // 退出时重新启动新的进程</div><div class="line"><span class="addition">+  worker.on("message", function(message) &#123;</span></div><div class="line"><span class="addition">+    if (message.act === "suicide") &#123;</span></div><div class="line"><span class="addition">+      createWorker();</span></div><div class="line"><span class="addition">+    &#125;</span></div><div class="line"><span class="addition">+  &#125;);</span></div><div class="line">  worker.on("exit", function() &#123;</div><div class="line">    console.log("Worker " + worker.pid + " exited.");</div><div class="line">    delete workers[worker.pid];</div><div class="line">    createWorker();</div><div class="line">  &#125;);</div><div class="line">  // 句柄转发</div><div class="line">  worker.send("server", server);</div><div class="line">  workers[worker.pid] = worker;</div><div class="line">  console.log("Create worker. pid: " + worker.pid);</div><div class="line">&#125;;</div><div class="line">for (let i = 0; i &lt; cpus.length; i++) &#123;</div><div class="line">  createWorker();</div><div class="line">&#125;</div><div class="line">// 进程自己退出时，让所有工作进程退出</div><div class="line">process.on("exit", function() &#123;</div><div class="line">  for (let pid in workers) &#123;</div><div class="line">    workers[pid].kill();</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>我们模拟一个异常，修改子进程代码<br><figure class="highlight diff"><table><tr><td class="code"><pre><div class="line">...</div><div class="line">const server = http.createServer(function(req, res) &#123;</div><div class="line">  res.writeHead(200, &#123; "Content-Type": "text/plain" &#125;);</div><div class="line">  res.end("handled by child, pid is " + process.pid + "\n");</div><div class="line"><span class="addition">+  throw new Error("throw exception");</span></div><div class="line">&#125;);</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>然后启动所有的进程，如下<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">➜  node master</div><div class="line">Create worker. pid: 37169</div><div class="line">Create worker. pid: 37170</div><div class="line">Create worker. pid: 37171</div><div class="line">Create worker. pid: 37172</div><div class="line">Create worker. pid: 37173</div><div class="line">Create worker. pid: 37174</div><div class="line">Create worker. pid: 37175</div><div class="line">Create worker. pid: 37176</div><div class="line">Create worker. pid: 37177</div><div class="line">Create worker. pid: 37178</div><div class="line">Create worker. pid: 37179</div><div class="line">Create worker. pid: 37180</div><div class="line">Create worker. pid: 37185</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">➜  curl http://127.0.0.1:3000/</div><div class="line">handled by child, pid is 37173</div></pre></td></tr></table></figure>
<p>回头看看<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Worker 37173 exited.</div><div class="line">Create worker. pid: 37189</div></pre></td></tr></table></figure></p>
<p>嗯，工作正常了</p>
<h2 id="状态共享"><a href="#状态共享" class="headerlink" title="状态共享"></a>状态共享</h2><h3 id="第三方数据存储"><a href="#第三方数据存储" class="headerlink" title="第三方数据存储"></a>第三方数据存储</h3><p>解决数据共享最直接、简单的方式就是通过第三方来进行数据存储，比如将数据存放到数据库、磁盘文件、缓存服务(如 <code>Redis</code> )中，所有工作进程启动时将其读取进内存中。但这种方式存在的问题是如果数据发生改变，还需要一种机制通知到各个子进程，使得它们的内部状态也得 到更新。<br>实现状态同步的机制有两种，一种是各个子进程去向第三方进行，定时轮询定时轮询带来的问题是轮询时间不能过密，如果子进程过多，会形成并发处理，如果数据没有发生改变，这些轮询会没有意义，白白增加查询状态的开销。如果轮询时间过长，数据发生改 变时，不能及时更新到子进程中，会有一定的延迟。</p>
<h3 id="主动通知"><a href="#主动通知" class="headerlink" title="主动通知"></a>主动通知</h3><p>一种改进的方式是当数据发生更新时，主动通知子进程。当然，即使是主动通知，也需要一种机制来及时获取数据的改变。这个过程仍然不能脱离轮询，但我们可以减少轮询的进程数量， 我们将这种用来发送通知和查询状态是否更改的进程叫做通知进程。为了不混合业务逻辑，可以将这个进程设计为只进行轮询和通知，不处理任何业务逻辑。<br>这种推送机制如果按进程间信号传递，在跨多台服务器时会无效，是故可以考虑采用 <code>TCP</code> 或 <code>UDP</code>的方案。进程在启动时从通知服务处除了读取第一次数据外，还将进程信息注册到通知服务处。一旦通过轮询发现有数据更新后，根据注册信息，将更新后的数据发送给工作进程。由于不 涉及太多进程去向同一地方进行状态查询，状态响应处的压力不至于太过巨大，单一的通知服务轮询带来的压力并不大，所以可以将轮询时间调整得较短，一旦发现更新，就能实时地推送到各个子进程中。</p>
<h3 id="Egg的agent模式"><a href="#Egg的agent模式" class="headerlink" title="Egg的agent模式"></a>Egg的agent模式</h3><p><a href="https://eggjs.org/zh-cn/core/cluster-and-ipc.html#agent-%E6%9C%BA%E5%88%B6" target="_blank" rel="external">https://eggjs.org/zh-cn/core/cluster-and-ipc.html#agent-%E6%9C%BA%E5%88%B6</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">                +--------+          +-------+</div><div class="line">                | Master |&lt;--------&gt;| Agent |</div><div class="line">                +--------+          +-------+</div><div class="line">                ^   ^    ^</div><div class="line">               /    |     \</div><div class="line">             /      |       \</div><div class="line">           /        |         \</div><div class="line">         v          v          v</div><div class="line">+----------+   +----------+   +----------+</div><div class="line">| Worker 1 |   | Worker 2 |   | Worker 3 |</div><div class="line">+----------+   +----------+   +----------+</div></pre></td></tr></table></figure></p>
<ol>
<li><code>Master</code> 启动后先 <code>fork Agent</code> 进程</li>
<li><code>Agent</code> 初始化成功后，通过 <code>IPC</code> 通道通知 <code>Master</code></li>
<li><code>Master</code> 再 <code>fork</code> 多个 <code>App Worker</code></li>
<li><code>App Worker</code> 初始化成功，通知 <code>Master</code></li>
<li>所有的进程初始化成功后，<code>Master</code> 通知 <code>Agent</code> 和 <code>Worker</code> 应用启动成功</li>
</ol>
<p>另外，关于 Agent Worker 还有几点需要注意的是：</p>
<ul>
<li>由于 <code>App Worker</code> 依赖于 <code>Agent</code>，所以必须等 <code>Agent</code> 初始化完成后才能 <code>fork App Worker</code></li>
<li><code>Agent</code> 虽然是 <code>App Worker</code> 的『小秘』，但是业务相关的工作不应该放到 <code>Agent</code> 上去做，不然把她累垮了就不好了</li>
<li>由于 <code>Agent</code> 的特殊定位，我们应该保证它相对稳定。当它发生未捕获异常，框架不会像 <code>App Worker</code> 一样让他退出重启，而是记录异常日志、报警等待人工处理</li>
<li><code>Agent</code> 和普通 <code>App Worker</code> 挂载的 <code>API</code> 不完全一样，如何识别差异可查</li>
</ul>
<h2 id="Cluster"><a href="#Cluster" class="headerlink" title="Cluster"></a>Cluster</h2><p><code>Cluster</code> 这个放到最后来将比较合适，<code>Cluster</code> 的实现机制是基于 <code>child_process</code> 的，<code>Node</code>基于 <code>child_process</code> 进一步封装了一下，来看看怎么使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> cluster = <span class="built_in">require</span>(<span class="string">'cluster'</span>);</div><div class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">const</span> numCPUs = <span class="built_in">require</span>(<span class="string">'os'</span>).cpus().length;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (cluster.isMaster) &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`主进程 <span class="subst">$&#123;process.pid&#125;</span> 正在运行`</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 衍生工作进程。</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numCPUs; i++) &#123;</div><div class="line">    cluster.fork();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  cluster.on(<span class="string">'exit'</span>, (worker, code, signal) =&gt; &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`工作进程 <span class="subst">$&#123;worker.process.pid&#125;</span> 已退出`</span>);</div><div class="line">  &#125;);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="comment">// 工作进程可以共享任何 TCP 连接。</span></div><div class="line">  <span class="comment">// 在本例子中，共享的是 HTTP 服务器。</span></div><div class="line">  http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</div><div class="line">    res.writeHead(<span class="number">200</span>);</div><div class="line">    res.end(<span class="string">'你好世界\n'</span>);</div><div class="line">  &#125;).listen(<span class="number">8000</span>);</div><div class="line"></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`工作进程 <span class="subst">$&#123;process.pid&#125;</span> 已启动`</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行代码，则工作进程会共享 8000 端口：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">➜  node server.js</div><div class="line">主进程 3596 正在运行</div><div class="line">工作进程 4324 已启动</div><div class="line">工作进程 4520 已启动</div><div class="line">工作进程 6056 已启动</div><div class="line">工作进程 5644 已启动</div></pre></td></tr></table></figure></p>
<p>是不是比之前我们用 <code>child_process</code> 更简单？不过这里推荐使用 <code>setupMaster</code> 来 <code>fork</code> 子进程，官方示例中忽而判断 <code>cluster.isMaster</code>、忽而判断 <code>cluster.isWorker</code>，对于代码的可读性十分差，<code>setupMaster()</code> 这个 <code>API</code>，将主进程和工作进程从代码上完全剥离， 如同 <code>send()</code> 方法看起来直接将服务器从主进程发送到子进程那样神奇，剥离代码之后，甚至都感觉不到主进程中有任何服务器相关的代码<br>通过 <code>cluster.setupMaster()</code> 创建子进程而不是使用 <code>cluster.fork()</code>，程序结构不再凌乱，逻辑分明，代码的可读性和可维护性较好。<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> cluster = <span class="built_in">require</span>(<span class="string">'cluster'</span>);</div><div class="line">cluster.setupMaster(&#123;</div><div class="line">  <span class="attr">exec</span>: <span class="string">'worker.js'</span>,</div><div class="line">  <span class="attr">args</span>: [<span class="string">'--use'</span>, <span class="string">'https'</span>],</div><div class="line">  <span class="attr">silent</span>: <span class="literal">true</span></div><div class="line">&#125;);</div><div class="line">cluster.fork(); <span class="comment">// https 工作进程</span></div><div class="line">cluster.setupMaster(&#123;</div><div class="line">  <span class="attr">exec</span>: <span class="string">'worker.js'</span>,</div><div class="line">  <span class="attr">args</span>: [<span class="string">'--use'</span>, <span class="string">'http'</span>]</div><div class="line">&#125;);</div><div class="line">cluster.fork();</div></pre></td></tr></table></figure></p>
<p>在 <code>cluster</code> 模块应用中，一个主进程只能管理一组工作进程<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">            +--------+         </div><div class="line">            | Master |</div><div class="line">            +--------+        </div><div class="line">            /   |     \</div><div class="line">          /     |       \</div><div class="line">        /       |         \</div><div class="line">      /         |          \</div><div class="line">    v           v            v</div><div class="line">+--------+   +--------+   +---------+</div><div class="line">| 工作进程 |  | 工作进程 |   | 工作进程 |</div><div class="line">+--------+   +--------+   +---------+</div></pre></td></tr></table></figure></p>
<p>对于自行通过 <code>child_process</code> 来操作时，则可以更灵活地控制工作进程，甚至控制多组工作<br>进程。其原因在于自行通过 <code>child_process</code> 操作子进程时，可以隐式地创建多个 <code>TCP</code> 服务器，使得子进程可以共享多个的服务器端 <code>socket</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">                  +--------+         </div><div class="line">                  | Master |</div><div class="line">                  +--------+        </div><div class="line">                  /   |     \</div><div class="line">                /     |       \</div><div class="line">              /       |         \</div><div class="line">            /         |          \</div><div class="line">          v           v            v</div><div class="line">+------------+    +-----------+    +------------+</div><div class="line">| 进程app1.js |   | 进程app2.js |   | 进程app3.js |</div><div class="line">+------------+    +-----------+    +------------+</div></pre></td></tr></table></figure></p>
<p>综上比较得出</p>
<ol>
<li><code>cluster</code> 是 <code>child_process</code> 演变而来</li>
<li><code>cluster</code> 使用起来更方便，直接解决了端口占用的问题，<code>api</code>也足够用</li>
<li><code>child_process</code> 更灵活，写起来代码会比较多</li>
</ol>
<p>推荐二者结合起来使用，简单看了一下 <a href="https://github.com/eggjs" target="_blank" rel="external">Egg</a> 的源码，它就是这么做的。主进程 <code>fork</code> 使用 <a href="https://github.com/node-modules/cfork" target="_blank" rel="external">cfork</a>，<code>agent</code> 进程使用<code>child_process</code> <code>fork</code>而来</p>
<h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>oh，又水一篇文章，代码基本参照<code>深入浅出Node.js</code>第九章玩转进程，在文章最后添加了一些最近看到的知识，加深一下印象和理解吧</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://book.douban.com/subject/25768396/" target="_blank" rel="external">深入浅出Node.js</a></li>
</ul>
<p>本文地址 <a href="http://www.wclimb.site/2020/04/15/node-process/">Nodejs之进程</a></p>
]]></content>
      <categories>
        <category>Node</category>
        <category>进程</category>
      </categories>
      <tags>
        <tag>原创</tag>
        <tag>javascript</tag>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>Node+Koa2+Mysql 搭建简易博客</title>
    <url>/2017/07/12/Node-Koa2-Mysql-%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="Koa2-blog"><a href="#Koa2-blog" class="headerlink" title="Koa2-blog"></a>Koa2-blog</h2><blockquote>
<p>2018-1-5 更新教程（新增上传头像、新增分页、样式改版、发布文章和评论支持markdown语法）<br>现在GitHub的代码结构有变，优化了蛮多东西</p>
</blockquote>
<p>Node+Koa2+Mysql 搭建简易博客</p>
<h2 id="预览地址"><a href="#预览地址" class="headerlink" title="预览地址"></a>预览地址</h2><p><a href="http://blog.wclimb.site" target="_blank" rel="external">http://blog.wclimb.site</a></p>
<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本篇教程一方面是为了自己在学习的过程加深记忆，也是总结的过程。另一方面给对这方面不太了解的同学以借鉴经验。如发现问题还望指正，<br>如果你觉得这篇文章帮助到了你，那就赏脸给个star吧，<a href="https://github.com/wclimb/Koa2-blog" target="_blank" rel="external">https://github.com/wclimb/Koa2-blog</a><br>下一篇可能是 Node + express + mongoose 或 zepto源码系列<br>感谢您的阅读^_^<br>ps：关于markdown代码缩进问题，看起来不太舒服，但复制到编辑器是正常的哟！</p>
<h2 id="演示效果"><a href="#演示效果" class="headerlink" title="演示效果"></a>演示效果</h2><p><img src="http://www.wclimb.site/cdn/blog1.gif" alt="img"></p>
<h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><ul>
<li>nodejs <code>v8.1.0</code></li>
<li>koa <code>v2.3.0</code></li>
<li>mysql <code>v5.7.0</code></li>
</ul>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>文中用到了promise、async await等语法，所以你需要一点es6的语法，传送门当然是阮老师的教程了 <a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">http://es6.ruanyifeng.com/</a> </p>
<p>如果你已经配置好node和mysql可以跳过</p>
<blockquote>
<p>经常会有人问报错的问题，运行出错大部分是因为不支持async，升级node版本可解决</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ node -v   查看你的node版本，如果过低则去nodejs官网下载替换之前的版本</div></pre></td></tr></table></figure>
<p>下载mysql，并设置好用户名和密码，默认可以为用户名：root，密码：123456</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">进入到 bin 目录下 比如 cd C:\Program Files\MySQL\MySQL Server 5.7\bin</div></pre></td></tr></table></figure>
<p>然后开启mysql<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ mysql -u root -p</div></pre></td></tr></table></figure></p>
<p>输入密码之后创建<code>database</code>(数据库)，<code>nodesql</code>是我们创建的数据库<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ create database nodesql;</div></pre></td></tr></table></figure></p>
<p>记住sql语句后面一定要跟<code>;</code>符号，接下来看看我们创建好的数据库列表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ show databases;</div></pre></td></tr></table></figure>
<p><img src="/img/database.png" alt="img"></p>
<p>启用创建的数据库<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ use nodesql;</div></pre></td></tr></table></figure></p>
<p>查看数据库中的表<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ show tables;</div></pre></td></tr></table></figure></p>
<p>显示<code>Empty set (0.00 sec)</code>，因为我们还没有建表，稍后会用代码建表<br>注释：<br>这是后面建表之后的状态<br><img src="/img/tables.png" alt="img"></p>
<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p><img src="/img/item.png" alt="img"></p>
<ul>
<li>config 存放默认文件</li>
<li>lib 存放操作数据库文件</li>
<li>middlewares 存放判断登录与否文件</li>
<li>public 存放样式和头像文件</li>
<li>routes 存放路由文件</li>
<li>views 存放模板文件</li>
<li>index 程序主文件</li>
<li>package.json 包括项目名、作者、依赖等等</li>
</ul>
<p>首先我们创建koa2-blog文件夹，然后<code>cd koa2-blog</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">接着使用 npm init 来创建package.json</div></pre></td></tr></table></figure></p>
<p>接着安装包，安装之前我们使用<a href="https://npm.taobao.org/" target="_blank" rel="external">cnpm</a>安装<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ cnpm i koa koa-bodyparser koa-mysql-session koa-router koa-session-minimal koa-static koa-views md5 moment mysql ejs markdown-it chai mocha koa-static-cache --save-dev</div></pre></td></tr></table></figure>
<p>各模块用处</p>
<ol>
<li><code>koa node</code>框架</li>
<li><code>koa-bodyparser</code> 表单解析中间件</li>
<li><code>koa-mysql-session</code>、<code>koa-session-minimal</code> 处理数据库的中间件</li>
<li><code>koa-router</code> 路由中间件</li>
<li><code>koa-static</code> 静态资源加载中间件</li>
<li><code>ejs</code> 模板引擎</li>
<li><code>md5</code> 密码加密</li>
<li><code>moment</code> 时间中间件</li>
<li><code>mysql</code> 数据库</li>
<li><code>markdown-it</code> markdown语法</li>
<li><code>koa-views</code> 模板呈现中间件</li>
<li><code>chai</code> <code>mocha</code> 测试使用</li>
<li><code>koa-static-cache</code> 文件缓存</li>
</ol>
<p>在文件夹里面新建所需文件</p>
<p><img src="/img/view.png" alt="img"></p>
<h2 id="首先配置config"><a href="#首先配置config" class="headerlink" title="首先配置config"></a>首先配置config</h2><p>我们新建<code>default.js</code>文件 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">const config = &#123;</div><div class="line">  // 启动端口</div><div class="line">  port: 3000,</div><div class="line"></div><div class="line">  // 数据库配置</div><div class="line">  database: &#123;</div><div class="line">    DATABASE: &apos;nodesql&apos;,</div><div class="line">    USERNAME: &apos;root&apos;,</div><div class="line">    PASSWORD: &apos;123456&apos;,</div><div class="line">    PORT: &apos;3306&apos;,</div><div class="line">    HOST: &apos;localhost&apos;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">module.exports = config</div></pre></td></tr></table></figure>
<p>这是我们所需的一些字段，包括端口和数据库连接所需，最后我们把它exports暴露出去，以便可以在别的地方使用</p>
<h2 id="配置index-js文件"><a href="#配置index-js文件" class="headerlink" title="配置index.js文件"></a>配置index.js文件</h2><p><code>index.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> Koa=<span class="built_in">require</span>(<span class="string">'koa'</span>);</div><div class="line"><span class="keyword">const</span> path=<span class="built_in">require</span>(<span class="string">'path'</span>)</div><div class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">'koa-bodyparser'</span>);</div><div class="line"><span class="keyword">const</span> ejs=<span class="built_in">require</span>(<span class="string">'ejs'</span>);</div><div class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">'koa-session-minimal'</span>);</div><div class="line"><span class="keyword">const</span> MysqlStore = <span class="built_in">require</span>(<span class="string">'koa-mysql-session'</span>);</div><div class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'./config/default.js'</span>);</div><div class="line"><span class="keyword">const</span> router=<span class="built_in">require</span>(<span class="string">'koa-router'</span>)</div><div class="line"><span class="keyword">const</span> views = <span class="built_in">require</span>(<span class="string">'koa-views'</span>)</div><div class="line"><span class="comment">// const koaStatic = require('koa-static')</span></div><div class="line"><span class="keyword">const</span> staticCache = <span class="built_in">require</span>(<span class="string">'koa-static-cache'</span>)</div><div class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// session存储配置</span></div><div class="line"><span class="keyword">const</span> sessionMysqlConfig= &#123;</div><div class="line">  <span class="attr">user</span>: config.database.USERNAME,</div><div class="line">  <span class="attr">password</span>: config.database.PASSWORD,</div><div class="line">  <span class="attr">database</span>: config.database.DATABASE,</div><div class="line">  <span class="attr">host</span>: config.database.HOST,</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 配置session中间件</span></div><div class="line">app.use(session(&#123;</div><div class="line">  <span class="attr">key</span>: <span class="string">'USER_SID'</span>,</div><div class="line">  <span class="attr">store</span>: <span class="keyword">new</span> MysqlStore(sessionMysqlConfig)</div><div class="line">&#125;))</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 配置静态资源加载中间件</span></div><div class="line"><span class="comment">// app.use(koaStatic(</span></div><div class="line"><span class="comment">//   path.join(__dirname , './public')</span></div><div class="line"><span class="comment">// ))</span></div><div class="line"><span class="comment">// 缓存</span></div><div class="line">app.use(staticCache(path.join(__dirname, <span class="string">'./public'</span>), &#123; <span class="attr">dynamic</span>: <span class="literal">true</span> &#125;, &#123;</div><div class="line">  <span class="attr">maxAge</span>: <span class="number">365</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span></div><div class="line">&#125;))</div><div class="line">app.use(staticCache(path.join(__dirname, <span class="string">'./images'</span>), &#123; <span class="attr">dynamic</span>: <span class="literal">true</span> &#125;, &#123;</div><div class="line">  <span class="attr">maxAge</span>: <span class="number">365</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span></div><div class="line">&#125;))</div><div class="line"></div><div class="line"><span class="comment">// 配置服务端模板渲染引擎中间件</span></div><div class="line">app.use(views(path.join(__dirname, <span class="string">'./views'</span>), &#123;</div><div class="line">  <span class="attr">extension</span>: <span class="string">'ejs'</span></div><div class="line">&#125;))</div><div class="line">app.use(bodyParser(&#123;</div><div class="line">  <span class="attr">formLimit</span>: <span class="string">'1mb'</span></div><div class="line">&#125;))</div><div class="line"></div><div class="line"><span class="comment">//  路由(我们先注释三个，等后面添加好了再取消注释，因为我们还没有定义路由，稍后会先实现注册)</span></div><div class="line"><span class="comment">//app.use(require('./routers/signin.js').routes())</span></div><div class="line">app.use(<span class="built_in">require</span>(<span class="string">'./routers/signup.js'</span>).routes())</div><div class="line"><span class="comment">//app.use(require('./routers/posts.js').routes())</span></div><div class="line"><span class="comment">//app.use(require('./routers/signout.js').routes())</span></div><div class="line"></div><div class="line"></div><div class="line">app.listen(<span class="number">3000</span>)</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">`listening on port <span class="subst">$&#123;config.port&#125;</span>`</span>)</div></pre></td></tr></table></figure>
<p>我们使用<code>koa-session-minimal``koa-mysql-session</code>来进行数据库的操作<br>使用<code>koa-static</code>配置静态资源，目录设置为<code>public</code><br>使用<code>ejs</code>模板引擎<br>使用<code>koa-bodyparser</code>来解析提交的表单信息<br>使用<code>koa-router</code>做路由<br>使用<code>koa-static-cache</code>来缓存文件<br>之前我们配置了default.js，我们就可以在这里使用了<br>首先引入进来 var config = require(‘./config/default.js’);<br>然后在数据库的操作的时候，如config.database.USERNAME，得到的就是root。</p>
<p>如果你觉得这篇文章帮助到了你，那就赏脸给个star吧，<a href="https://github.com/wclimb/Koa2-blog" target="_blank" rel="external">https://github.com/wclimb/Koa2-blog</a></p>
<h2 id="配置lib的mysql-js文件"><a href="#配置lib的mysql-js文件" class="headerlink" title="配置lib的mysql.js文件"></a>配置lib的mysql.js文件</h2><p>关于数据库的使用这里介绍一下，首先我们建立了数据库的连接池，以便后面的操作都可以使用到，我们创建了一个函数<code>query</code>，通过返回promise的方式以便可以方便用<code>.then()</code>来获取数据库返回的数据，然后我们定义了三个表的字段，通过<code>createTable</code>来创建我们后面所需的三个表，包括posts(存储文章)，users(存储用户)，comment(存储评论)，create table if not exists users()表示如果users表不存在则创建该表，避免每次重复建表报错的情况。后面我们定义了一系列的方法，最后把他们exports暴露出去。</p>
<blockquote>
<p>这里只介绍注册用户insertData，后续的可以自行查看，都差不多</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 注册用户</span></div><div class="line"><span class="keyword">let</span> insertData = <span class="function"><span class="keyword">function</span>(<span class="params"> value </span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> _sql = <span class="string">"insert into users set name=?,pass=?,avator=?,moment=?;"</span></div><div class="line">  <span class="keyword">return</span> query( _sql, value )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们写了一个_sql的sql语句，意思是插入到users的表中（在这之前我们已经建立了users表）然后要插入的数据分别是name、pass、avator、moment，就是用户名、密码、头像、注册时间，最后调用<code>query</code>函数把sql语句传进去（之前的写法是<code>&quot;insert into users(name,pass) values(?,?);&quot;</code>,换成现在得更容易理解）</p>
<p>lib/mysql.js<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</div><div class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'../config/default.js'</span>)</div><div class="line"></div><div class="line"><span class="keyword">var</span> pool  = mysql.createPool(&#123;</div><div class="line">  <span class="attr">host</span>     : config.database.HOST,</div><div class="line">  <span class="attr">user</span>     : config.database.USERNAME,</div><div class="line">  <span class="attr">password</span> : config.database.PASSWORD,</div><div class="line">  <span class="attr">database</span> : config.database.DATABASE</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">let</span> query = <span class="function"><span class="keyword">function</span>(<span class="params"> sql, values </span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params"> resolve, reject </span>) =&gt;</span> &#123;</div><div class="line">    pool.getConnection(<span class="function"><span class="keyword">function</span>(<span class="params">err, connection</span>) </span>&#123;</div><div class="line">      <span class="keyword">if</span> (err) &#123;</div><div class="line">        reject( err )</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        connection.query(sql, values, ( err, rows) =&gt; &#123;</div><div class="line"></div><div class="line">          <span class="keyword">if</span> ( err ) &#123;</div><div class="line">            reject( err )</div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">            resolve( rows )</div><div class="line">          &#125;</div><div class="line">          connection.release()</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  &#125;)</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// let query = function( sql, values ) &#123;</span></div><div class="line"><span class="comment">// pool.getConnection(function(err, connection) &#123;</span></div><div class="line"><span class="comment">//   // 使用连接</span></div><div class="line"><span class="comment">//   connection.query( sql,values, function(err, rows) &#123;</span></div><div class="line"><span class="comment">//     // 使用连接执行查询</span></div><div class="line"><span class="comment">//     console.log(rows)</span></div><div class="line"><span class="comment">//     connection.release();</span></div><div class="line"><span class="comment">//     //连接不再使用，返回到连接池</span></div><div class="line"><span class="comment">//   &#125;);</span></div><div class="line"><span class="comment">// &#125;);</span></div><div class="line"><span class="comment">// &#125;</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> users =</div><div class="line">    <span class="string">`create table if not exists users(</span></div><div class="line">     id INT NOT NULL AUTO_INCREMENT,</div><div class="line">     name VARCHAR(100) NOT NULL,</div><div class="line">     pass VARCHAR(100) NOT NULL,</div><div class="line">     avator VARCHAR(100) NOT NULL,</div><div class="line">     moment VARCHAR(100) NOT NULL,</div><div class="line">     PRIMARY KEY ( id )</div><div class="line">    );`</div><div class="line"></div><div class="line"><span class="keyword">let</span> posts =</div><div class="line">    <span class="string">`create table if not exists posts(</span></div><div class="line">     id INT NOT NULL AUTO_INCREMENT,</div><div class="line">     name VARCHAR(100) NOT NULL,</div><div class="line">     title TEXT(0) NOT NULL,</div><div class="line">     content TEXT(0) NOT NULL,</div><div class="line">     md TEXT(0) NOT NULL,</div><div class="line">     uid VARCHAR(40) NOT NULL,</div><div class="line">     moment VARCHAR(100) NOT NULL,</div><div class="line">     comments VARCHAR(200) NOT NULL DEFAULT '0',</div><div class="line">     pv VARCHAR(40) NOT NULL DEFAULT '0',</div><div class="line">     avator VARCHAR(100) NOT NULL,</div><div class="line">     PRIMARY KEY ( id )</div><div class="line">    );`</div><div class="line"></div><div class="line"><span class="keyword">let</span> comment =</div><div class="line">    <span class="string">`create table if not exists comment(</span></div><div class="line">     id INT NOT NULL AUTO_INCREMENT,</div><div class="line">     name VARCHAR(100) NOT NULL,</div><div class="line">     content TEXT(0) NOT NULL,</div><div class="line">     moment VARCHAR(40) NOT NULL,</div><div class="line">     postid VARCHAR(40) NOT NULL,</div><div class="line">     avator VARCHAR(100) NOT NULL,</div><div class="line">     PRIMARY KEY ( id )</div><div class="line">    );`</div><div class="line"></div><div class="line"><span class="keyword">let</span> createTable = <span class="function"><span class="keyword">function</span>(<span class="params"> sql </span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> query( sql, [] )</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 建表</span></div><div class="line">createTable(users)</div><div class="line">createTable(posts)</div><div class="line">createTable(comment)</div><div class="line"></div><div class="line"><span class="comment">// 注册用户</span></div><div class="line"><span class="keyword">let</span> insertData = <span class="function"><span class="keyword">function</span>(<span class="params"> value </span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> _sql = <span class="string">"insert into users set name=?,pass=?,avator=?,moment=?;"</span></div><div class="line">  <span class="keyword">return</span> query( _sql, value )</div><div class="line">&#125;</div><div class="line"><span class="comment">// 删除用户</span></div><div class="line"><span class="keyword">let</span> deleteUserData = <span class="function"><span class="keyword">function</span>(<span class="params"> name </span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> _sql = <span class="string">`delete from users where name="<span class="subst">$&#123;name&#125;</span>";`</span></div><div class="line">  <span class="keyword">return</span> query( _sql )</div><div class="line">&#125;</div><div class="line"><span class="comment">// 查找用户</span></div><div class="line"><span class="keyword">let</span> findUserData = <span class="function"><span class="keyword">function</span>(<span class="params"> name </span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> _sql = <span class="string">`select * from users where name="<span class="subst">$&#123;name&#125;</span>";`</span></div><div class="line">  <span class="keyword">return</span> query( _sql )</div><div class="line">&#125;</div><div class="line"><span class="comment">// 发表文章</span></div><div class="line"><span class="keyword">let</span> insertPost = <span class="function"><span class="keyword">function</span>(<span class="params"> value </span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> _sql = <span class="string">"insert into posts set name=?,title=?,content=?,md=?,uid=?,moment=?,avator=?;"</span></div><div class="line">  <span class="keyword">return</span> query( _sql, value )</div><div class="line">&#125;</div><div class="line"><span class="comment">// 更新文章评论数</span></div><div class="line"><span class="keyword">let</span> updatePostComment = <span class="function"><span class="keyword">function</span>(<span class="params"> value </span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> _sql = <span class="string">"update posts set comments=? where id=?"</span></div><div class="line">  <span class="keyword">return</span> query( _sql, value )</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 更新浏览数</span></div><div class="line"><span class="keyword">let</span> updatePostPv = <span class="function"><span class="keyword">function</span>(<span class="params"> value </span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> _sql = <span class="string">"update posts set pv=? where id=?"</span></div><div class="line">  <span class="keyword">return</span> query( _sql, value )</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 发表评论</span></div><div class="line"><span class="keyword">let</span> insertComment = <span class="function"><span class="keyword">function</span>(<span class="params"> value </span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> _sql = <span class="string">"insert into comment set name=?,content=?,moment=?,postid=?,avator=?;"</span></div><div class="line">  <span class="keyword">return</span> query( _sql, value )</div><div class="line">&#125;</div><div class="line"><span class="comment">// 通过名字查找用户</span></div><div class="line"><span class="keyword">let</span> findDataByName = <span class="function"><span class="keyword">function</span> (<span class="params"> name </span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> _sql = <span class="string">`select * from users where name="<span class="subst">$&#123;name&#125;</span>";`</span></div><div class="line">  <span class="keyword">return</span> query( _sql)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 通过文章的名字查找用户</span></div><div class="line"><span class="keyword">let</span> findDataByUser = <span class="function"><span class="keyword">function</span> (<span class="params"> name </span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> _sql = <span class="string">`select * from posts where name="<span class="subst">$&#123;name&#125;</span>";`</span></div><div class="line">  <span class="keyword">return</span> query( _sql)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 通过文章id查找</span></div><div class="line"><span class="keyword">let</span> findDataById = <span class="function"><span class="keyword">function</span> (<span class="params"> id </span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> _sql = <span class="string">`select * from posts where id="<span class="subst">$&#123;id&#125;</span>";`</span></div><div class="line">  <span class="keyword">return</span> query( _sql)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 通过评论id查找</span></div><div class="line"><span class="keyword">let</span> findCommentById = <span class="function"><span class="keyword">function</span> (<span class="params"> id </span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> _sql = <span class="string">`select * FROM comment where postid="<span class="subst">$&#123;id&#125;</span>";`</span></div><div class="line">  <span class="keyword">return</span> query( _sql)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 查询所有文章</span></div><div class="line"><span class="keyword">let</span> findAllPost = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> _sql = <span class="string">` select * FROM posts;`</span></div><div class="line">  <span class="keyword">return</span> query( _sql)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 查询分页文章</span></div><div class="line"><span class="keyword">let</span> findPostByPage = <span class="function"><span class="keyword">function</span> (<span class="params">page</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> _sql = <span class="string">` select * FROM posts limit <span class="subst">$&#123;(page<span class="number">-1</span>)*<span class="number">10</span>&#125;</span>,10;`</span></div><div class="line">  <span class="keyword">return</span> query( _sql)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 查询个人分页文章</span></div><div class="line"><span class="keyword">let</span> findPostByUserPage = <span class="function"><span class="keyword">function</span> (<span class="params">name,page</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> _sql = <span class="string">` select * FROM posts where name="<span class="subst">$&#123;name&#125;</span>" order by id desc limit <span class="subst">$&#123;(page<span class="number">-1</span>)*<span class="number">10</span>&#125;</span>,10 ;`</span></div><div class="line">  <span class="keyword">return</span> query( _sql)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 更新修改文章</span></div><div class="line"><span class="keyword">let</span> updatePost = <span class="function"><span class="keyword">function</span>(<span class="params">values</span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> _sql = <span class="string">`update posts set  title=?,content=?,md=? where id=?`</span></div><div class="line">  <span class="keyword">return</span> query(_sql,values)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 删除文章</span></div><div class="line"><span class="keyword">let</span> deletePost = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> _sql = <span class="string">`delete from posts where id = <span class="subst">$&#123;id&#125;</span>`</span></div><div class="line">  <span class="keyword">return</span> query(_sql)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 删除评论</span></div><div class="line"><span class="keyword">let</span> deleteComment = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> _sql = <span class="string">`delete from comment where id=<span class="subst">$&#123;id&#125;</span>`</span></div><div class="line">  <span class="keyword">return</span> query(_sql)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 删除所有评论</span></div><div class="line"><span class="keyword">let</span> deleteAllPostComment = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> _sql = <span class="string">`delete from comment where postid=<span class="subst">$&#123;id&#125;</span>`</span></div><div class="line">  <span class="keyword">return</span> query(_sql)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 查找评论数</span></div><div class="line"><span class="keyword">let</span> findCommentLength = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> _sql = <span class="string">`select content from comment where postid in (select id from posts where id=<span class="subst">$&#123;id&#125;</span>)`</span></div><div class="line">  <span class="keyword">return</span> query(_sql)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 滚动无限加载数据</span></div><div class="line"><span class="keyword">let</span> findPageById = <span class="function"><span class="keyword">function</span>(<span class="params">page</span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> _sql = <span class="string">`select * from posts limit <span class="subst">$&#123;(page<span class="number">-1</span>)*<span class="number">5</span>&#125;</span>,5;`</span></div><div class="line">  <span class="keyword">return</span> query(_sql)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 评论分页</span></div><div class="line"><span class="keyword">let</span> findCommentByPage = <span class="function"><span class="keyword">function</span>(<span class="params">page,postId</span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> _sql = <span class="string">`select * from comment where postid=<span class="subst">$&#123;postId&#125;</span> order by id desc limit <span class="subst">$&#123;(page<span class="number">-1</span>)*<span class="number">10</span>&#125;</span>,10;`</span></div><div class="line">  <span class="keyword">return</span> query(_sql)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">	query,</div><div class="line">	createTable,</div><div class="line">	insertData,</div><div class="line">  	deleteUserData,</div><div class="line">  	findUserData,</div><div class="line">	findDataByName,</div><div class="line">  	insertPost,</div><div class="line">  	findAllPost,</div><div class="line">  	findPostByPage,</div><div class="line">	findPostByUserPage,</div><div class="line">	findDataByUser,</div><div class="line">	findDataById,</div><div class="line">	insertComment,</div><div class="line">	findCommentById,</div><div class="line">	updatePost,</div><div class="line">	deletePost,</div><div class="line">	deleteComment,</div><div class="line">	findCommentLength,</div><div class="line">	updatePostComment,</div><div class="line">	deleteAllPostComment,</div><div class="line">	updatePostPv,</div><div class="line">	findPageById,</div><div class="line">	findCommentByPage</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>下面是我们建的表</p>
<table>
<thead>
<tr>
<th style="text-align:center">users</th>
<th style="text-align:center">posts</th>
<th style="text-align:center">comment</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">id</td>
<td style="text-align:center">id</td>
<td style="text-align:center">id</td>
</tr>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:center">name</td>
<td style="text-align:center">name</td>
</tr>
<tr>
<td style="text-align:center">pass</td>
<td style="text-align:center">title</td>
<td style="text-align:center">content</td>
</tr>
<tr>
<td style="text-align:center">avator</td>
<td style="text-align:center">content</td>
<td style="text-align:center">moment</td>
</tr>
<tr>
<td style="text-align:center">moment</td>
<td style="text-align:center">md</td>
<td style="text-align:center">postid</td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:center">uid</td>
<td style="text-align:center">avator</td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:center">moment</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:center">comments</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:center">pv</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:center">avator</td>
<td style="text-align:center">-</td>
</tr>
</tbody>
</table>
<ul>
<li>id主键递增</li>
<li>name: 用户名</li>
<li>pass：密码</li>
<li>avator：头像</li>
<li>title：文章标题</li>
<li>content：文章内容和评论</li>
<li>md：markdown语法</li>
<li>uid：发表文章的用户id </li>
<li>moment：创建时间</li>
<li>comments：文章评论数</li>
<li>pv：文章浏览数</li>
<li>postid：文章id</li>
</ul>
<p>现在感觉有点枯燥，那我们先来实现一下注册吧</p>
<h2 id="实现注册页面"><a href="#实现注册页面" class="headerlink" title="实现注册页面"></a>实现注册页面</h2><p>routers/singup.js<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)();</div><div class="line"><span class="keyword">const</span> userModel = <span class="built_in">require</span>(<span class="string">'../lib/mysql.js'</span>);</div><div class="line"><span class="keyword">const</span> md5 = <span class="built_in">require</span>(<span class="string">'md5'</span>)</div><div class="line"><span class="keyword">const</span> checkNotLogin = <span class="built_in">require</span>(<span class="string">'../middlewares/check.js'</span>).checkNotLogin</div><div class="line"><span class="keyword">const</span> checkLogin = <span class="built_in">require</span>(<span class="string">'../middlewares/check.js'</span>).checkLogin</div><div class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">'moment'</span>);</div><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</div><div class="line"><span class="comment">// 注册页面</span></div><div class="line">router.get(<span class="string">'/signup'</span>, <span class="keyword">async</span>(ctx, next) =&gt; &#123;</div><div class="line">    <span class="keyword">await</span> checkNotLogin(ctx)</div><div class="line">    <span class="keyword">await</span> ctx.render(<span class="string">'signup'</span>, &#123;</div><div class="line">        <span class="attr">session</span>: ctx.session,</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line">    </div><div class="line"><span class="built_in">module</span>.exports = router</div></pre></td></tr></table></figure></p>
<p>使用get方式得到’/signup’页面，然后渲染signup模板，这里我们还没有在写signup.ejs</p>
<p>views/signup.ejs</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form create"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">label</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span> </div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">label</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span> </div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span> <span class="attr">class</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">label</span>&gt;</span>重复密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span> </div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"请确认密码"</span> <span class="attr">class</span>=<span class="string">"repeatpass"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"repeatpass"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">label</span>&gt;</span>上传头像：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"avator"</span> <span class="attr">id</span>=<span class="string">"avator"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">id</span>=<span class="string">"avatorVal"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"preview"</span> <span class="attr">alt</span>=<span class="string">"预览头像"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"submit"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>我们先安装supervisor</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ cnpm i supervisor -g</div></pre></td></tr></table></figure>
<p>supervisor的作用是会监听文件的变化，而我们修改文件之后不必去重启程序<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">supervisor --harmony index</div></pre></td></tr></table></figure></p>
<p>现在访问 localhost:3000/signup 看看效果吧。注意数据库一定要是开启的状态，不能关闭</p>
<h2 id="完善注册功能"><a href="#完善注册功能" class="headerlink" title="完善注册功能"></a>完善注册功能</h2><p>首先我们来完善一下样式吧，稍微美化一下</p>
<p>public/index.css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">body</span>,</div><div class="line"><span class="selector-tag">header</span>,</div><div class="line"><span class="selector-tag">ul</span>,</div><div class="line"><span class="selector-tag">li</span>,</div><div class="line"><span class="selector-tag">p</span>,</div><div class="line"><span class="selector-tag">div</span>,</div><div class="line"><span class="selector-tag">html</span>,</div><div class="line"><span class="selector-tag">span</span>,</div><div class="line"><span class="selector-tag">h3</span>,</div><div class="line"><span class="selector-tag">a</span>,</div><div class="line"><span class="selector-tag">blockquote</span> &#123;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">    <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">ul</span>,<span class="selector-tag">li</span>&#123;</div><div class="line">    <span class="attribute">list-style-type</span>: none;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">a</span> &#123;</div><div class="line">    <span class="attribute">text-decoration</span>: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">header</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">60%</span>;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> auto;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">header</span><span class="selector-pseudo">:after</span>&#123;</div><div class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</div><div class="line">    <span class="attribute">clear</span>: both;</div><div class="line">    <span class="attribute">display</span>: table;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">header</span> <span class="selector-class">.user_right</span>&#123;</div><div class="line">    <span class="attribute">float</span>: right</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">header</span> <span class="selector-class">.user_right</span> <span class="selector-class">.active</span>&#123;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#5FB878</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#5FB878</span>;</div><div class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">5px</span> <span class="number">#ccc</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">header</span> <span class="selector-class">.user_name</span> &#123;</div><div class="line">    <span class="attribute">float</span>: left</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.user_name</span> &#123;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.has_user</span> <span class="selector-tag">a</span>,</div><div class="line"><span class="selector-class">.has_user</span> <span class="selector-tag">span</span>,</div><div class="line"><span class="selector-class">.none_user</span> <span class="selector-tag">a</span> &#123;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">15px</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#5FB878</span>;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">15px</span>;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">    <span class="attribute">cursor</span>: pointer;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</div><div class="line">    <span class="attribute">transition</span>: all <span class="number">0.3s</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.has_user</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>,<span class="selector-class">.has_user</span> <span class="selector-tag">span</span><span class="selector-pseudo">:hover</span>&#123;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#5FB878</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#5FB878</span>;</div><div class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">5px</span> <span class="number">#ccc</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.posts</span>&#123;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>; </div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.posts</span> &gt; <span class="selector-tag">li</span>&#123;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">    <span class="attribute">padding-bottom</span>: <span class="number">40px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.posts</span> <span class="selector-class">.comment_pv</span>&#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">bottom</span>: <span class="number">5px</span>;</div><div class="line">    <span class="attribute">right</span>: <span class="number">10px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.posts</span> <span class="selector-class">.author</span>&#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">left</span>: <span class="number">10px</span>;</div><div class="line">    <span class="attribute">bottom</span>: <span class="number">5px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.posts</span> <span class="selector-class">.author</span> <span class="selector-tag">span</span>&#123;</div><div class="line">    <span class="attribute">margin-right</span>: <span class="number">5px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.posts</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#f2f2f2</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.posts</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">pre</span>&#123;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#666</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.posts</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.content</span>&#123;</div><div class="line">    <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</div><div class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.posts</span> &gt; <span class="selector-tag">li</span> + <span class="selector-tag">li</span>&#123;</div><div class="line">    <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.posts</span> <span class="selector-tag">li</span> <span class="selector-class">.title</span> <span class="selector-tag">span</span>&#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">left</span>: <span class="number">10px</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">10px</span>;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#5FB878</span>;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.posts</span> <span class="selector-tag">li</span> <span class="selector-class">.title</span>&#123;</div><div class="line">     <span class="attribute">margin-left</span>: <span class="number">40px</span>;</div><div class="line">     <span class="attribute">font-size</span>: <span class="number">20px</span>;</div><div class="line">     <span class="attribute">color</span>: <span class="number">#222</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.posts</span> <span class="selector-class">.userAvator</span>&#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">left</span>: <span class="number">3px</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">3px</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">40px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.posts</span> <span class="selector-class">.content</span>&#123;</div><div class="line">    <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#f2f2f2</span>;</div><div class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#f2f2f2</span>;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> ;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span>;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">40px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.userMsg</span> <span class="selector-tag">img</span>&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">40px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</div><div class="line">    <span class="attribute">margin-right</span>: <span class="number">10px</span>;</div><div class="line">    <span class="attribute">vertical-align</span>: middle;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.userMsg</span> <span class="selector-tag">span</span>&#123;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</div><div class="line">    <span class="attribute">color</span>:<span class="number">#333</span>;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">    <span class="attribute">top</span>: <span class="number">2px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.posts</span> <span class="selector-tag">li</span> <span class="selector-tag">img</span>&#123;</div><div class="line">    <span class="attribute">max-width</span>: <span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.spost</span> <span class="selector-class">.comment_pv</span>&#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">top</span>: <span class="number">10px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.spost</span> <span class="selector-class">.edit</span> &#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">right</span>: <span class="number">20px</span>;</div><div class="line">    <span class="attribute">bottom</span>: <span class="number">5px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.spost</span> <span class="selector-class">.edit</span> <span class="selector-tag">p</span> &#123;</div><div class="line">    <span class="attribute">display</span>: inline-block;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">10px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.comment_wrap</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">60%</span>;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> auto;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.submit</span> &#123;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</div><div class="line">    <span class="attribute">line-height</span>: <span class="number">40px</span>;</div><div class="line">    <span class="attribute">text-align</span>: center;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#5FB878</span>;</div><div class="line">    <span class="attribute">cursor</span>: pointer;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">    <span class="attribute">float</span>: left;</div><div class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span> ;</div><div class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#fff</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.submit</span><span class="selector-pseudo">:hover</span>&#123;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#5FB878</span>;</div><div class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#5FB878</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.comment_list</span>&#123;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.cmt_lists</span><span class="selector-pseudo">:hover</span>&#123;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#f2f2f2</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.cmt_lists</span> + <span class="selector-class">.cmt_lists</span>&#123;</div><div class="line">    <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.cmt_content</span> &#123;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;</div><div class="line">    <span class="attribute">word-break</span>: break-all;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.cmt_detail</span>&#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">48px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.cmt_content</span> <span class="selector-tag">img</span>&#123;</div><div class="line">    <span class="attribute">max-width</span>: <span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* .cmt_content:after &#123;</span></div><div class="line">    content: '#content';</div><div class="line">    position: absolute;</div><div class="line">    top: 5px;</div><div class="line">    right: 5px;</div><div class="line">    color: #aaa;</div><div class="line">    font-size: 13px;</div><div class="line">&#125;</div><div class="line"> */</div><div class="line"><span class="selector-class">.cmt_name</span> &#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">right</span>: <span class="number">8px</span>;</div><div class="line">    <span class="attribute">bottom</span>: <span class="number">5px</span>;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.cmt_name</span> <span class="selector-tag">a</span> &#123;</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">5px</span>;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#1E9FFF</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.cmt_time</span>&#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</div><div class="line">    <span class="attribute">right</span>: <span class="number">5px</span>;</div><div class="line">    <span class="attribute">top</span>: <span class="number">5px</span>;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#aaa</span></div><div class="line">&#125;</div><div class="line"><span class="selector-class">.form</span> &#123;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">textarea</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">150px</span>;</div><div class="line">    <span class="attribute">padding</span>:<span class="number">10px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span>;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span>;   </div><div class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d7dde4</span>;</div><div class="line">    <span class="attribute">-webkit-appearance</span>: none;</div><div class="line">    <span class="attribute">resize</span>: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">textarea</span><span class="selector-id">#spContent</span>&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">98%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.tips</span> &#123;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0</span>;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#ec5051</span>;</div><div class="line">    <span class="attribute">text-align</span>: center;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">60%</span>;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.form</span> <span class="selector-tag">img</span><span class="selector-class">.preview</span> &#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">display</span>: none;</div><div class="line">    <span class="attribute">margin-top</span>:<span class="number">10px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">input</span> &#123;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">35px</span>;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">6px</span> <span class="number">7px</span>;	</div><div class="line">	<span class="attribute">border-radius</span>: <span class="number">4px</span>;   </div><div class="line">	<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d7dde4</span>;</div><div class="line">	<span class="attribute">-webkit-appearance</span>: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>,<span class="selector-tag">textarea</span><span class="selector-pseudo">:focus</span>&#123;</div><div class="line">    <span class="attribute">outline</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> <span class="built_in">rgba</span>(51,153,255,.2);</div><div class="line">    <span class="attribute">border-color</span>: <span class="number">#5cadff</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:hover</span>,<span class="selector-tag">input</span><span class="selector-pseudo">:active</span>,<span class="selector-tag">textarea</span><span class="selector-pseudo">:hover</span>,<span class="selector-tag">textarea</span><span class="selector-pseudo">:active</span>&#123;</div><div class="line">    <span class="attribute">border-color</span>: <span class="number">#5cadff</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.create</span> <span class="selector-tag">label</span> &#123;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.comment_wrap</span> <span class="selector-tag">form</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    <span class="attribute">margin-bottom</span>: <span class="number">85px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.delete_comment</span>,</div><div class="line"><span class="selector-class">.delete_post</span> &#123;</div><div class="line">    <span class="attribute">cursor</span>: pointer;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.delete_comment</span><span class="selector-pseudo">:hover</span>,</div><div class="line"><span class="selector-class">.delete_post</span><span class="selector-pseudo">:hover</span>,</div><div class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#ec5051</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.disabled</span>&#123;</div><div class="line">    <span class="attribute">user-select</span>: none;</div><div class="line">    <span class="attribute">cursor</span>: not-allowed <span class="meta">!important</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.error</span>&#123;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#ec5051</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.success</span>&#123;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#1E9FFF</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.container</span>&#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">60%</span>;</div><div class="line">    <span class="attribute">margin</span>:<span class="number">0</span> auto;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.message</span>&#123;</div><div class="line">    <span class="attribute">position</span>: fixed;</div><div class="line">    <span class="attribute">top</span>: -<span class="number">100%</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-50%);</div><div class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(0, 0, 0, 0.7);</div><div class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">    <span class="attribute">border-bottom-left-radius</span>: <span class="number">15px</span>;</div><div class="line">    <span class="attribute">border-bottom-right-radius</span>: <span class="number">15px</span>;</div><div class="line">    <span class="attribute">z-index</span>: <span class="number">99999</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.markdown</span> <span class="selector-tag">pre</span>&#123;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">overflow-x</span>: auto;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">0.5em</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#F0F0F0</span>;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.markdown</span> <span class="selector-tag">blockquote</span>&#123;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">1em</span>;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#6a737d</span>;</div><div class="line">    <span class="attribute">border-left</span>: <span class="number">0.25em</span> solid <span class="number">#dfe2e5</span>;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.markdown</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</div><div class="line">    <span class="attribute">list-style</span>: circle;</div><div class="line">    <span class="attribute">margin-top</span>: <span class="number">5px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们再把模板引擎的header和footer独立出来</p>
<p>/views/header.ejs<br>顺便引入index.css和jq<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>koa2-blog<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">href</span>=<span class="string">"http://www.wclimb.site/images/avatar.png"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/index.css"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://cdn.bootcss.com/jquery/3.2.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">		<span class="function"><span class="keyword">function</span> <span class="title">fade</span>(<span class="params">txt</span>)</span>&#123;</div><div class="line">			$(<span class="string">'.message'</span>).text(txt)</div><div class="line">			$(<span class="string">'.message'</span>).animate(&#123;</div><div class="line">				<span class="attr">top</span>:<span class="number">0</span></div><div class="line">			&#125;)</div><div class="line">			setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">				$(<span class="string">'.message'</span>).animate(&#123;</div><div class="line">					<span class="attr">top</span>: <span class="string">'-100%'</span></div><div class="line">				&#125;)</div><div class="line">			&#125;,<span class="number">1500</span>)</div><div class="line">		&#125;</div><div class="line">		$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			$(<span class="string">'.signout'</span>).click(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">				$.ajax(&#123;</div><div class="line">					<span class="attr">url</span>: <span class="string">"/signout"</span>,</div><div class="line">					<span class="attr">type</span>: <span class="string">"GET"</span>,</div><div class="line">					<span class="attr">cache</span>: <span class="literal">false</span>,</div><div class="line">					<span class="attr">dataType</span>: <span class="string">'json'</span>,</div><div class="line">					<span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</div><div class="line">						<span class="keyword">if</span> (msg) &#123;</div><div class="line">							fade(<span class="string">'登出成功'</span>)</div><div class="line">							setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">								<span class="built_in">window</span>.location.href = <span class="string">"/posts"</span></div><div class="line">							&#125;,<span class="number">1500</span>)	</div><div class="line">						&#125;</div><div class="line">					&#125;,</div><div class="line">					<span class="attr">error</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">						alert(<span class="string">'异常'</span>);</div><div class="line">					&#125;</div><div class="line">				&#125;)</div><div class="line">			&#125;)</div><div class="line">		&#125;)</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">header</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"user_name"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(<span class="attr">session.user</span>)&#123; %&gt;</span></div><div class="line">				 Hello,<span class="tag">&lt;<span class="name">%=</span> <span class="attr">session.user</span> %&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(!<span class="attr">session.user</span>)&#123; %&gt;</span></div><div class="line">				欢迎注册登录^_^</div><div class="line">			<span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"message"</span>&gt;</span>登录成功<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"user_right"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">%</span>  <span class="attr">if</span>(<span class="attr">session.user</span>)&#123; %&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"has_user"</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"__blank"</span> <span class="attr">href</span>=<span class="string">"https://github.com/wclimb/Koa2-blog"</span>&gt;</span>GitHub<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(<span class="attr">type</span> == <span class="string">'all'</span>)&#123; %&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"active"</span> <span class="attr">href</span>=<span class="string">"/posts"</span>&gt;</span>全部文章<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">%</span> &#125;<span class="attr">else</span>&#123; %&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/posts"</span>&gt;</span>全部文章<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">%</span> &#125;%&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(<span class="attr">type</span> == <span class="string">'my'</span>)&#123; %&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"active"</span> <span class="attr">href</span>=<span class="string">"/posts?author=&lt;%= session.user %&gt;"</span>&gt;</span>我的文章<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">%</span> &#125;<span class="attr">else</span>&#123; %&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/posts?author=&lt;%= session.user %&gt;"</span>&gt;</span>我的文章<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">%</span> &#125;%&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(<span class="attr">type</span> == <span class="string">'create'</span>)&#123; %&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"active"</span> <span class="attr">href</span>=<span class="string">"/create"</span>&gt;</span>发表文章<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">%</span> &#125;<span class="attr">else</span>&#123; %&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/create"</span>&gt;</span>发表文章<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">%</span> &#125;%&gt;</span></div><div class="line">					</div><div class="line">					<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"signout"</span>&gt;</span>登出<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(!<span class="attr">session.user</span>)&#123; %&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"none_user has_user"</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"__blank"</span> <span class="attr">href</span>=<span class="string">"https://github.com/wclimb/Koa2-blog"</span>&gt;</span>GitHub<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(<span class="attr">type</span> == <span class="string">'all'</span>)&#123; %&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"active"</span> <span class="attr">href</span>=<span class="string">"/posts"</span>&gt;</span>全部文章<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">%</span> &#125;<span class="attr">else</span>&#123; %&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/posts"</span>&gt;</span>全部文章<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">%</span> &#125;%&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(<span class="attr">type</span> == <span class="string">'signup'</span>)&#123; %&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"active"</span> <span class="attr">href</span>=<span class="string">"/signup"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">%</span> &#125;<span class="attr">else</span>&#123; %&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/signup"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">%</span> &#125;%&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(<span class="attr">type</span> == <span class="string">'signin'</span>)&#123; %&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"active"</span> <span class="attr">href</span>=<span class="string">"/signin"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">%</span> &#125;<span class="attr">else</span>&#123; %&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/signin"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">%</span> &#125;%&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">header</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>首先我们看到用到了session.user，这个值从哪来呢？请看下面的代码<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 注册页面</span></div><div class="line">router.get(<span class="string">'/signup'</span>, <span class="keyword">async</span>(ctx, next) =&gt; &#123;</div><div class="line">    <span class="keyword">await</span> checkNotLogin(ctx)</div><div class="line">    <span class="keyword">await</span> ctx.render(<span class="string">'signup'</span>, &#123;</div><div class="line">        <span class="attr">session</span>: ctx.session,</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>我们可以看到我们向模板传了一个session值，session:ctx.session，这个值存取的就是用户的信息，包括用户名、登录之后的id等，session一般是你关闭浏览器就过期了，等于下次打开浏览器的时候就得重新登录了，用if判断他存不存在，就可以知道用户是否需要登录，如果不存在用户，则只显示<code>全部文章</code> <code>注册</code> <code>登录</code> ,如果session.user存在则有登出的按钮。</p>
<p>在上面我们会看到我用了另外一个if判断，判断type类型，这样做的目的是比如我们登录注册页面，注册页面的导航会高亮，其实就是添加了class：active;<br>之后我们每个ejs文件的头部会这样写<code>&lt;%- include(&quot;header&quot;,{type:&#39;signup&#39;}) %&gt;</code> 登录页面则是<code>&lt;%- include(&quot;header&quot;,{type:&#39;signin&#39;}) %&gt;</code></p>
<p>/views/footer.ejs<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line">	</div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>修改views/signup.ejs<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">include</span>("<span class="attr">header</span>",&#123;<span class="attr">type:</span>'<span class="attr">signup</span>'&#125;) %&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form create"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">label</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span> </div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">label</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span> </div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span> <span class="attr">class</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">label</span>&gt;</span>重复密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span> </div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"请确认密码"</span> <span class="attr">class</span>=<span class="string">"repeatpass"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"repeatpass"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">label</span>&gt;</span>上传头像：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"avator"</span> <span class="attr">id</span>=<span class="string">"avator"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">id</span>=<span class="string">"avatorVal"</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"preview"</span> <span class="attr">alt</span>=<span class="string">"预览头像"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"submit"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">		$(<span class="built_in">window</span>).keyup(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">			<span class="comment">//console.log(e.keyCode)</span></div><div class="line">			<span class="keyword">if</span> (e.keyCode == <span class="number">13</span>) &#123;</div><div class="line">				$(<span class="string">'.submit'</span>).click()</div><div class="line">			&#125;</div><div class="line">		&#125;)</div><div class="line">		$(<span class="string">'#avator'</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.files.length != <span class="number">0</span>) &#123;</div><div class="line">				<span class="keyword">var</span> file = <span class="keyword">this</span>.files[<span class="number">0</span>],</div><div class="line">					reader = <span class="keyword">new</span> FileReader();</div><div class="line">				<span class="keyword">if</span> (!reader) &#123;</div><div class="line">					<span class="keyword">this</span>.value = <span class="string">''</span>;</div><div class="line">					<span class="keyword">return</span>;</div><div class="line">				&#125;;</div><div class="line">				<span class="built_in">console</span>.log(file.size)</div><div class="line">				<span class="keyword">if</span> (file.size &gt;= <span class="number">1024</span> * <span class="number">1024</span> / <span class="number">2</span>) &#123;</div><div class="line">					fade(<span class="string">"请上传小于512kb的图片!"</span>)</div><div class="line">					<span class="keyword">return</span> </div><div class="line">				&#125;</div><div class="line">				reader.onload = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">					<span class="keyword">this</span>.value = <span class="string">''</span>;</div><div class="line">					$(<span class="string">'form .preview'</span>).attr(<span class="string">'src'</span>, e.target.result)</div><div class="line">					$(<span class="string">'form .preview'</span>).fadeIn()</div><div class="line">					$(<span class="string">'#avatorVal'</span>).val(e.target.result)</div><div class="line">				&#125;;</div><div class="line">				reader.readAsDataURL(file);</div><div class="line">			&#125;;</div><div class="line">		&#125;)</div><div class="line">		$(<span class="string">'.submit'</span>).click(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">			<span class="comment">// console.log($('.form').serialize())</span></div><div class="line">			<span class="keyword">if</span> ($(<span class="string">'input[name=name]'</span>).val().trim() == <span class="string">''</span>) &#123;</div><div class="line">				fade(<span class="string">'请输入用户名！'</span>)</div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>($(<span class="string">'input[name=name]'</span>).val().match(<span class="regexp">/[&lt;'"&gt;]/g</span>))&#123;</div><div class="line">				fade(<span class="string">'请输入合法字符！'</span>)</div><div class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span>($(<span class="string">'#avatorVal'</span>).val() == <span class="string">''</span>)&#123;</div><div class="line">				fade(<span class="string">'请上传头像！'</span>)</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				$.ajax(&#123;</div><div class="line">					<span class="attr">url</span>: <span class="string">"/signup"</span>,</div><div class="line">					<span class="attr">data</span>: &#123;</div><div class="line">						<span class="attr">name</span>: $(<span class="string">'input[name=name]'</span>).val(),</div><div class="line">						<span class="attr">password</span>: $(<span class="string">'input[name=password]'</span>).val(),</div><div class="line">						<span class="attr">repeatpass</span>: $(<span class="string">'input[name=repeatpass]'</span>).val(),</div><div class="line">						<span class="attr">avator</span>: $(<span class="string">'#avatorVal'</span>).val(),</div><div class="line">					&#125;,</div><div class="line">					<span class="attr">type</span>: <span class="string">"POST"</span>,</div><div class="line">					<span class="attr">cache</span>: <span class="literal">false</span>,</div><div class="line">					<span class="attr">dataType</span>: <span class="string">'json'</span>,</div><div class="line">					<span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</div><div class="line">					   <span class="keyword">if</span> (msg.data == <span class="number">1</span>) &#123;           		</div><div class="line">						   $(<span class="string">'input'</span>).val(<span class="string">''</span>)</div><div class="line">						   fade(<span class="string">'用户名存在'</span>)</div><div class="line">					   &#125;</div><div class="line">					   <span class="keyword">else</span> <span class="keyword">if</span> (msg.data == <span class="number">2</span>)&#123;</div><div class="line">							fade(<span class="string">'请输入重复的密码'</span>)	               		</div><div class="line">					   &#125;</div><div class="line">					   <span class="keyword">else</span> <span class="keyword">if</span>(msg.data == <span class="number">3</span>)&#123;</div><div class="line">							fade(<span class="string">'注册成功'</span>)</div><div class="line">							setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">								<span class="built_in">window</span>.location.href=<span class="string">"/signin"</span>	  </div><div class="line">							&#125;,<span class="number">1000</span>)</div><div class="line">					   	&#125;</div><div class="line">					&#125;,</div><div class="line">					<span class="attr">error</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">						alert(<span class="string">'异常'</span>);</div><div class="line">	</div><div class="line">					&#125;</div><div class="line">				&#125;)			</div><div class="line">			&#125;</div><div class="line">		&#125;)		</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">include</span> <span class="attr">footer</span> %&gt;</span></div></pre></td></tr></table></figure></p>
<p>先看我们请求的url地址，是’/signup’，为什么是这个呢？我们看下面这段代码(后面有完整的)<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">router.post(<span class="string">'/signup'</span>, <span class="keyword">async</span>(ctx, next) =&gt; &#123;</div><div class="line">    <span class="comment">//console.log(ctx.request.body)</span></div><div class="line">    <span class="keyword">let</span> user = &#123;</div><div class="line">        <span class="attr">name</span>: ctx.request.body.name,</div><div class="line">        <span class="attr">pass</span>: ctx.request.body.password,</div><div class="line">        <span class="attr">repeatpass</span>: ctx.request.body.repeatpass,</div><div class="line">        <span class="attr">avator</span>: ctx.request.body.avator</div><div class="line">    &#125;</div><div class="line">    ....</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们的请求方式是post，地址是<code>/signup</code>所以走了这段代码，之后会获取我们输入的信息，通过ctx.request.body拿到</p>
<p>这里重点就在于ajax提交了，提交之后换回数据 1 2 3，然后分别做正确错误处理，把信息写在error和success中</p>
<p>修改routers/signup.js<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)();</div><div class="line"><span class="keyword">const</span> userModel = <span class="built_in">require</span>(<span class="string">'../lib/mysql.js'</span>);</div><div class="line"><span class="keyword">const</span> md5 = <span class="built_in">require</span>(<span class="string">'md5'</span>)</div><div class="line"><span class="keyword">const</span> checkNotLogin = <span class="built_in">require</span>(<span class="string">'../middlewares/check.js'</span>).checkNotLogin</div><div class="line"><span class="keyword">const</span> checkLogin = <span class="built_in">require</span>(<span class="string">'../middlewares/check.js'</span>).checkLogin</div><div class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">'moment'</span>);</div><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</div><div class="line"><span class="comment">// 注册页面</span></div><div class="line">router.get(<span class="string">'/signup'</span>, <span class="keyword">async</span>(ctx, next) =&gt; &#123;</div><div class="line">    <span class="keyword">await</span> checkNotLogin(ctx)</div><div class="line">    <span class="keyword">await</span> ctx.render(<span class="string">'signup'</span>, &#123;</div><div class="line">        <span class="attr">session</span>: ctx.session,</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"><span class="comment">// post 注册</span></div><div class="line">router.post(<span class="string">'/signup'</span>, <span class="keyword">async</span>(ctx, next) =&gt; &#123;</div><div class="line">    <span class="comment">//console.log(ctx.request.body)</span></div><div class="line">    <span class="keyword">let</span> user = &#123;</div><div class="line">        <span class="attr">name</span>: ctx.request.body.name,</div><div class="line">        <span class="attr">pass</span>: ctx.request.body.password,</div><div class="line">        <span class="attr">repeatpass</span>: ctx.request.body.repeatpass,</div><div class="line">        <span class="attr">avator</span>: ctx.request.body.avator</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">await</span> userModel.findDataByName(user.name)</div><div class="line">        .then(<span class="keyword">async</span> (result) =&gt; &#123;</div><div class="line">            <span class="built_in">console</span>.log(result)</div><div class="line">            <span class="keyword">if</span> (result.length) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">'用户已经存在'</span>)</div><div class="line">                &#125; <span class="keyword">catch</span> (error) &#123;</div><div class="line">                    <span class="comment">//处理err</span></div><div class="line">                    <span class="built_in">console</span>.log(error)</div><div class="line">                &#125;</div><div class="line">                <span class="comment">// 用户存在</span></div><div class="line">                ctx.body = &#123;</div><div class="line">                    <span class="attr">data</span>: <span class="number">1</span></div><div class="line">                &#125;;;</div><div class="line">                </div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (user.pass !== user.repeatpass || user.pass === <span class="string">''</span>) &#123;</div><div class="line">                ctx.body = &#123;</div><div class="line">                    <span class="attr">data</span>: <span class="number">2</span></div><div class="line">                &#125;;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// ctx.session.user=ctx.request.body.name   </span></div><div class="line">                <span class="keyword">let</span> base64Data = user.avator.replace(<span class="regexp">/^data:image\/\w+;base64,/</span>, <span class="string">""</span>);</div><div class="line">                <span class="keyword">let</span> dataBuffer = <span class="keyword">new</span> Buffer(base64Data, <span class="string">'base64'</span>);</div><div class="line">                <span class="keyword">let</span> getName = <span class="built_in">Number</span>(<span class="built_in">Math</span>.random().toString().substr(<span class="number">3</span>)).toString(<span class="number">36</span>) + <span class="built_in">Date</span>.now()</div><div class="line">                <span class="keyword">await</span> fs.writeFile(<span class="string">'./public/images/'</span> + getName + <span class="string">'.png'</span>, dataBuffer, err =&gt; &#123; </div><div class="line">                    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</div><div class="line">                    <span class="built_in">console</span>.log(<span class="string">'头像上传成功'</span>) </div><div class="line">                &#125;);            </div><div class="line">                <span class="keyword">await</span> userModel.insertData([user.name, md5(user.pass), getName, moment().format(<span class="string">'YYYY-MM-DD HH:mm:ss'</span>)])</div><div class="line">                    .then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</div><div class="line">                        <span class="built_in">console</span>.log(<span class="string">'注册成功'</span>,res)</div><div class="line">                        <span class="comment">//注册成功</span></div><div class="line">                        ctx.body = &#123;</div><div class="line">                            <span class="attr">data</span>: <span class="number">3</span></div><div class="line">                        &#125;;</div><div class="line">                    &#125;)</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">&#125;)</div><div class="line"><span class="built_in">module</span>.exports = router</div></pre></td></tr></table></figure></p>
<ul>
<li>我们使用md5实现密码加密，长度是32位的</li>
<li>使用我们之前说的<code>bodyParse</code>来解析提交的数据，通过<code>ctx.request.body</code>得到</li>
<li>我们引入了数据库的操作 findDataByName和insertData，因为之前我们在/lib/mysql.js中已经把他们写好，并暴露出来了。意思是先从数据库里面查找注册的用户名，如果找到了证明该用户名已经被注册过了，如果没有找到则使用insertData增加到数据库中</li>
<li>ctx.body 是我们通过ajax提交之后给页面返回的数据，比如提交ajax成功之后<code>msg.data=1</code>的时候就代表用户存在，<code>msg.data</code>出现在后面的<code>signup.ejs</code>模板ajax请求中</li>
<li>上传头像之前要新建好文件夹，我们ajax发送的是base64的格式，然后使用fs.writeFile来生成图片</li>
</ul>
<p>我们使用ajax来提交数据，方便来做成功错误的处理</p>
<h2 id="模板引擎ejs"><a href="#模板引擎ejs" class="headerlink" title="模板引擎ejs"></a>模板引擎ejs</h2><p>我们使用的是ejs，语法可以见<a href="https://www.npmjs.com/package/ejs" target="_blank" rel="external">ejs</a></p>
<p>之前我们写了这么一段代码<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">router.get(<span class="string">'/signup'</span>,<span class="keyword">async</span> (ctx,next)=&gt;&#123;</div><div class="line">	<span class="keyword">await</span> ctx.render(<span class="string">'signup'</span>,&#123;</div><div class="line">		<span class="attr">session</span>:ctx.session,</div><div class="line">	&#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>这里就用到了ejs所需的session 我们通过渲染signup.ejs模板，将值ctx.session赋值给session，之后我们就可以在signup.ejs中使用了<br>ejs的常用标签为：</p>
<ul>
<li><code>&lt;% code %&gt;</code>：运行 JavaScript 代码，不输出</li>
<li><code>&lt;%= code %&gt;</code>：显示转义后的 HTML内容</li>
<li><code>&lt;%- code %&gt;</code>：显示原始 HTML 内容</li>
</ul>
<p><code>&lt;%= code %&gt;</code>和<code>&lt;%- code %&gt;</code>的区别在于，&lt;%= code %&gt;不管你写什么都会原样输出，比如code为 <code>&lt;strong&gt;hello&lt;/strong&gt;</code>的时候 <code>&lt;%= code %&gt;</code> 会显示<code>&lt;strong&gt;hello&lt;/strong&gt;</code><br>而<code>&lt;%- code %&gt;</code>则显示加粗的hello</p>
<h2 id="实现登录页面"><a href="#实现登录页面" class="headerlink" title="实现登录页面"></a>实现登录页面</h2><p><img src="/img/signin1.png" alt="img"></p>
<p>修改 /routers/signin.js<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)();</div><div class="line"><span class="keyword">const</span> userModel = <span class="built_in">require</span>(<span class="string">'../lib/mysql.js'</span>)</div><div class="line"><span class="keyword">const</span> md5 = <span class="built_in">require</span>(<span class="string">'md5'</span>)</div><div class="line"><span class="keyword">const</span> checkNotLogin = <span class="built_in">require</span>(<span class="string">'../middlewares/check.js'</span>).checkNotLogin</div><div class="line"><span class="keyword">const</span> checkLogin = <span class="built_in">require</span>(<span class="string">'../middlewares/check.js'</span>).checkLogin</div><div class="line"></div><div class="line">router.get(<span class="string">'/signin'</span>, <span class="keyword">async</span>(ctx, next) =&gt; &#123;</div><div class="line">    <span class="keyword">await</span> checkNotLogin(ctx)</div><div class="line">    <span class="keyword">await</span> ctx.render(<span class="string">'signin'</span>, &#123;</div><div class="line">        <span class="attr">session</span>: ctx.session,</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"><span class="built_in">module</span>.exports=router</div></pre></td></tr></table></figure></p>
<p>修改 /views/signin.ejs</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">include</span>("<span class="attr">header</span>",&#123;<span class="attr">type:</span>'<span class="attr">signin</span>'&#125;) %&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form create"</span> <span class="attr">method</span>=<span class="string">"post "</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">label</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span> </div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"用户名"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">label</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span> </div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"密码"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"submit"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span>		</div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">include</span> <span class="attr">footer</span> %&gt;</span></div></pre></td></tr></table></figure>
<p>修改 index.js 文件 把下面这段代码注释去掉，之前注释是因为我们没有写signin的路由，以免报错，后面还有文章页和登出页的路由，大家记住一下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">app.use(<span class="built_in">require</span>(<span class="string">'./routers/signin.js'</span>).routes())</div></pre></td></tr></table></figure>
<p>现在注册一下来看看效果吧<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ supervisor --harmony index</div></pre></td></tr></table></figure></p>
<p><img src="/img/signup1.png" alt="img"></p>
<p>我们怎么查看我们注册好的账号和密码呢？打开mysql控制台</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ select * from users;</div></pre></td></tr></table></figure>
<p>这样刚刚我们注册的用户信息都出现了<br><img src="/img/users.png" alt="img"></p>
<p>如果你觉得这篇文章帮助到了你，那就赏脸给个star吧，<a href="https://github.com/wclimb/Koa2-blog" target="_blank" rel="external">https://github.com/wclimb/Koa2-blog</a></p>
<h2 id="登录页面"><a href="#登录页面" class="headerlink" title="登录页面"></a>登录页面</h2><p>修改signin<br>routers/signin.js<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)();</div><div class="line"><span class="keyword">const</span> userModel = <span class="built_in">require</span>(<span class="string">'../lib/mysql.js'</span>)</div><div class="line"><span class="keyword">const</span> md5 = <span class="built_in">require</span>(<span class="string">'md5'</span>)</div><div class="line"><span class="keyword">const</span> checkNotLogin = <span class="built_in">require</span>(<span class="string">'../middlewares/check.js'</span>).checkNotLogin</div><div class="line"><span class="keyword">const</span> checkLogin = <span class="built_in">require</span>(<span class="string">'../middlewares/check.js'</span>).checkLogin</div><div class="line"></div><div class="line">router.get(<span class="string">'/signin'</span>, <span class="keyword">async</span>(ctx, next) =&gt; &#123;</div><div class="line">    <span class="keyword">await</span> checkNotLogin(ctx)</div><div class="line">    <span class="keyword">await</span> ctx.render(<span class="string">'signin'</span>, &#123;</div><div class="line">        <span class="attr">session</span>: ctx.session,</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">router.post(<span class="string">'/signin'</span>, <span class="keyword">async</span>(ctx, next) =&gt; &#123;</div><div class="line">    <span class="built_in">console</span>.log(ctx.request.body)</div><div class="line">    <span class="keyword">let</span> name = ctx.request.body.name;</div><div class="line">    <span class="keyword">let</span> pass = ctx.request.body.password;</div><div class="line"></div><div class="line">    <span class="keyword">await</span> userModel.findDataByName(name)</div><div class="line">        .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</div><div class="line">            <span class="keyword">let</span> res = result</div><div class="line">            <span class="keyword">if</span> (name === res[<span class="number">0</span>][<span class="string">'name'</span>] &amp;&amp; md5(pass) === res[<span class="number">0</span>][<span class="string">'pass'</span>]) &#123;</div><div class="line">                ctx.body = <span class="literal">true</span></div><div class="line">                ctx.session.user = res[<span class="number">0</span>][<span class="string">'name'</span>]</div><div class="line">                ctx.session.id = res[<span class="number">0</span>][<span class="string">'id'</span>]</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'ctx.session.id'</span>, ctx.session.id)</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'session'</span>, ctx.session)</div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'登录成功'</span>)</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                ctx.body = <span class="literal">false</span></div><div class="line">                <span class="built_in">console</span>.log(<span class="string">'用户名或密码错误!'</span>)</div><div class="line">            &#125;</div><div class="line">        &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(err)</div><div class="line">        &#125;)</div><div class="line"></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = router</div></pre></td></tr></table></figure></p>
<p>我们进行登录操作，判断登录的用户名和密码是否有误，使用md5加密<br>我们可以看到登录成功返回的结果是<code>result</code> 结果是这样的一个json数组：id：4 name：rrr  pass：…<br>[ RowDataPacket { id: 4, name: ‘rrr’, pass: ‘44f437ced647ec3f40fa0841041871cd’ } ]</p>
<p>修改views/signin.ejs<br>signin.ejs<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">include</span>("<span class="attr">header</span>",&#123;<span class="attr">type:</span>'<span class="attr">signin</span>'&#125;) %&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form create"</span> <span class="attr">method</span>=<span class="string">"post "</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">label</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span> </div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"用户名"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">label</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span> </div><div class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"密码"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"submit"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span>		</div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">		$(<span class="built_in">window</span>).keyup(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">			<span class="comment">//console.log(e.keyCode)</span></div><div class="line">			<span class="keyword">if</span> (e.keyCode == <span class="number">13</span>) &#123;</div><div class="line">				$(<span class="string">'.submit'</span>).click()</div><div class="line">			&#125;</div><div class="line">		&#125;)</div><div class="line">		$(<span class="string">'.submit'</span>).click(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">			<span class="keyword">if</span> ($(<span class="string">'input[name=name]'</span>).val().trim() == <span class="string">''</span> || $(<span class="string">'input[name=password]'</span>).val().trim() == <span class="string">''</span> ) &#123;</div><div class="line">				fade(<span class="string">'请输入用户名或密码'</span>)</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				<span class="built_in">console</span>.log($(<span class="string">'.form'</span>).serialize())</div><div class="line">				$.ajax(&#123;</div><div class="line">					<span class="attr">url</span>: <span class="string">"/signin"</span>,</div><div class="line">					<span class="attr">data</span>: $(<span class="string">'.form'</span>).serialize(),</div><div class="line">					<span class="attr">type</span>: <span class="string">"POST"</span>,</div><div class="line">					<span class="attr">cache</span>: <span class="literal">false</span>,</div><div class="line">					<span class="attr">dataType</span>: <span class="string">'json'</span>,</div><div class="line">					<span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</div><div class="line">					    <span class="keyword">if</span> (!msg) &#123;</div><div class="line">							$(<span class="string">'input'</span>).val(<span class="string">''</span>)</div><div class="line">						    fade(<span class="string">'用户名或密码错误'</span>)</div><div class="line">					    &#125; <span class="keyword">else</span>&#123;</div><div class="line">						    fade(<span class="string">'登录成功'</span>)</div><div class="line">						    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">							    <span class="built_in">window</span>.location.href = <span class="string">"/posts"</span></div><div class="line">						    &#125;,<span class="number">1500</span>)	               	</div><div class="line">					    &#125;</div><div class="line">					&#125;,</div><div class="line">					<span class="attr">error</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">						alert(<span class="string">'异常'</span>);</div><div class="line">					&#125;</div><div class="line">				&#125;)			</div><div class="line">			&#125;</div><div class="line">		&#125;)		</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">include</span> <span class="attr">footer</span> %&gt;</span></div></pre></td></tr></table></figure></p>
<p>我们增加了ajax请求，在routers/signin.js里，我们设置如果登录失败就返回false，登录成功返回true</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">ctx.body = false</div><div class="line">ctx.body = true</div></pre></td></tr></table></figure>
<p>那我们登录成功后要做跳转，可以看到<code>window.location.href=&quot;/posts&quot;</code>跳转到posts页面</p>
<h2 id="全部文章"><a href="#全部文章" class="headerlink" title="全部文章"></a>全部文章</h2><p><img src="/img/posts1.png" alt="img"><br>修改routers/posts.js</p>
<p>posts.js<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)();</div><div class="line"><span class="keyword">const</span> userModel = <span class="built_in">require</span>(<span class="string">'../lib/mysql.js'</span>)</div><div class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">'moment'</span>)</div><div class="line"><span class="keyword">const</span> checkNotLogin = <span class="built_in">require</span>(<span class="string">'../middlewares/check.js'</span>).checkNotLogin</div><div class="line"><span class="keyword">const</span> checkLogin = <span class="built_in">require</span>(<span class="string">'../middlewares/check.js'</span>).checkLogin;</div><div class="line"><span class="keyword">const</span> md = <span class="built_in">require</span>(<span class="string">'markdown-it'</span>)();  </div><div class="line"><span class="comment">// 重置到文章页</span></div><div class="line">router.get(<span class="string">'/'</span>, <span class="keyword">async</span>(ctx, next) =&gt; &#123;</div><div class="line">    ctx.redirect(<span class="string">'/posts'</span>)</div><div class="line">&#125;)</div><div class="line"><span class="comment">// 文章页</span></div><div class="line">router.get(<span class="string">'/posts'</span>, <span class="keyword">async</span>(ctx, next) =&gt; &#123;</div><div class="line">    <span class="keyword">let</span> res,</div><div class="line">        postsLength,</div><div class="line">        name = <span class="built_in">decodeURIComponent</span>(ctx.request.querystring.split(<span class="string">'='</span>)[<span class="number">1</span>]);</div><div class="line">    <span class="keyword">if</span> (ctx.request.querystring) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ctx.request.querystring'</span>, name)</div><div class="line">        <span class="keyword">await</span> userModel.findDataByUser(name)</div><div class="line">            .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</div><div class="line">                postsLength = result.length</div><div class="line">            &#125;)</div><div class="line">        <span class="keyword">await</span> userModel.findPostByUserPage(name,<span class="number">1</span>)</div><div class="line">            .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</div><div class="line">                res = result</div><div class="line">            &#125;)</div><div class="line">        <span class="keyword">await</span> ctx.render(<span class="string">'selfPosts'</span>, &#123;</div><div class="line">            <span class="attr">session</span>: ctx.session,</div><div class="line">            <span class="attr">posts</span>: res,</div><div class="line">            <span class="attr">postsPageLength</span>:<span class="built_in">Math</span>.ceil(postsLength / <span class="number">10</span>),</div><div class="line">        &#125;)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">await</span> userModel.findPostByPage(<span class="number">1</span>)</div><div class="line">            .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</div><div class="line">                <span class="comment">//console.log(result)</span></div><div class="line">                res = result</div><div class="line">            &#125;)</div><div class="line">        <span class="keyword">await</span> userModel.findAllPost()</div><div class="line">            .then(<span class="function"><span class="params">result</span>=&gt;</span>&#123;</div><div class="line">                postsLength = result.length</div><div class="line">            &#125;)    </div><div class="line">        <span class="keyword">await</span> ctx.render(<span class="string">'posts'</span>, &#123;</div><div class="line">            <span class="attr">session</span>: ctx.session,</div><div class="line">            <span class="attr">posts</span>: res,</div><div class="line">            <span class="attr">postsLength</span>: postsLength,</div><div class="line">            <span class="attr">postsPageLength</span>: <span class="built_in">Math</span>.ceil(postsLength / <span class="number">10</span>),</div><div class="line">            </div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"><span class="comment">// 首页分页，每次输出10条</span></div><div class="line">router.post(<span class="string">'/posts/page'</span>, <span class="keyword">async</span>(ctx, next) =&gt; &#123;</div><div class="line">    <span class="keyword">let</span> page = ctx.request.body.page;</div><div class="line">    <span class="keyword">await</span> userModel.findPostByPage(page)</div><div class="line">            .then(<span class="function"><span class="params">result</span>=&gt;</span>&#123;</div><div class="line">                <span class="comment">//console.log(result)</span></div><div class="line">                ctx.body = result   </div><div class="line">            &#125;).catch(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">            ctx.body = <span class="string">'error'</span></div><div class="line">        &#125;)  </div><div class="line">&#125;)</div><div class="line"><span class="comment">// 个人文章分页，每次输出10条</span></div><div class="line">router.post(<span class="string">'/posts/self/page'</span>, <span class="keyword">async</span>(ctx, next) =&gt; &#123;</div><div class="line">    <span class="keyword">let</span> data = ctx.request.body</div><div class="line">    <span class="keyword">await</span> userModel.findPostByUserPage(data.name,data.page)</div><div class="line">            .then(<span class="function"><span class="params">result</span>=&gt;</span>&#123;</div><div class="line">                <span class="comment">//console.log(result)</span></div><div class="line">                ctx.body = result   </div><div class="line">            &#125;).catch(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">            ctx.body = <span class="string">'error'</span></div><div class="line">        &#125;)  </div><div class="line">&#125;)</div><div class="line"><span class="built_in">module</span>.exports = router</div></pre></td></tr></table></figure></p>
<p>修改 index.js</p>
<p>app.use(require(‘./routers/posts.js’).routes())的注释去掉</p>
<p>修改 views/posts.ejs</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;%- include(&quot;header&quot;,&#123;type:&apos;posts&apos;&#125;) %&gt;</div><div class="line"></div><div class="line">    posts</div><div class="line"></div><div class="line">&lt;% include footer %&gt;</div></pre></td></tr></table></figure>
<p>现在看看登录成功之后的页面吧</p>
<p>接下来我们实现登出页面</p>
<h2 id="登出页面"><a href="#登出页面" class="headerlink" title="登出页面"></a>登出页面</h2><p>修改 router/signout.js</p>
<p>signout.js<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)();</div><div class="line"></div><div class="line">router.get(<span class="string">'/signout'</span>, <span class="keyword">async</span>(ctx, next) =&gt; &#123;</div><div class="line">    ctx.session = <span class="literal">null</span>;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'登出成功'</span>)</div><div class="line">    ctx.body = <span class="literal">true</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = router</div></pre></td></tr></table></figure></p>
<p>把session设置为null即可</p>
<p>修改 index.js</p>
<p>app.use(require(‘./routers/posts.js’).routes())的注释去掉，现在把注释的路由全部取消注释就对了</p>
<p>然后我们看看 <code>views/header.ejs</code></p>
<p>我们点击登出后的ajax 的提交，成功之后回到posts页面</p>
<h2 id="发表文章"><a href="#发表文章" class="headerlink" title="发表文章"></a>发表文章</h2><p>修改router/posts<br>在后面增加<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 发表文章页面</span></div><div class="line">router.get(<span class="string">'/create'</span>, <span class="keyword">async</span>(ctx, next) =&gt; &#123;</div><div class="line">    <span class="keyword">await</span> ctx.render(<span class="string">'create'</span>, &#123;</div><div class="line">        <span class="attr">session</span>: ctx.session,</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// post 发表文章</span></div><div class="line">router.post(<span class="string">'/create'</span>, <span class="keyword">async</span>(ctx, next) =&gt; &#123;</div><div class="line">    <span class="keyword">let</span> title = ctx.request.body.title,</div><div class="line">        content = ctx.request.body.content,</div><div class="line">        id = ctx.session.id,</div><div class="line">        name = ctx.session.user,</div><div class="line">        time = moment().format(<span class="string">'YYYY-MM-DD HH:mm:ss'</span>),</div><div class="line">        avator,</div><div class="line">        <span class="comment">// 现在使用markdown不需要单独转义</span></div><div class="line">        newContent = content.replace(<span class="regexp">/[&lt;"&gt;']/g</span>, (target) =&gt; &#123; </div><div class="line">            <span class="keyword">return</span> &#123;</div><div class="line">                <span class="string">'&lt;'</span>: <span class="string">'&amp;lt;'</span>,</div><div class="line">                <span class="string">'"'</span>: <span class="string">'&amp;quot;'</span>,</div><div class="line">                <span class="string">'&gt;'</span>: <span class="string">'&amp;gt;'</span>,</div><div class="line">                <span class="string">"'"</span>: <span class="string">'&amp;#39;'</span></div><div class="line">            &#125;[target]</div><div class="line">        &#125;),</div><div class="line">        newTitle = title.replace(<span class="regexp">/[&lt;"&gt;']/g</span>, (target) =&gt; &#123;</div><div class="line">            <span class="keyword">return</span> &#123;</div><div class="line">                <span class="string">'&lt;'</span>: <span class="string">'&amp;lt;'</span>,</div><div class="line">                <span class="string">'"'</span>: <span class="string">'&amp;quot;'</span>,</div><div class="line">                <span class="string">'&gt;'</span>: <span class="string">'&amp;gt;'</span>,</div><div class="line">                <span class="string">"'"</span>: <span class="string">'&amp;#39;'</span></div><div class="line">            &#125;[target]</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    <span class="comment">//console.log([name, newTitle, content, id, time])</span></div><div class="line">    <span class="keyword">await</span> userModel.findUserData(ctx.session.user)</div><div class="line">        .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(res[<span class="number">0</span>][<span class="string">'avator'</span>])</div><div class="line">            avator = res[<span class="number">0</span>][<span class="string">'avator'</span>]       </div><div class="line">        &#125;)</div><div class="line">    <span class="keyword">await</span> userModel.insertPost([name, newTitle, md.render(content), content, id, time,avator])</div><div class="line">            .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                ctx.body = <span class="literal">true</span></div><div class="line">            &#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                ctx.body = <span class="literal">false</span></div><div class="line">            &#125;)</div><div class="line"></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>修改 views/create.ejs</p>
<p>create.ejs<br><img src="/img/create1.png" alt="img"><br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">include</span>("<span class="attr">header</span>",&#123;<span class="attr">type:</span>'<span class="attr">create</span>'&#125;) %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">style</span>=<span class="string">"width:100%"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">class</span>=<span class="string">"form create"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span>标题：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"请输入标题"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"title"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span>内容：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">placeholder</span>=<span class="string">"请输入内容"</span> <span class="attr">name</span>=<span class="string">"content"</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">cols</span>=<span class="string">"42"</span> <span class="attr">rows</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"submit"</span>&gt;</span>发表<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    $(<span class="string">'.submit'</span>).click(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">        <span class="keyword">if</span> ($(<span class="string">'input[name=title]'</span>).val().trim() == <span class="string">''</span>) &#123;</div><div class="line">            fade(<span class="string">'请输入标题'</span>)</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> ($(<span class="string">'textarea'</span>).val().trim() == <span class="string">''</span>) &#123;</div><div class="line">            fade(<span class="string">'请输入内容'</span>)</div><div class="line">        &#125;<span class="keyword">else</span>&#123;          </div><div class="line">            $.ajax(&#123;</div><div class="line">                <span class="attr">url</span>: <span class="string">"/create"</span>,</div><div class="line">                <span class="attr">data</span>: $(<span class="string">'.form'</span>).serialize(),</div><div class="line">                <span class="attr">type</span>: <span class="string">"POST"</span>,</div><div class="line">                <span class="attr">cache</span>: <span class="literal">false</span>,</div><div class="line">                <span class="attr">dataType</span>: <span class="string">'json'</span>,</div><div class="line">                <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</div><div class="line">                    <span class="keyword">if</span> (msg) &#123;</div><div class="line">                        fade(<span class="string">'发表成功'</span>)</div><div class="line">                        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">                            <span class="built_in">window</span>.location.href=<span class="string">"/posts"</span></div><div class="line">                        &#125;,<span class="number">1000</span>)</div><div class="line">                    &#125;<span class="keyword">else</span>&#123;</div><div class="line">                        fade(<span class="string">'发表失败'</span>)</div><div class="line">                    &#125;</div><div class="line">                &#125;,</div><div class="line">                <span class="attr">error</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                    alert(<span class="string">'异常'</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;)			</div><div class="line">        &#125;   </div><div class="line">    &#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">include</span> <span class="attr">footer</span> %&gt;</span></div></pre></td></tr></table></figure></p>
<p>现在看看能不能发表吧</p>
<p>即使我们发表了文章，但是当前我们的posts的页面没有显示，因为还没有获取到数据</p>
<p>我们可以看我们之前写的代码 <code>router.get(&#39;/posts&#39;, async(ctx, next) =&gt; {}</code>路由<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> (ctx.request.querystring) &#123;</div><div class="line">	...</div><div class="line">&#125;<span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">await</span> userModel.findPostByPage(<span class="number">1</span>)</div><div class="line">            .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</div><div class="line">                <span class="comment">//console.log(result)</span></div><div class="line">                res = result</div><div class="line">            &#125;)</div><div class="line">        <span class="keyword">await</span> userModel.findAllPost()</div><div class="line">            .then(<span class="function"><span class="params">result</span>=&gt;</span>&#123;</div><div class="line">                postsLength = result.length</div><div class="line">            &#125;)    </div><div class="line">        <span class="keyword">await</span> ctx.render(<span class="string">'posts'</span>, &#123;</div><div class="line">            <span class="attr">session</span>: ctx.session,</div><div class="line">            <span class="attr">posts</span>: res,</div><div class="line">            <span class="attr">postsLength</span>: postsLength,</div><div class="line">            <span class="attr">postsPageLength</span>: <span class="built_in">Math</span>.ceil(postsLength / <span class="number">10</span>),</div><div class="line">            </div><div class="line">        &#125;)</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>if前面这部分我们先不用管，后面会说。只需要看else后面的代码我们通过<code>userModel.findPostByPage(1)</code>来获取第一页的数据，然后查找所有文章的数量，最后除以10拿到首页文章的页数，把数据<code>postsPageLength</code>的值传给模板posts.ejs。这样就可以渲染出来了</p>
<p>修改 views/posts.ejs</p>
<p>posts.ejs</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">include</span>("<span class="attr">header</span>",&#123;<span class="attr">type:</span>'<span class="attr">all</span>'&#125;) %&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"posts"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">%</span> <span class="attr">posts.forEach</span>(<span class="attr">function</span>(<span class="attr">res</span>)&#123; %&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"author"</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">span</span> <span class="attr">title</span>=<span class="string">"&lt;%= res.name %&gt;"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/posts?author=&lt;%= res.name %&gt; "</span>&gt;</span>author: <span class="tag">&lt;<span class="name">%=</span> <span class="attr">res.name</span> %&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">span</span>&gt;</span>评论数：<span class="tag">&lt;<span class="name">%=</span> <span class="attr">res.comments</span> %&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">span</span>&gt;</span>浏览量：<span class="tag">&lt;<span class="name">%=</span> <span class="attr">res.pv</span> %&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"comment_pv"</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">res.moment</span> %&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/posts/&lt;%= res.id %&gt;"</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"userAvator"</span> <span class="attr">src</span>=<span class="string">"images/&lt;%= res.avator %&gt;.png"</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">%=</span> <span class="attr">res.title</span> %&gt;</span></div><div class="line">						<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content markdown"</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">%-</span> <span class="attr">res.content</span> %&gt;</span></div><div class="line">						<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">%</span> &#125;) %&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"margin-top: 30px"</span> <span class="attr">class</span>=<span class="string">"pagination"</span> <span class="attr">id</span>=<span class="string">"page"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>	</div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://www.wclimb.site/pagination/pagination.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="xml"></span></div><div class="line">		pagination(&#123;</div><div class="line">			selector: '#page',</div><div class="line">			totalPage: <span class="tag">&lt;<span class="name">%=</span> <span class="attr">postsPageLength</span> %&gt;</span>,</div><div class="line">			currentPage: 1,</div><div class="line">			prev: '上一页',</div><div class="line">			next: '下一页',</div><div class="line">			first: true,</div><div class="line">			last: true,</div><div class="line">			showTotalPage: true,</div><div class="line">			count: 2//当前页前后显示的数量</div><div class="line">		&#125;,function(val)&#123;</div><div class="line">			// 当前页</div><div class="line">			$.ajax(&#123;</div><div class="line">				url: "posts/page",</div><div class="line">				type: 'POST',</div><div class="line">				data:&#123;</div><div class="line">					page: val</div><div class="line">				&#125;,</div><div class="line">				cache: false,</div><div class="line">				success: function (msg) &#123;</div><div class="line">					console.log(msg)</div><div class="line">					if (msg != 'error') &#123;</div><div class="line">						$('.posts').html(' ')</div><div class="line">						$.each(msg,function(i,val)&#123;</div><div class="line">							//console.log(val.content)</div><div class="line">							$('.posts').append(</div><div class="line">								'<span class="tag">&lt;<span class="name">li</span>&gt;</span>'+</div><div class="line">									'<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">\</span>"<span class="attr">author</span>\"&gt;</span>'+</div><div class="line">										'<span class="tag">&lt;<span class="name">span</span> <span class="attr">title</span>=<span class="string">\</span>"'+ <span class="attr">val.name</span> +'\"&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">\</span>"/<span class="attr">posts</span>?<span class="attr">author</span>=<span class="string">'+ val.name +'</span> \"&gt;</span>author: '+ val.name +'<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>'+</div><div class="line">										'<span class="tag">&lt;<span class="name">span</span>&gt;</span>评论数：'+ val.comments +'<span class="tag">&lt;/<span class="name">span</span>&gt;</span>'+</div><div class="line">										'<span class="tag">&lt;<span class="name">span</span>&gt;</span>浏览量：'+ val.pv +'<span class="tag">&lt;/<span class="name">span</span>&gt;</span>'+</div><div class="line">									'<span class="tag">&lt;/<span class="name">div</span>&gt;</span>'+</div><div class="line">									'<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">\</span>"<span class="attr">comment_pv</span>\"&gt;</span>'+</div><div class="line">										'<span class="tag">&lt;<span class="name">span</span>&gt;</span>'+ val.moment +'<span class="tag">&lt;/<span class="name">span</span>&gt;</span>'+</div><div class="line">									'<span class="tag">&lt;/<span class="name">div</span>&gt;</span>'+</div><div class="line">									'<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">\</span>"/<span class="attr">posts</span>/'+ <span class="attr">val.id</span> +'\"&gt;</span>'+</div><div class="line">										'<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">\</span>"<span class="attr">title</span>\"&gt;</span>'+</div><div class="line">											'<span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"userAvator"</span> <span class="attr">src</span>=<span class="string">"images/'+ val.avator +'.png"</span>&gt;</span>'+</div><div class="line">											 val.title +</div><div class="line">										'<span class="tag">&lt;/<span class="name">div</span>&gt;</span>'+</div><div class="line">										'<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">\</span>"<span class="attr">content</span>\"&gt;</span>'+</div><div class="line">											 val.content +</div><div class="line">										'<span class="tag">&lt;/<span class="name">div</span>&gt;</span>'+</div><div class="line">									'<span class="tag">&lt;/<span class="name">a</span>&gt;</span>'+</div><div class="line">								'<span class="tag">&lt;/<span class="name">li</span>&gt;</span>'</div><div class="line">							)</div><div class="line">						&#125;)</div><div class="line">					&#125;else&#123;</div><div class="line">						alert('分页不存在')</div><div class="line">					&#125; </div><div class="line">				&#125;</div><div class="line">			&#125;)</div><div class="line">		&#125;)</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">include</span> <span class="attr">footer</span> %&gt;</span></div></pre></td></tr></table></figure>
<p>现在看看posts页面有没有文章出现了</p>
<p>我们看到是所第一页的文章数据，初始化的稍后我们是用服务端渲染的数据，使用了分页，每页显示10条数据，然后通过请求页数。<br>下面是服务端请求拿到的第一页的数据<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">await userModel.findPostByUserPage(name,1)</div><div class="line">        .then(result =&gt; &#123;</div><div class="line">            res = result</div><div class="line">        &#125;)</div></pre></td></tr></table></figure></p>
<p>要拿到别的页面数据的话要向服务器发送post请求，如下<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">// 首页分页，每次输出10条</div><div class="line">router.post(&apos;/posts/page&apos;, async(ctx, next) =&gt; &#123;</div><div class="line">    let page = ctx.request.body.page;</div><div class="line">    await userModel.findPostByPage(page)</div><div class="line">            .then(result=&gt;&#123;</div><div class="line">                //console.log(result)</div><div class="line">                ctx.body = result   </div><div class="line">            &#125;).catch(()=&gt;&#123;</div><div class="line">            ctx.body = &apos;error&apos;</div><div class="line">        &#125;)  </div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="单篇文章页面"><a href="#单篇文章页面" class="headerlink" title="单篇文章页面"></a>单篇文章页面</h2><p><img src="/img/postcontent1.png" alt="img"><br>但是我需要点击单篇文章的时候，显示一篇文章怎么办呢？</p>
<p>修改 routers/posts.js</p>
<p>在posts.js后面增加</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 单篇文章页</span></div><div class="line">router.get(<span class="string">'/posts/:postId'</span>, <span class="keyword">async</span>(ctx, next) =&gt; &#123;</div><div class="line">    <span class="keyword">let</span> comment_res,</div><div class="line">        res,</div><div class="line">        pageOne,</div><div class="line">        res_pv; </div><div class="line">    <span class="keyword">await</span> userModel.findDataById(ctx.params.postId)</div><div class="line">        .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</div><div class="line">            <span class="comment">//console.log(result )</span></div><div class="line">            res = result</div><div class="line">            res_pv = <span class="built_in">parseInt</span>(result[<span class="number">0</span>][<span class="string">'pv'</span>])</div><div class="line">            res_pv += <span class="number">1</span></div><div class="line">           <span class="comment">// console.log(res_pv)</span></div><div class="line">        &#125;)</div><div class="line">    <span class="keyword">await</span> userModel.updatePostPv([res_pv, ctx.params.postId])</div><div class="line">    <span class="keyword">await</span> userModel.findCommentByPage(<span class="number">1</span>,ctx.params.postId)</div><div class="line">        .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</div><div class="line">            pageOne = result</div><div class="line">            <span class="comment">//console.log('comment', comment_res)</span></div><div class="line">        &#125;)</div><div class="line">    <span class="keyword">await</span> userModel.findCommentById(ctx.params.postId)</div><div class="line">        .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</div><div class="line">            comment_res = result</div><div class="line">            <span class="comment">//console.log('comment', comment_res)</span></div><div class="line">        &#125;)</div><div class="line">    <span class="keyword">await</span> ctx.render(<span class="string">'sPost'</span>, &#123;</div><div class="line">        <span class="attr">session</span>: ctx.session,</div><div class="line">        <span class="attr">posts</span>: res[<span class="number">0</span>],</div><div class="line">        <span class="attr">commentLenght</span>: comment_res.length,</div><div class="line">        <span class="attr">commentPageLenght</span>: <span class="built_in">Math</span>.ceil(comment_res.length/<span class="number">10</span>),</div><div class="line">        <span class="attr">pageOne</span>:pageOne</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>现在的设计是，我们点进去出现的url是 /posts/1 这类的 1代表该篇文章的id，我们在数据库建表的时候就处理了，让id为主键，然后递增</p>
<p>我们通过userModel.findDataById 文章的id来查找数据库<br>我们通过userModel.findCommentById 文章的id来查找文章的评论，因为单篇文章里面有评论的功能<br>最后通过sPost.ejs模板渲染单篇文章</p>
<p>修改 views/sPost.ejs</p>
<p>sPost.ejs</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">include</span>("<span class="attr">header</span>",&#123;<span class="attr">type:</span>''&#125;) %&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"posts spost"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"author"</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">span</span> <span class="attr">title</span>=<span class="string">"&lt;%= posts.name %&gt;"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/posts?author=&lt;%= posts.name %&gt; "</span>&gt;</span>author: <span class="tag">&lt;<span class="name">%=</span> <span class="attr">posts.name</span> %&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">span</span>&gt;</span>评论数：<span class="tag">&lt;<span class="name">%=</span> <span class="attr">posts.comments</span> %&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">span</span>&gt;</span>浏览量：<span class="tag">&lt;<span class="name">%=</span> <span class="attr">posts.pv</span> %&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"comment_pv"</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">posts.moment</span> %&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/posts/&lt;%= posts.id %&gt;"</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"userAvator"</span> <span class="attr">src</span>=<span class="string">"../images/&lt;%= posts.avator %&gt;.png"</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">%=</span> <span class="attr">posts.title</span> %&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content markdown"</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">%-</span> <span class="attr">posts.content</span> %&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"edit"</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(<span class="attr">session</span> &amp;&amp; <span class="attr">session.user</span> ===  <span class="string">posts.name</span>  )&#123; %&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%= posts['id'] %&gt;/edit"</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"delete_post"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"comment_wrap"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(<span class="attr">session.user</span>)&#123; %&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"/&lt;%= posts.id %&gt;"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">"spContent"</span> <span class="attr">name</span>=<span class="string">"content"</span> <span class="attr">cols</span>=<span class="string">"82"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"submit"</span>&gt;</span>发表留言<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">%</span> &#125; <span class="attr">else</span>&#123; %&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"tips"</span>&gt;</span>登录之后才可以评论哟<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">commentPageLenght</span> &gt;</span> 0) &#123; %&gt;</div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"comment_list markdown"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">%</span> <span class="attr">pageOne.forEach</span>(<span class="attr">function</span>(<span class="attr">res</span>)&#123; %&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cmt_lists"</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cmt_content"</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"userMsg"</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../images/&lt;%= res['avator'] %&gt;.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">res</span>['<span class="attr">name</span>'] %&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">						<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cmt_detail"</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">%-</span> <span class="attr">res</span>['<span class="attr">content</span>'] %&gt;</span></div><div class="line">						<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"cmt_time"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">res</span>['<span class="attr">moment</span>'] %&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"cmt_name"</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span>(<span class="attr">session</span> &amp;&amp; <span class="attr">session.user</span> ===  <span class="string">res[</span>'<span class="attr">name</span>'])&#123; %&gt;</span></div><div class="line">								<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"delete_comment"</span> <span class="attr">href</span>=<span class="string">"javascript:delete_comment(&lt;%= res['id'] %&gt;);"</span>&gt;</span> 删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div><div class="line">						<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">%</span> &#125;) %&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span>	</div><div class="line">		<span class="tag">&lt;<span class="name">%</span> &#125; <span class="attr">else</span>&#123; %&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"tips"</span>&gt;</span>还没有评论，赶快去评论吧！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"margin-top: 30px"</span> <span class="attr">class</span>=<span class="string">"pagination"</span> <span class="attr">id</span>=<span class="string">"page"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>	</div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://www.wclimb.site/pagination/pagination.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="xml"></span></div><div class="line">		var userName = "<span class="tag">&lt;<span class="name">%-</span> <span class="attr">session.user</span> %&gt;</span>"</div><div class="line">		pagination(&#123;</div><div class="line">			selector: '#page',</div><div class="line">			totalPage: <span class="tag">&lt;<span class="name">%=</span> <span class="attr">commentPageLenght</span> %&gt;</span>,</div><div class="line">			currentPage: 1,</div><div class="line">			prev: '上一页',</div><div class="line">			next: '下一页',</div><div class="line">			first: true,</div><div class="line">			last: true,</div><div class="line">			showTotalPage:true,</div><div class="line">			count: 2//当前页前面显示的数量</div><div class="line">		&#125;,function(val)&#123;</div><div class="line">			// 当前页</div><div class="line">			var _comment = ''</div><div class="line">			$.ajax(&#123;</div><div class="line">				url: "<span class="tag">&lt;<span class="name">%=</span> <span class="attr">posts.id</span> %&gt;</span>/commentPage",</div><div class="line">				type: 'POST',</div><div class="line">				data:&#123;</div><div class="line">					page: val</div><div class="line">				&#125;,</div><div class="line">				cache: false,</div><div class="line">				success: function (msg) &#123;</div><div class="line">					//console.log(msg)</div><div class="line">					_comment = ''</div><div class="line">					if (msg != 'error') &#123;</div><div class="line">						$('.comment_list').html(' ')</div><div class="line">						$.each(msg,function(i,val)&#123;</div><div class="line">							//console.log(val.content)</div><div class="line">							_comment += '<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">\</span>"<span class="attr">cmt_lists</span>\"&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">\</span>"<span class="attr">cmt_content</span>\"&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">\</span>"<span class="attr">userMsg</span>\"&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> = <span class="string">\</span>"<span class="attr">..</span>/<span class="attr">images</span>/'+ <span class="attr">val.avator</span> +'<span class="attr">.png</span>\" &gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>'+ val.name +'<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span> &gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cmt_detail"</span>&gt;</span>'+ val.content + '<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">\</span>"<span class="attr">cmt_time</span>\"&gt;</span>'+ val.moment +'<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">\</span>"<span class="attr">cmt_name</span>\"&gt;</span>';</div><div class="line">								if (val.name == userName) &#123;</div><div class="line">									_comment += '<span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">\</span>"<span class="attr">delete_comment</span>\" <span class="attr">href</span>=<span class="string">\</span>"<span class="attr">javascript:delete_comment</span>('+ <span class="attr">val.id</span> +');\"&gt;</span> 删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span>'</div><div class="line">								&#125;</div><div class="line">							_comment += '<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</div><div class="line">						&#125;)</div><div class="line">						$('.comment_list').append(_comment)</div><div class="line">					&#125;else&#123;</div><div class="line">						alert('分页不存在')</div><div class="line">					&#125; </div><div class="line">				&#125;</div><div class="line">			&#125;)</div><div class="line">		</div><div class="line">		&#125;)</div><div class="line">		</div><div class="line">		// 删除文章</div><div class="line">		$('.delete_post').click(() =&gt; &#123;</div><div class="line">			$.ajax(&#123;</div><div class="line">				url: "<span class="tag">&lt;<span class="name">%=</span> <span class="attr">posts.id</span> %&gt;</span>/remove",</div><div class="line">				type: 'POST',</div><div class="line">				cache: false,</div><div class="line">				success: function (msg) &#123;</div><div class="line">					if (msg.data == 1) &#123;</div><div class="line">						fade('删除文章成功')</div><div class="line">						setTimeout(() =&gt; &#123;</div><div class="line">							window.location.href = "/posts"</div><div class="line">						&#125;, 1000)</div><div class="line">					&#125; else if (msg.data == 2) &#123;</div><div class="line">						fade('删除文章失败');</div><div class="line">						setTimeout(() =&gt; &#123;</div><div class="line">							window.location.reload()</div><div class="line">						&#125;, 1000)</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;)</div><div class="line">		&#125;)</div><div class="line">		// 评论</div><div class="line">		var isAllow = true</div><div class="line">		$('.submit').click(function()&#123;</div><div class="line">			if (!isAllow) return</div><div class="line">			isAllow = false</div><div class="line">			if ($('textarea').val().trim() == '') &#123;</div><div class="line">				fade('请输入评论！')</div><div class="line">			&#125;else&#123;</div><div class="line">				$.ajax(&#123;</div><div class="line">					url: '/' + location.pathname.split('/')[2],</div><div class="line">					data:$('.form').serialize(),</div><div class="line">					type: "POST",</div><div class="line">					cache: false,</div><div class="line">					dataType: 'json',</div><div class="line">					success: function (msg) &#123;</div><div class="line">						if (msg) &#123;</div><div class="line">							fade('发表留言成功')							</div><div class="line">							setTimeout(()=&gt;&#123;</div><div class="line">								isAllow = true</div><div class="line">								window.location.reload()</div><div class="line">							&#125;,1500)  	</div><div class="line">						&#125;</div><div class="line">					&#125;,</div><div class="line">					error: function () &#123;</div><div class="line">						alert('异常');</div><div class="line">					&#125;</div><div class="line">				&#125;)</div><div class="line">			&#125;</div><div class="line">		&#125;)</div><div class="line">		// 删除评论</div><div class="line">		function delete_comment(id) &#123;</div><div class="line">			$.ajax(&#123;</div><div class="line">				url: "<span class="tag">&lt;<span class="name">%=</span> <span class="attr">posts.id</span> %&gt;</span>/comment/" + id + "/remove",</div><div class="line">				type: 'POST',</div><div class="line">				cache: false,</div><div class="line">				success: function (msg) &#123;</div><div class="line">					if (msg.data == 1) &#123;</div><div class="line">						fade('删除留言成功')</div><div class="line">						setTimeout(() =&gt; &#123;</div><div class="line">							window.location.reload()</div><div class="line">						&#125;, 1000)</div><div class="line">					&#125; else if (msg.data == 2) &#123;</div><div class="line">						fade('删除留言失败');</div><div class="line">						setTimeout(() =&gt; &#123;</div><div class="line">							window.location.reload()</div><div class="line">						&#125;, 1500)</div><div class="line">					&#125;</div><div class="line">				&#125;,</div><div class="line">				error: function () &#123;</div><div class="line">					alert('异常')</div><div class="line">				&#125;</div><div class="line">			&#125;)</div><div class="line">		&#125;</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">include</span> <span class="attr">footer</span> %&gt;</span></div></pre></td></tr></table></figure>
<p>现在点击单篇文章试试，进入单篇文章页面，但是编辑、删除、评论都还没有做，点击无效，我们先不做，先实现每个用户自己发表的文章列表，我们之前在 get ‘/posts’ 里面说先忽略if (ctx.request.querystring) {}里面的代码，这里是做了一个处理，假如用户点击了某个用户，该用户发表了几篇文章，我们需要只显示该用户发表的文章，那么进入的url应该是 /posts?author=xxx ,这个处理在posts.ejs 就已经加上了，就在文章的左下角，作者：xxx就是一个链接。我们通过判断用户来查找文章，继而有了<code>ctx.request.querystring</code> 获取到的是：<code>author=xxx</code></p>
<p>注：这里我们处理了，通过判断 <code>session.user ===  res[&#39;name&#39;]</code> 如果不是该用户发的文章，不能编辑和删除，评论也是。这里面也可以注意一下包裹的<code>&lt;a href=&quot;&quot;&gt;&lt;/a&gt;</code>标签</p>
<h2 id="个人已发表文章列表里面"><a href="#个人已发表文章列表里面" class="headerlink" title="个人已发表文章列表里面"></a>个人已发表文章列表里面</h2><p>还记得之前在 get ‘/post’ 里面的代码吗？<br>下面的代码就是之前说先不处理的代码片段，不过这个不用再次添加，之前已经添加好了，这段代码处理个人发布的文章列表，我们是通过selfPosts.ejs模板来渲染的，样式和全部文章列表一样，但是牵扯到分页的问题，<br>分页请求的是不同的接口地址</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> (ctx.request.querystring) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'ctx.request.querystring'</span>, name)</div><div class="line">        <span class="keyword">await</span> userModel.findDataByUser(name)</div><div class="line">            .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</div><div class="line">                postsLength = result.length</div><div class="line">            &#125;)</div><div class="line">        <span class="keyword">await</span> userModel.findPostByUserPage(name,<span class="number">1</span>)</div><div class="line">            .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</div><div class="line">                res = result</div><div class="line">            &#125;)</div><div class="line">        <span class="keyword">await</span> ctx.render(<span class="string">'selfPosts'</span>, &#123;</div><div class="line">            <span class="attr">session</span>: ctx.session,</div><div class="line">            <span class="attr">posts</span>: res,</div><div class="line">            <span class="attr">postsPageLength</span>:<span class="built_in">Math</span>.ceil(postsLength / <span class="number">10</span>),</div><div class="line">        &#125;)</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>修改 selfPost.ejs</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">include</span>("<span class="attr">header</span>",&#123;<span class="attr">type:</span>'<span class="attr">my</span>'&#125;) %&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"posts"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">%</span> <span class="attr">posts.forEach</span>(<span class="attr">function</span>(<span class="attr">res</span>)&#123; %&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"author"</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">span</span> <span class="attr">title</span>=<span class="string">"&lt;%= res.name %&gt;"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/posts?author=&lt;%= res.name %&gt; "</span>&gt;</span>author: <span class="tag">&lt;<span class="name">%=</span> <span class="attr">res.name</span> %&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">span</span>&gt;</span>评论数：<span class="tag">&lt;<span class="name">%=</span> <span class="attr">res.comments</span> %&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">span</span>&gt;</span>浏览量：<span class="tag">&lt;<span class="name">%=</span> <span class="attr">res.pv</span> %&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"comment_pv"</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">res.moment</span> %&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/posts/&lt;%= res.id %&gt;"</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"userAvator"</span> <span class="attr">src</span>=<span class="string">"images/&lt;%= res.avator %&gt;.png"</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">%=</span> <span class="attr">res.title</span> %&gt;</span></div><div class="line">						<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content markdown"</span>&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">%-</span> <span class="attr">res.content</span> %&gt;</span></div><div class="line">						<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">%</span> &#125;) %&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"margin-top: 30px"</span> <span class="attr">class</span>=<span class="string">"pagination"</span> <span class="attr">id</span>=<span class="string">"page"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>	</div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://www.wclimb.site/pagination/pagination.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="xml"></span></div><div class="line">		pagination(&#123;</div><div class="line">			selector: '#page',</div><div class="line">			totalPage: <span class="tag">&lt;<span class="name">%=</span> <span class="attr">postsPageLength</span> %&gt;</span>,</div><div class="line">			currentPage: 1,</div><div class="line">			prev: '上一页',</div><div class="line">			next: '下一页',</div><div class="line">			first: true,</div><div class="line">			last: true,</div><div class="line">			showTotalPage: true,</div><div class="line">			count: 2//当前页前后显示的数量</div><div class="line">		&#125;,function(val)&#123;</div><div class="line">			// 当前页</div><div class="line">			$.ajax(&#123;</div><div class="line">				url: "posts/self/page",</div><div class="line">				type: 'POST',</div><div class="line">				data:&#123;</div><div class="line">					page: val,</div><div class="line">					name: location.search.slice(1).split('=')[1]</div><div class="line">				&#125;,</div><div class="line">				cache: false,</div><div class="line">				success: function (msg) &#123;</div><div class="line">					//console.log(msg)</div><div class="line">					if (msg != 'error') &#123;</div><div class="line">						$('.posts').html(' ')</div><div class="line">						$.each(msg,function(i,val)&#123;</div><div class="line">							//console.log(val.content)</div><div class="line">							$('.posts').append(</div><div class="line">								'<span class="tag">&lt;<span class="name">li</span>&gt;</span>'+</div><div class="line">									'<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">\</span>"<span class="attr">author</span>\"&gt;</span>'+</div><div class="line">										'<span class="tag">&lt;<span class="name">span</span> <span class="attr">title</span>=<span class="string">\</span>"'+ <span class="attr">val.name</span> +'\"&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">\</span>"/<span class="attr">posts</span>?<span class="attr">author</span>=<span class="string">'+ val.name +'</span> \"&gt;</span>author: '+ val.name +'<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>'+</div><div class="line">										'<span class="tag">&lt;<span class="name">span</span>&gt;</span>评论数：'+ val.comments +'<span class="tag">&lt;/<span class="name">span</span>&gt;</span>'+</div><div class="line">										'<span class="tag">&lt;<span class="name">span</span>&gt;</span>浏览量：'+ val.pv +'<span class="tag">&lt;/<span class="name">span</span>&gt;</span>'+</div><div class="line">									'<span class="tag">&lt;/<span class="name">div</span>&gt;</span>'+</div><div class="line">									'<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">\</span>"<span class="attr">comment_pv</span>\"&gt;</span>'+</div><div class="line">										'<span class="tag">&lt;<span class="name">span</span>&gt;</span>'+ val.moment +'<span class="tag">&lt;/<span class="name">span</span>&gt;</span>'+</div><div class="line">									'<span class="tag">&lt;/<span class="name">div</span>&gt;</span>'+</div><div class="line">									'<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">\</span>"/<span class="attr">posts</span>/'+ <span class="attr">val.id</span> +'\"&gt;</span>'+</div><div class="line">										'<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">\</span>"<span class="attr">title</span>\"&gt;</span>'+</div><div class="line">											'<span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"userAvator"</span> <span class="attr">src</span>=<span class="string">"images/' + val.avator + '.png"</span>&gt;</span>' +</div><div class="line">											 val.title +</div><div class="line">										'<span class="tag">&lt;/<span class="name">div</span>&gt;</span>'+</div><div class="line">										'<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">\</span>"<span class="attr">content</span>\"&gt;</span>'+</div><div class="line">											 val.content +</div><div class="line">										'<span class="tag">&lt;/<span class="name">div</span>&gt;</span>'+</div><div class="line">									'<span class="tag">&lt;/<span class="name">a</span>&gt;</span>'+</div><div class="line">								'<span class="tag">&lt;/<span class="name">li</span>&gt;</span>'</div><div class="line">							)</div><div class="line">						&#125;)</div><div class="line">					&#125;else&#123;</div><div class="line">						alert('分页不存在')</div><div class="line">					&#125; </div><div class="line">				&#125;</div><div class="line">			&#125;)</div><div class="line">		</div><div class="line">		&#125;)</div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">include</span> <span class="attr">footer</span> %&gt;</span></div></pre></td></tr></table></figure>
<h2 id="编辑文章、删除文章、评论、删除评论"><a href="#编辑文章、删除文章、评论、删除评论" class="headerlink" title="编辑文章、删除文章、评论、删除评论"></a>编辑文章、删除文章、评论、删除评论</h2><blockquote>
<p>评论</p>
</blockquote>
<p>修改routers/posts.js </p>
<p>在post.js 后面增加</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 发表评论</span></div><div class="line">router.post(<span class="string">'/:postId'</span>, <span class="keyword">async</span>(ctx, next) =&gt; &#123;</div><div class="line">    <span class="keyword">let</span> name = ctx.session.user,</div><div class="line">        content = ctx.request.body.content,</div><div class="line">        postId = ctx.params.postId,</div><div class="line">        res_comments,</div><div class="line">        time = moment().format(<span class="string">'YYYY-MM-DD HH:mm:ss'</span>),</div><div class="line">        avator;</div><div class="line">    <span class="keyword">await</span> userModel.findUserData(ctx.session.user)</div><div class="line">        .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(res[<span class="number">0</span>][<span class="string">'avator'</span>])</div><div class="line">            avator = res[<span class="number">0</span>][<span class="string">'avator'</span>]</div><div class="line">        &#125;)   </div><div class="line">    <span class="keyword">await</span> userModel.insertComment([name, md.render(content),time, postId,avator])</div><div class="line">    <span class="keyword">await</span> userModel.findDataById(postId)</div><div class="line">        .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</div><div class="line">            res_comments = <span class="built_in">parseInt</span>(result[<span class="number">0</span>][<span class="string">'comments'</span>])</div><div class="line">            res_comments += <span class="number">1</span></div><div class="line">        &#125;)</div><div class="line">    <span class="keyword">await</span> userModel.updatePostComment([res_comments, postId])</div><div class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            ctx.body = <span class="literal">true</span></div><div class="line">        &#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            ctx.body = <span class="literal">false</span></div><div class="line">        &#125;)</div><div class="line">&#125;)</div><div class="line"><span class="comment">// 评论分页</span></div><div class="line">router.post(<span class="string">'/posts/:postId/commentPage'</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">ctx</span>)</span>&#123;</div><div class="line">    <span class="keyword">let</span> postId = ctx.params.postId,</div><div class="line">        page = ctx.request.body.page;</div><div class="line">    <span class="keyword">await</span> userModel.findCommentByPage(page,postId)</div><div class="line">        .then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</div><div class="line">            ctx.body = res</div><div class="line">        &#125;).catch(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">            ctx.body = <span class="string">'error'</span></div><div class="line">        &#125;)  </div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>现在试试发表评论的功能吧，之所以这样简单，因为我们之前就在sPost.ejs做了好几个ajax的处理，删除文章和评论也是如此<br>评论我们也做了分页，所以后面会有一个评论的分页的接口，我们已经在sPost.ejs里面写好了ajax请求</p>
<blockquote>
<p>删除评论</p>
</blockquote>
<p>修改routers/posts.js </p>
<p>继续在post.js 后面增加</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 删除评论</span></div><div class="line">router.post(<span class="string">'/posts/:postId/comment/:commentId/remove'</span>, <span class="keyword">async</span>(ctx, next) =&gt; &#123;</div><div class="line">    <span class="keyword">let</span> postId = ctx.params.postId,</div><div class="line">        commentId = ctx.params.commentId,</div><div class="line">        res_comments;</div><div class="line">    <span class="keyword">await</span> userModel.findDataById(postId)</div><div class="line">        .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</div><div class="line">            res_comments = <span class="built_in">parseInt</span>(result[<span class="number">0</span>][<span class="string">'comments'</span>])</div><div class="line">            <span class="comment">//console.log('res', res_comments)</span></div><div class="line">            res_comments -= <span class="number">1</span></div><div class="line">            <span class="comment">//console.log(res_comments)</span></div><div class="line">        &#125;)</div><div class="line">    <span class="keyword">await</span> userModel.updatePostComment([res_comments, postId])</div><div class="line">    <span class="keyword">await</span> userModel.deleteComment(commentId)</div><div class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            ctx.body = &#123;</div><div class="line">                <span class="attr">data</span>: <span class="number">1</span></div><div class="line">            &#125;</div><div class="line">        &#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            ctx.body = &#123;</div><div class="line">                <span class="attr">data</span>: <span class="number">2</span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>现在试试删除评论的功能吧</p>
<blockquote>
<p>删除文章</p>
</blockquote>
<p>只有自己发表的文字删除的文字才会显示出来，才能被删除，</p>
<p>修改routers/posts.js </p>
<p>继续在post.js 后面增加</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 删除单篇文章</span></div><div class="line">router.post(<span class="string">'/posts/:postId/remove'</span>, <span class="keyword">async</span>(ctx, next) =&gt; &#123;</div><div class="line">    <span class="keyword">let</span> postId = ctx.params.postId</div><div class="line">    <span class="keyword">await</span> userModel.deleteAllPostComment(postId)</div><div class="line">    <span class="keyword">await</span> userModel.deletePost(postId)</div><div class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            ctx.body = &#123;</div><div class="line">                <span class="attr">data</span>: <span class="number">1</span></div><div class="line">            &#125;</div><div class="line">        &#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            ctx.body = &#123;</div><div class="line">                <span class="attr">data</span>: <span class="number">2</span></div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>现在试试删除文章的功能吧</p>
<blockquote>
<p>编辑文章</p>
</blockquote>
<p>修改routers/posts.js </p>
<p>继续在post.js 后面增加</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 编辑单篇文章页面</span></div><div class="line">router.get(<span class="string">'/posts/:postId/edit'</span>, <span class="keyword">async</span>(ctx, next) =&gt; &#123;</div><div class="line">    <span class="keyword">let</span> name = ctx.session.user,</div><div class="line">        postId = ctx.params.postId,</div><div class="line">        res;</div><div class="line">    <span class="keyword">await</span> userModel.findDataById(postId)</div><div class="line">        .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</div><div class="line">            res = result[<span class="number">0</span>]</div><div class="line">            <span class="comment">//console.log('修改文章', res)</span></div><div class="line">        &#125;)</div><div class="line">    <span class="keyword">await</span> ctx.render(<span class="string">'edit'</span>, &#123;</div><div class="line">        <span class="attr">session</span>: ctx.session,</div><div class="line">        <span class="attr">postsContent</span>: res.md,</div><div class="line">        <span class="attr">postsTitle</span>: res.title</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// post 编辑单篇文章</span></div><div class="line">router.post(<span class="string">'/posts/:postId/edit'</span>, <span class="keyword">async</span>(ctx, next) =&gt; &#123;</div><div class="line">    <span class="keyword">let</span> title = ctx.request.body.title,</div><div class="line">        content = ctx.request.body.content,</div><div class="line">        id = ctx.session.id,</div><div class="line">        postId = ctx.params.postId,</div><div class="line">         <span class="comment">// 现在使用markdown不需要单独转义</span></div><div class="line">        newTitle = title.replace(<span class="regexp">/[&lt;"&gt;']/g</span>, (target) =&gt; &#123;</div><div class="line">            <span class="keyword">return</span> &#123;</div><div class="line">                <span class="string">'&lt;'</span>: <span class="string">'&amp;lt;'</span>,</div><div class="line">                <span class="string">'"'</span>: <span class="string">'&amp;quot;'</span>,</div><div class="line">                <span class="string">'&gt;'</span>: <span class="string">'&amp;gt;'</span>,</div><div class="line">                <span class="string">"'"</span>: <span class="string">'&amp;#39;'</span></div><div class="line">            &#125;[target]</div><div class="line">        &#125;),</div><div class="line">        newContent = content.replace(<span class="regexp">/[&lt;"&gt;']/g</span>, (target) =&gt; &#123;</div><div class="line">            <span class="keyword">return</span> &#123;</div><div class="line">                <span class="string">'&lt;'</span>: <span class="string">'&amp;lt;'</span>,</div><div class="line">                <span class="string">'"'</span>: <span class="string">'&amp;quot;'</span>,</div><div class="line">                <span class="string">'&gt;'</span>: <span class="string">'&amp;gt;'</span>,</div><div class="line">                <span class="string">"'"</span>: <span class="string">'&amp;#39;'</span></div><div class="line">            &#125;[target]</div><div class="line">        &#125;);</div><div class="line">    <span class="keyword">await</span> userModel.updatePost([newTitle, md.render(content), content, postId])</div><div class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            ctx.body = <span class="literal">true</span></div><div class="line">        &#125;).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            ctx.body = <span class="literal">false</span></div><div class="line">        &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>修改views/edit.js </p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%-</span> <span class="attr">include</span>("<span class="attr">header</span>",&#123;<span class="attr">type:</span>''&#125;) %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">style</span>=<span class="string">"width:100%"</span> <span class="attr">class</span>=<span class="string">"form create"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span>标题：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"标题"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"title"</span> <span class="attr">value</span>=<span class="string">"&lt;%- postsTitle %&gt;"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">label</span>&gt;</span>内容：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"content"</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">cols</span>=<span class="string">"42"</span> <span class="attr">rows</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">postsContent</span> %&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"submit"</span>&gt;</span>修改<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">	$(<span class="string">'.submit'</span>).click(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">		$.ajax(&#123;</div><div class="line">            <span class="attr">url</span>: <span class="string">''</span>,</div><div class="line">            <span class="attr">data</span>: $(<span class="string">'.form'</span>).serialize(),</div><div class="line">            <span class="attr">type</span>: <span class="string">"POST"</span>,</div><div class="line">            <span class="attr">cache</span>: <span class="literal">false</span>,</div><div class="line">            <span class="attr">dataType</span>: <span class="string">'json'</span>,</div><div class="line">            <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</div><div class="line">               <span class="keyword">if</span> (msg) &#123;</div><div class="line">               		fade(<span class="string">'修改成功'</span>)</div><div class="line">               		setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">	               		<span class="built_in">window</span>.location.href=<span class="string">"/posts"</span></div><div class="line">               		&#125;,<span class="number">1000</span>)</div><div class="line">               &#125;</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">error</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                alert(<span class="string">'异常'</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;)		</div><div class="line">	&#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">include</span> <span class="attr">footer</span> %&gt;</span></div></pre></td></tr></table></figure>
<p>现在试试编辑文字然后修改提交吧</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>至此一个简单的blog就已经制作好了，其他扩展功能相信你已经会了吧！如果出现问题，还望积极提问哈，我会尽快处理的</p>
<p>所有的代码都在 <a href="https://github.com/wclimb/Koa2-blog" target="_blank" rel="external">https://github.com/wclimb/Koa2-blog</a> 里面，如果觉得不错就star一下吧。有问题可以提问哟<br>下一篇可能是 Node + express + mongoose 或 zepto源码系列<br>感谢您的阅读^_^</p>
<h2 id="个人小程序"><a href="#个人小程序" class="headerlink" title="个人小程序"></a>个人小程序</h2><p><img src="http://www.wclimb.site/cdn/xcx.jpeg" alt="img"></p>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>原创</tag>
        <tag>Mysql</tag>
        <tag>javascript</tag>
        <tag>Koa</tag>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>Nodejs之实现路由和中间件</title>
    <url>/2020/04/14/node-route-middleware/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天来实现一个 <code>node</code> 的路由和中间件</p>
<h2 id="铺垫"><a href="#铺垫" class="headerlink" title="铺垫"></a>铺垫</h2><p>我们首先起一个服务</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>);</div><div class="line">http</div><div class="line">  .createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> pathname = url.parse(req.url).pathname;</div><div class="line">    res.end(req.method.toLowerCase() + <span class="string">": "</span> + pathname);</div><div class="line">  &#125;)</div><div class="line">  .listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure>
<p>访问 <code>http://localhost:3000/</code> 显示 <code>get: /</code><br>访问 <code>http://localhost:3000/test</code> 显示 <code>get: /test</code></p>
<p>最简单的方法就是下面代码判断逻辑，这样做的话太麻烦了，杂糅在一起了，还得进一步判断不同的请求方法，到底是 <code>get</code> 还是 <code>post</code> 还是其他的，重复代码也会增加<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">switch</span> (pathname) &#123;</div><div class="line">  <span class="keyword">case</span> <span class="string">"/"</span>:</div><div class="line">    res.end(<span class="string">"root"</span>);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  <span class="keyword">case</span> <span class="string">"/test"</span>:</div><div class="line">    res.end(<span class="string">"test"</span>);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  <span class="keyword">default</span>:</div><div class="line">    res.writeHead(<span class="number">404</span>);</div><div class="line">    res.end(<span class="string">"404"</span>);</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="实现路由"><a href="#实现路由" class="headerlink" title="实现路由"></a>实现路由</h2><p>我们按照 <code>RESTful</code> 风格来实现我们的路由，他们应该是这样的<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">route.get(<span class="string">"/user"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;&#125;);</div><div class="line">route.post(<span class="string">"/user"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;&#125;);</div><div class="line">route.delete(<span class="string">"/user"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 还可以是</span></div><div class="line"></div><div class="line">route.get(<span class="string">"/:id"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;&#125;);</div><div class="line">route.get(<span class="string">"/user/:pid/account"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;&#125;);</div></pre></td></tr></table></figure></p>
<p>上面我们已经启动服务了，现在我们新建应该路由文件，就叫 <code>router.js</code> 吧，然后在上面👆的服务引入 <code>const Router = require(&#39;./router&#39;);</code></p>
<p>router.js<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>);</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Router</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">this</span>.route = &#123;&#125;;</div><div class="line">    [<span class="string">"HEAD"</span>, <span class="string">"OPTIONS"</span>, <span class="string">"GET"</span>, <span class="string">"PUT"</span>, <span class="string">"PATCH"</span>, <span class="string">"POST"</span>, <span class="string">"DELETE"</span>].forEach(</div><div class="line">      <span class="function"><span class="params">method</span> =&gt;</span> &#123;</div><div class="line">        method = method.toLowerCase();</div><div class="line">        <span class="keyword">this</span>.route[method] = [];</div><div class="line">        <span class="keyword">this</span>[method] = <span class="function"><span class="keyword">function</span>(<span class="params">path, ...stacks</span>) </span>&#123;</div><div class="line">          <span class="keyword">this</span>.route[method].push([path, [...stacks]]);</div><div class="line">        &#125;;</div><div class="line">      &#125;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">module</span>.exports = Router;</div></pre></td></tr></table></figure></p>
<p>他们的构造函数和大致的结构应该是这样的，当我们 <code>new Router();</code> 初始化支持的路由方法，你会发现每当我们 <code>route.get()</code> 或者 <code>route.post()</code> 都会把他们存到对应的 <code>route</code> 对象数组内部，以便后续使用，这叫路由收集。<br>那么问题来了，我都收集了，需要调用<br><figure class="highlight diff"><table><tr><td class="code"><pre><div class="line">const http = require("http");</div><div class="line">const url = require("url");</div><div class="line"><span class="addition">+ const Router = require("./router");</span></div><div class="line"></div><div class="line">// 路由</div><div class="line"><span class="addition">+ route.get("/user/:id", function(req, res) &#123;</span></div><div class="line"><span class="addition">+   res.end("id");</span></div><div class="line"><span class="addition">+ &#125;);</span></div><div class="line"></div><div class="line">http</div><div class="line">  .createServer(function(req, res) &#123;</div><div class="line"><span class="addition">+    route.install(req, res);</span></div><div class="line">  &#125;)</div><div class="line">  .listen(3000);</div></pre></td></tr></table></figure></p>
<p>回到router.js<br><figure class="highlight diff"><table><tr><td class="code"><pre><div class="line">const url = require("url");</div><div class="line">class Router &#123;</div><div class="line">  constructor() &#123;</div><div class="line">    this.route = &#123;&#125;;</div><div class="line">    ["HEAD", "OPTIONS", "GET", "PUT", "PATCH", "POST", "DELETE"].forEach(</div><div class="line">      method =&gt; &#123;</div><div class="line">        method = method.toLowerCase();</div><div class="line">        this.route[method] = [];</div><div class="line">        this[method] = function(path, ...stacks) &#123;</div><div class="line">          this.route[method].push([path, [...stacks]]);</div><div class="line">        &#125;;</div><div class="line">      &#125;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line"><span class="addition">+  install(req, res, app) &#123;</span></div><div class="line"><span class="addition">+    const pathname = url.parse(req.url).pathname;</span></div><div class="line"><span class="addition">+    const method = req.method.toLowerCase();</span></div><div class="line"><span class="addition">+    if (this.route[method]) &#123;</span></div><div class="line"><span class="addition">+      for (let i = 0; i &lt; this.route[method].length; i++) &#123;</span></div><div class="line"><span class="addition">+        const [path, stacks] = this.route[method][i];</span></div><div class="line"><span class="addition">+        const &#123; keys, regExp &#125; = this.pathRegexp(path);</span></div><div class="line"><span class="addition">+        const mathed = regExp.exec(pathname);</span></div><div class="line"><span class="addition">+        if (mathed) &#123;</span></div><div class="line"><span class="addition">+          req.params = &#123;&#125;;</span></div><div class="line"><span class="addition">+          for (let j = 0; j &lt; keys.length; j++) &#123;</span></div><div class="line"><span class="addition">+            const key = keys[j];</span></div><div class="line"><span class="addition">+            req.params[key] = mathed[j + 1];</span></div><div class="line"><span class="addition">+          &#125;</span></div><div class="line"><span class="addition">+          return app.handle(req, res, stacks);</span></div><div class="line"><span class="addition">+        &#125;</span></div><div class="line"><span class="addition">+      &#125;</span></div><div class="line"><span class="addition">+      res.writeHead(404);</span></div><div class="line"><span class="addition">+      res.end("404");</span></div><div class="line"><span class="addition">+    &#125;else&#123;</span></div><div class="line"><span class="addition">+      res.writeHead(404);</span></div><div class="line"><span class="addition">+      res.end("404");</span></div><div class="line"><span class="addition">+    &#125;</span></div><div class="line"><span class="addition">+  &#125;</span></div><div class="line"><span class="addition">+  pathRegexp(path) &#123;</span></div><div class="line"><span class="addition">+    const keys = [];</span></div><div class="line"><span class="addition">+    path = path.replace(/\/:(\w+)?(?:\/)?/g, function(match, key) &#123;</span></div><div class="line"><span class="addition">+      keys.push(key);</span></div><div class="line"><span class="addition">+      return `\\/([^\\/]+)(?:\\/)?`;</span></div><div class="line"><span class="addition">+    &#125;);</span></div><div class="line"><span class="addition">+    return &#123;</span></div><div class="line"><span class="addition">+      keys,</span></div><div class="line"><span class="addition">+      regExp: new RegExp(`^$&#123;path&#125;$`)</span></div><div class="line"><span class="addition">+    &#125;;</span></div><div class="line"><span class="addition">+  &#125;</span></div><div class="line">&#125;</div><div class="line">module.exports = Router;</div></pre></td></tr></table></figure></p>
<p>你会发现多了两个方法<code>install</code>，<code>pathRegexp</code>。<code>install</code>是用来注册路由的，首先拿到请求方法和路径，然后去之前收集的路由查找是否存在这个路由，如果不存在直接返回404，如果存在会调用 <code>pathRegexp</code> 做路径匹配，因为可能会有 <code>/:id</code>、 <code>/user</code>，这种不同的路由，这里借鉴一下 <code>koa-router</code> 获取参数的方式，比如我们路由是 <code>/:id/test/:p</code>，当我们访问 <code>/123/test/456</code>的时候，我们可以拿到一个对象<code>params: {id:123,p:456}</code>。其实 <code>koa-router</code> 的路由匹配规则用的是 <a href="https://github.com/pillarjs/path-to-regexp" target="_blank" rel="external">path-to-regexp</a> 这个包，我们这里是自己做的匹配，可以思考一下上面 <code>pathRegexp</code> 方法的实现，正则好的同学应该看得很明白。如果发现匹配，我们会把 <code>params</code> 赋值到 <code>req</code> 对象上，然后调用执行中间件的操作，也就是 <code>app.handle(req, res, stacks);</code>，你会发现上面我们注册的时候压根就没有传递 <code>app</code>，因为这是后面需要讲的内容，实现中间件</p>
<p>顺便说一下，如果你想让上面的代码正常执行，把 <code>app.handle()</code> 这行代码去掉，然后 <code>res.end()</code> 就可以正常执行了</p>
<h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p>中间件其实就是洋葱模型了，先收集中间件的依赖，然后去递归一个个执行中间件，感兴趣可以去看看我直接写的<a href="http://www.wclimb.site/2019/12/11/Koa%E6%BA%90%E7%A0%81%E7%B3%BB%E5%88%97%E4%B9%8Bkoa-compose/">Koa源码系列之koa-compose</a></p>
<p>中间件我们希望他是这么注册收集的<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">app.use(cookie);</div><div class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">  req.query = url.parse(req.url, <span class="literal">true</span>).query;</div><div class="line">  next();</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>新建文件<code>middleware.js</code>，内容如下<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>);</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiddleWare</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">    <span class="keyword">this</span>.aloneMiddleWare = &#123;&#125;;</div><div class="line">    <span class="keyword">this</span>.commonMiddleWare = [];</div><div class="line">  &#125;</div><div class="line">  use(middleWare) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> middleWare === <span class="string">"string"</span>) &#123;</div><div class="line">      <span class="keyword">this</span>.aloneMiddleWare[middleWare] = <span class="built_in">arguments</span>[<span class="number">1</span>];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">this</span>.commonMiddleWare.push(middleWare);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  handle(req, res, stacks) &#123;</div><div class="line">    <span class="keyword">const</span> pathname = url.parse(req.url).pathname;</div><div class="line">    <span class="keyword">const</span> middleWareList = [</div><div class="line">      ...this.commonMiddleWare,</div><div class="line">      ...(<span class="keyword">this</span>.aloneMiddleWare[pathname] ? <span class="keyword">this</span>.aloneMiddleWare[pathname] : []),</div><div class="line">      ...stacks</div><div class="line">    ];</div><div class="line">    <span class="keyword">const</span> next = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">const</span> middleWare = middleWareList.shift();</div><div class="line">      <span class="keyword">if</span> (middleWare) &#123;</div><div class="line">        middleWare(req, res, next);</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line">    next();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = <span class="keyword">new</span> MiddleWare();</div></pre></td></tr></table></figure></p>
<p><code>aloneMiddleWare</code> 先不看，<code>use</code>方法是进行依赖收集的，<code>handle</code>方法是集中处理中间件的方法，递归调用，依次执行。关键代码<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> next = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> middleWare = middleWareList.shift();</div><div class="line">  <span class="keyword">if</span> (middleWare) &#123;</div><div class="line">    middleWare(req, res, next);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">next();</div></pre></td></tr></table></figure></p>
<p>每次取出队列里的第一个，然后执行它，然后把 <code>next</code> 方法传递一下，所以我们必须在中间件内部调用 <code>next</code> 方法，不然流程会中断。</p>
<p>我们刚刚说的 <code>aloneMiddleWare</code> 有上面用的呢，其实是为了优化性能，因为有的中间件不是所有路由都使用到的，可能就一个路由用到了，那么如果我们把它注册在全局，那么所有的路由都会走一遍。所以这里做个优化，中间件支持如下注册方式，这样就只有 <code>/alone</code> 这个路由会走这个中间件，上面的存取使用 <code>this.aloneMiddleWare[middleWare];</code> 可能不严谨，最好做正则匹配，这里主要是提供思路<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">app.use(<span class="string">'/alone'</span>, middleware)</div></pre></td></tr></table></figure></p>
<p>这样之前的 <code>router.js</code> 内的 <code>app.handle</code> 方法就可以执行了，然后依次执行中间件，最后才执行路由上面写得回调方法</p>
<p>另外还执行以下方法传递中间件<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">route.get(<span class="string">"/user/:id"</span>, middleware1, middleware2, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">  res.end(<span class="string">"id"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>嗯，现在大致完成了功能，但是呢，好像我们可以把上一篇写的模版引擎拿过来，借鉴一下 <a href="https://www.npmjs.com/package/koa-views" target="_blank" rel="external">koa-views</a> 方法，使用 <code>ctx.render(file,{})</code> 渲染模版</p>
<h2 id="支持模版引擎"><a href="#支持模版引擎" class="headerlink" title="支持模版引擎"></a>支持模版引擎</h2><p>新建文件<code>render.js</code><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"></div><div class="line"><span class="keyword">const</span> render = <span class="function"><span class="keyword">function</span>(<span class="params">file, data</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> str = fs.readFileSync(<span class="string">`<span class="subst">$&#123;file&#125;</span>.ejs`</span>, <span class="string">"utf8"</span>);</div><div class="line">  <span class="keyword">const</span> <span class="built_in">escape</span> = <span class="function"><span class="keyword">function</span>(<span class="params">html</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">String</span>(html)</div><div class="line">      .replace(<span class="regexp">/&amp;(?!\w+;)/g</span>, <span class="string">"&amp;amp;"</span>)</div><div class="line">      .replace(<span class="regexp">/&lt;/g</span>, <span class="string">"&amp;lt;"</span>)</div><div class="line">      .replace(<span class="regexp">/&gt;/g</span>, <span class="string">"&amp;gt;"</span>)</div><div class="line">      .replace(<span class="regexp">/"/g</span>, <span class="string">"&amp;quot;"</span>)</div><div class="line">      .replace(<span class="regexp">/'/g</span>, <span class="string">"&amp;#039;"</span>); <span class="comment">// IE下不支持&amp;apos;(单引号)转义</span></div><div class="line">  &#125;;</div><div class="line">  str = str</div><div class="line">    .replace(<span class="regexp">/\n/g</span>, <span class="string">""</span>)</div><div class="line">    .replace(<span class="regexp">/\s&#123;2,&#125;/g</span>, <span class="string">""</span>)</div><div class="line">    .replace(<span class="regexp">/&lt;%-([\S\s]+?)%&gt;/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">match, val</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">`'+ <span class="subst">$&#123;val&#125;</span> +'`</span>;</div><div class="line">    &#125;)</div><div class="line">    .replace(<span class="regexp">/&lt;%=([\S\s]+?)%&gt;/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">match, val</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">`'+ escape(<span class="subst">$&#123;val&#125;</span>) +'`</span>;</div><div class="line">    &#125;)</div><div class="line">    .replace(<span class="regexp">/&lt;%([\S\s]+?)%&gt;/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">match, val</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">`';\n<span class="subst">$&#123;val&#125;</span>\ntpl +='`</span>;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">  str = <span class="string">`let tpl = '<span class="subst">$&#123;str&#125;</span>';return tpl;`</span>;</div><div class="line">  str = <span class="string">`with(option)&#123;<span class="subst">$&#123;str&#125;</span>;return tpl;&#125;`</span>;</div><div class="line">  <span class="keyword">const</span> complied = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"option"</span>, str);</div><div class="line">  <span class="keyword">let</span> result;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    result = complied(data);</div><div class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</div><div class="line">    <span class="built_in">console</span>.log(error);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;;</div><div class="line"><span class="built_in">module</span>.exports = render;</div></pre></td></tr></table></figure></p>
<h3 id="写一个支持模版引擎的中间件"><a href="#写一个支持模版引擎的中间件" class="headerlink" title="写一个支持模版引擎的中间件"></a>写一个支持模版引擎的中间件</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">  res.render = <span class="function"><span class="keyword">function</span>(<span class="params">file, data</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> template = render(file, data);</div><div class="line">    res.writeHead(<span class="number">200</span>, &#123; <span class="string">"Content-Type"</span>: <span class="string">"text/html;charset=utf8"</span> &#125;);</div><div class="line">    res.end(template);</div><div class="line">  &#125;;</div><div class="line">  next();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">app.get(<span class="string">"/user/:id"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> obj = &#123;</div><div class="line">    <span class="attr">items</span>: [&#123; <span class="attr">name</span>: <span class="string">"123"</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">"wclimb"</span> &#125;],</div><div class="line">  &#125;;</div><div class="line">  res.render(<span class="string">"template"</span>, obj);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><code>template</code> 是 <code>template.ejs</code>文件，当然得有</p>
<p><code>template.ejs</code><br><figure class="highlight"><table><tr><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang="en"&gt;</div><div class="line">  &lt;head&gt;</div><div class="line">    &lt;meta charset="UTF-8" /&gt;</div><div class="line">    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&gt;</div><div class="line">    &lt;title&gt;Document&lt;/title&gt;</div><div class="line">  &lt;/head&gt;</div><div class="line">  &lt;body&gt;</div><div class="line">    &lt;% for (var i = 0; i &lt; items.length; i++) &#123; %&gt; &lt;% var item = items[i];%&gt;</div><div class="line">    &lt;p&gt;&lt;%= (i+1) %&gt;、&lt;%-item.name%&gt;&lt;/p&gt;</div><div class="line">    &lt;% &#125; %&gt;</div><div class="line"></div><div class="line">    &lt;div&gt;测试一下&lt;/div&gt;</div><div class="line"></div><div class="line">    &lt;% if (user) &#123; %&gt;</div><div class="line">    &lt;h2&gt;&lt;%=user.name%&gt;&lt;/h2&gt;</div><div class="line">    &lt;% &#125; else &#123; %&gt;</div><div class="line">    &lt;h2&gt;匿名用户&lt;/h2&gt;</div><div class="line">    &lt;% &#125; %&gt;</div><div class="line">  &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>至此，我们实现了路由、中间件、模版引擎，完整流程串起来可以方便我们写一些 <code>demo</code> 了，额，但是别在生产环境使用，不保证代码的健壮。当然我也相信你绝对不会上生产，因为这就是个 <code>demo</code>，其实那么框架也是这么一步步搭建起来的，原理思想差不多</p>
<p>以上代码已经上传到Github：<a href="https://github.com/wclimb/router-middleware" target="_blank" rel="external">https://github.com/wclimb/router-middleware</a></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://book.douban.com/subject/25768396/" target="_blank" rel="external">深入浅出Node.js</a></li>
</ul>
<p>本文地址 <a href="http://www.wclimb.site/2020/04/14/node-route-middleware/">Nodejs之实现路由和中间件</a></p>
]]></content>
      <categories>
        <category>Node</category>
        <category>模版引擎</category>
      </categories>
      <tags>
        <tag>原创</tag>
        <tag>javascript</tag>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>Nodejs之实现一个模版引擎</title>
    <url>/2020/04/14/node-template/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近看完了朴大的 《深入浅出Node.js》 这本书，在里面学到了许多，也推荐大家可以去看一下，看完感觉可以写几篇文章记录总结一下，提升一下印象，毕竟学到的东西感觉不记下来过不久就容易忘记，大家也要养成学习记录的习惯，方便以后重温，今天来实现一个 <code>node</code> 的模版引擎，当然这个模版引擎在前端也可以用。</p>
<h2 id="借鉴ejs标签"><a href="#借鉴ejs标签" class="headerlink" title="借鉴ejs标签"></a>借鉴ejs标签</h2><p>标签借鉴 <code>ejs</code>，用过的同学肯定知道，例如使用 <code>&lt;%= name %&gt;</code> 这种标签来展示数据，使用 <code>&lt;% if(name){ %&gt;</code> 这种标签来做 <code>js</code> 操作，如 <code>if</code> 判断/ <code>for</code>循环，比如下面<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">name</span>) &#123; %&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">%=name%</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span> &#125; <span class="attr">else</span> &#123; %&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>请登陆<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="渲染方法"><a href="#渲染方法" class="headerlink" title="渲染方法"></a>渲染方法</h2><p>我们先来看个简单的渲染<a id="more"></a><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> str = <span class="string">'hello &lt;%=name%&gt;'</span></div></pre></td></tr></table></figure></p>
<p>假如我们的有一个字段 <code>name = &#39;wclimb&#39;;</code><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> name = <span class="string">'wclimb'</span>;</div><div class="line"><span class="keyword">let</span> str = <span class="string">'hello &lt;%=name%&gt;'</span>;</div><div class="line">str.replace(<span class="regexp">/&lt;%=([\S\s]+?)%&gt;/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">match,value</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> name</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>结果<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">hello wclimb</div></pre></td></tr></table></figure></p>
<p>按照这个思路就很简单了，我们先来思考🤔一个问题，数据渲染简单，直接替换就可以来了，那么 <code>js</code> 的逻辑判断这种怎么处理呢，我们拿到的都是字符串，这里需要借助 <code>Function</code> 来实现，具体渲染成如下样式<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> tpl = <span class="string">''</span>;</div><div class="line"><span class="keyword">if</span> (name)&#123;</div><div class="line">  tpl += <span class="string">'&lt;h1&gt;'</span> + name <span class="string">' +&lt;/h1&gt;'</span></div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">  tpl += <span class="string">'&lt;h1&gt;请登陆&lt;/h1&gt;'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后使用 <code>new Function</code> ,<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> complied = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'name'</span>,tpl); </div><div class="line"><span class="keyword">const</span> result = complied()</div><div class="line"><span class="built_in">console</span>.log(result)</div></pre></td></tr></table></figure></p>
<p>直接上代码<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> render = <span class="function"><span class="keyword">function</span>(<span class="params">str, data</span>) </span>&#123;</div><div class="line">  str = str</div><div class="line">    .replace(<span class="regexp">/\n/g</span>, <span class="string">""</span>)</div><div class="line">    .replace(<span class="regexp">/\s&#123;2,&#125;/g</span>, <span class="string">""</span>)</div><div class="line">    .replace(<span class="regexp">/&lt;%=([\S\s]+?)%&gt;/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">match, val</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">`'+ <span class="subst">$&#123;val&#125;</span> +'`</span>;</div><div class="line">    &#125;)</div><div class="line">    .replace(<span class="regexp">/&lt;%([\S\s]+?)%&gt;/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">match, val</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">`';\n<span class="subst">$&#123;val&#125;</span>\ntpl +='`</span>;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">  str = <span class="string">`let tpl = '<span class="subst">$&#123;str&#125;</span>';return tpl;`</span>;</div><div class="line">  str = <span class="string">`with(option)&#123;<span class="subst">$&#123;str&#125;</span>;return tpl;&#125;`</span>;</div><div class="line">  <span class="keyword">const</span> complied = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"option"</span>, str);</div><div class="line">  <span class="keyword">let</span> result;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    result = complied(data);</div><div class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</div><div class="line">    <span class="built_in">console</span>.log(error);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>看着整个代码感觉没什么，等等，<code>with</code> 是什么？知道的同学可以忽略后面的，<code>with</code> 的作用就是通常我们取数据都是 <code>let people = obj.name +&#39;-&#39;+ obj.age</code> 这样，每次都需要拿 <code>obj</code>，为了简化我们可以这样写：<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">name</span>:<span class="string">'wclimb'</span>, <span class="attr">age</span>: <span class="number">26</span>&#125;</div><div class="line"><span class="keyword">let</span> people</div><div class="line"><span class="keyword">with</span>(obj)&#123;</div><div class="line">  people = name +<span class="string">'-'</span>+ age</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>但是不推荐用 <code>with</code>，容易引起作用域混乱，但是我看 <code>Vue</code> 源码也用到了，还是谨慎一点。比如如下：<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">with</span> (obj) &#123; </div><div class="line">  foo = bar;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>它的结果有可能是如下四种之一: <code>obj.foo = obj.bar;</code>、<code>obj.foo = bar;</code>、<code>foo = bar;</code>、<code>foo = obj.bar;</code>，这些结果取决于它的作用域。如果作用域链上没有导致冲突的变量存在，使用它则是 安全的。但在多人合作的项目中，这并不容易保证，所以要慎用 <code>with</code></p>
<h3 id="xss攻击"><a href="#xss攻击" class="headerlink" title="xss攻击"></a>xss攻击</h3><p>我们需要时刻关注安全，在上面的模版上，如果 <code>name</code> 是 <code>&lt;script&gt;alert(&#39;xss攻击&#39;)&lt;/script</code>&gt;，那么我们渲染到页面上100%会显示一个弹窗，很危险。因此我们需要对尖括号进行转义，我们单独写一个方法处理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="built_in">escape</span> = <span class="function"><span class="keyword">function</span>(<span class="params">html</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">String</span>(html)</div><div class="line">    .replace(<span class="regexp">/&amp;(?!\w+;)/g</span>, <span class="string">"&amp;amp;"</span>)</div><div class="line">    .replace(<span class="regexp">/&lt;/g</span>, <span class="string">"&amp;lt;"</span>)</div><div class="line">    .replace(<span class="regexp">/&gt;/g</span>, <span class="string">"&amp;gt;"</span>)</div><div class="line">    .replace(<span class="regexp">/"/g</span>, <span class="string">"&amp;quot;"</span>)</div><div class="line">    .replace(<span class="regexp">/'/g</span>, <span class="string">"&amp;#039;"</span>); <span class="comment">// IE下不支持&amp;apos;(单引号)转义</span></div><div class="line">  &#125;;</div></pre></td></tr></table></figure>
<p>当然，并不是所有的都需要转义，比如我就是想让他输出有格式的标签 <code>&lt;h1&gt;h1&lt;/h1&gt;</code>，所以我们需要提供两种不同的标签，<code>ejs</code> 就提供了,如下<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;%= name %&gt; 会转义</div><div class="line">&lt;%- name %&gt; 原始输出</div><div class="line"></div><div class="line">如果输入&lt;h1&gt;h1&lt;/h1&gt;，他们的对应结果是</div><div class="line">&lt;%= name %&gt; &lt;h1&gt;h1&lt;/h1&gt;</div><div class="line">&lt;%- name %&gt; 有格式的 h1</div></pre></td></tr></table></figure></p>
<p>然后完善一下<br><figure class="highlight diff"><table><tr><td class="code"><pre><div class="line">const render = function(str, data) &#123;</div><div class="line"><span class="addition">+  const escape = function(html) &#123;</span></div><div class="line"><span class="addition">+    return String(html)</span></div><div class="line"><span class="addition">+      .replace(/&amp;(?!\w+;)/g, "&amp;amp;")</span></div><div class="line"><span class="addition">+      .replace(/&lt;/g, "&amp;lt;")</span></div><div class="line"><span class="addition">+      .replace(/&gt;/g, "&amp;gt;")</span></div><div class="line"><span class="addition">+      .replace(/"/g, "&amp;quot;")</span></div><div class="line"><span class="addition">+      .replace(/'/g, "&amp;#039;"); // IE下不支持&amp;apos;(单引号)转义</span></div><div class="line"><span class="addition">+  &#125;;</span></div><div class="line">  str = str</div><div class="line">    .replace(/\n/g, "")</div><div class="line">    .replace(/\s&#123;2,&#125;/g, "")</div><div class="line">    .replace(/&lt;%-([\S\s]+?)%&gt;/g, function(match, val) &#123;</div><div class="line">      return `'+ $&#123;val&#125; +'`;</div><div class="line">    &#125;)</div><div class="line"><span class="addition">+    .replace(/&lt;%=([\S\s]+?)%&gt;/g, function(match, val) &#123;</span></div><div class="line"><span class="addition">+      return `'+ escape($&#123;val&#125;) +'`;</span></div><div class="line"><span class="addition">+    &#125;)</span></div><div class="line">    .replace(/&lt;%([\S\s]+?)%&gt;/g, function(match, val) &#123;</div><div class="line">      return `';\n$&#123;val&#125;\ntpl +='`;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">  str = `let tpl = '$&#123;str&#125;';return tpl;`;</div><div class="line">  str = `with(option)&#123;$&#123;str&#125;;return tpl;&#125;`;</div><div class="line">  const complied = new Function("option", str);</div><div class="line">  let result;</div><div class="line">  try &#123;</div><div class="line">    result = complied(data);</div><div class="line">  &#125; catch (error) &#123;</div><div class="line">    console.log(error);</div><div class="line">  &#125;</div><div class="line">  return result;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> str = <span class="string">`</span></div><div class="line">  &lt;% for (var i = 0; i &lt; users.length; i++) &#123; %&gt; </div><div class="line">    &lt;% var item = users[i];%&gt;</div><div class="line">    &lt;p&gt;&lt;%= (i+1) %&gt;、&lt;%-item.name%&gt;&lt;/p&gt;</div><div class="line">  &lt;% &#125; %&gt;`;</div><div class="line"><span class="keyword">const</span> result = render(str, &#123;<span class="attr">users</span>: [&#123; <span class="attr">name</span>: <span class="string">"wclimb"</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">"other"</span> &#125;]&#125;);</div></pre></td></tr></table></figure>
<p>结果<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;p&gt;1、wclimb&lt;/p&gt;&lt;p&gt;2、other&lt;/p&gt;</div></pre></td></tr></table></figure></p>
<p>上面可能不好复制，下面是完整代码<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> render = <span class="function"><span class="keyword">function</span>(<span class="params">str, data</span>) </span>&#123;</div><div class="line"> <span class="keyword">const</span> <span class="built_in">escape</span> = <span class="function"><span class="keyword">function</span>(<span class="params">html</span>) </span>&#123;</div><div class="line">   <span class="keyword">return</span> <span class="built_in">String</span>(html)</div><div class="line">     .replace(<span class="regexp">/&amp;(?!\w+;)/g</span>, <span class="string">"&amp;amp;"</span>)</div><div class="line">     .replace(<span class="regexp">/&lt;/g</span>, <span class="string">"&amp;lt;"</span>)</div><div class="line">     .replace(<span class="regexp">/&gt;/g</span>, <span class="string">"&amp;gt;"</span>)</div><div class="line">     .replace(<span class="regexp">/"/g</span>, <span class="string">"&amp;quot;"</span>)</div><div class="line">     .replace(<span class="regexp">/'/g</span>, <span class="string">"&amp;#039;"</span>); <span class="comment">// IE下不支持&amp;apos;(单引号)转义</span></div><div class="line"> &#125;;</div><div class="line">  str = str</div><div class="line">    .replace(<span class="regexp">/\n/g</span>, <span class="string">""</span>)</div><div class="line">    .replace(<span class="regexp">/\s&#123;2,&#125;/g</span>, <span class="string">""</span>)</div><div class="line">    .replace(<span class="regexp">/&lt;%-([\S\s]+?)%&gt;/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">match, val</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">`'+ <span class="subst">$&#123;val&#125;</span> +'`</span>;</div><div class="line">    &#125;)</div><div class="line">    .replace(<span class="regexp">/&lt;%=([\S\s]+?)%&gt;/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">match, val</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">`'+ escape(<span class="subst">$&#123;val&#125;</span>) +'`</span>;</div><div class="line">    &#125;)</div><div class="line">    .replace(<span class="regexp">/&lt;%([\S\s]+?)%&gt;/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">match, val</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">`';\n<span class="subst">$&#123;val&#125;</span>\ntpl +='`</span>;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">  str = <span class="string">`let tpl = '<span class="subst">$&#123;str&#125;</span>';return tpl;`</span>;</div><div class="line">  str = <span class="string">`with(option)&#123;<span class="subst">$&#123;str&#125;</span>;return tpl;&#125;`</span>;</div><div class="line">  <span class="keyword">const</span> complied = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"option"</span>, str);</div><div class="line">  <span class="keyword">let</span> result;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    result = complied(data);</div><div class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</div><div class="line">    <span class="built_in">console</span>.log(error);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="使用文件模版"><a href="#使用文件模版" class="headerlink" title="使用文件模版"></a>使用文件模版</h3><p>我们可以新建一个模版 <code>test.ejs</code> 文件，内容为之前的测试内容<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">render(fs.readFileSync(<span class="string">`test.ejs`</span>, <span class="string">"utf8"</span>) ,&#123;<span class="attr">users</span>: [&#123; <span class="attr">name</span>: <span class="string">"wclimb"</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">"other"</span> &#125;]&#125;);</div></pre></td></tr></table></figure></p>
<h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>一个模版引擎就完成了，挺简单的，说得有点多了，下一篇带大家实现一个路由和中间件</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul>
<li><a href="https://book.douban.com/subject/25768396/" target="_blank" rel="external">深入浅出Node.js</a></li>
</ul>
<p>本文地址 <a href="http://www.wclimb.site/2020/04/14/node-template/">Nodejs之实现一个模版引擎</a></p>
]]></content>
      <categories>
        <category>Node</category>
        <category>模版引擎</category>
      </categories>
      <tags>
        <tag>原创</tag>
        <tag>javascript</tag>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs微信支付之扫码支付</title>
    <url>/2018/02/14/nodejs%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E4%B9%8B%E6%89%AB%E7%A0%81%E6%94%AF%E4%BB%98/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇文章主要是记录本人在微信扫码支付过程中所遇到的问题，给大家一个借鉴作用，希望对你们有帮助</p>
<h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><ul>
<li>nodejs <code>v8.1.0</code></li>
<li>egg <code>v1.1.0</code></li>
</ul>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul>
<li>微信公众号-appid</li>
<li>微信商户号-mch_id</li>
<li>key值(签名算法所需,其实就是一个32位的密码，可以用md5生成一个)(key设置路径：微信商户平台(pay.weixin.qq.com)–&gt;账户设置–&gt;API安全–&gt;密钥设置)</li>
</ul>
<h2 id="扫码支付-统一下单"><a href="#扫码支付-统一下单" class="headerlink" title="扫码支付-统一下单"></a>扫码支付-统一下单</h2><p>以下才用的是微信模式二，因为比较简单<br><a id="more"></a><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> MD5 = <span class="built_in">require</span>(<span class="string">'md5'</span>),</div><div class="line">  xml2js = <span class="built_in">require</span>(<span class="string">'xml2js'</span>),</div><div class="line">  url = <span class="string">"https://api.mch.weixin.qq.com/pay/unifiedorder"</span>,<span class="comment">// 下单请求地址</span></div><div class="line">  appid = <span class="string">'公众号id'</span>,</div><div class="line">  mch_id = <span class="string">'微信商户号'</span>；</div><div class="line">  notify_url = <span class="string">'回调地址'</span>,</div><div class="line">  out_trade_no = <span class="string">'自己设置的订单号'</span>,<span class="comment">// 微信会有自己订单号、我们自己的系统需要设置自己的订单号</span></div><div class="line">  total_fee = <span class="string">'订单金额'</span>,<span class="comment">// 注意，单位为分</span></div><div class="line">  body = <span class="string">'商品简单描述'</span>, </div><div class="line">  trade_type = <span class="string">'NATIVE'</span>,<span class="comment">// 交易类型，JSAPI--公众号支付、NATIVE--原生扫码支付、APP--app支付</span></div><div class="line">  nonce_str = moment().format(<span class="string">'YYYYMMDDHHmmssSSS'</span>),<span class="comment">// 随机字符串32位以下</span></div><div class="line">  stringA = <span class="string">`appid=<span class="subst">$&#123;公众号id&#125;</span>&amp;body=<span class="subst">$&#123;body&#125;</span>&amp;mch_id=<span class="subst">$&#123;微信商户号&#125;</span>&amp;nonce_str=<span class="subst">$&#123;nonce_str&#125;</span>&amp;notify_url=<span class="subst">$&#123;</span></span></div><div class="line">  notify_url&#125;&amp;out_trade_no=<span class="subst">$&#123;out_trade_no&#125;</span>&amp;spbill_create_ip=<span class="subst">$&#123;ctx.request.ip&#125;</span>&amp;total_fee=<span class="subst">$&#123;total_fee&#125;</span>&amp;trade_type=<span class="subst">$&#123;trade_type&#125;</span>`,</div><div class="line">  stringSignTemp = stringA + <span class="string">"&amp;key=xxxxxxxxxxxxxxxxx"</span>, <span class="comment">//注：key为商户平台设置的密钥key</span></div><div class="line">  sign = MD5(stringSignTemp).toUpperCase();  <span class="comment">//注：MD5签名方式</span></div></pre></td></tr></table></figure></p>
<p>以上就是我们所需要的一些参数<br>签名生成算法见<a href="https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=4_3" target="_blank" rel="external">微信官方</a><br>spbill_create_ip 是 终端ip地址</p>
<p>下面把所有的参数拼接成xml<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> formData = <span class="string">"&lt;xml&gt;"</span>;</div><div class="line">formData += <span class="string">"&lt;appid&gt;"</span> + appid + <span class="string">"&lt;/appid&gt;"</span>; <span class="comment">//appid</span></div><div class="line">formData += <span class="string">"&lt;body&gt;"</span> + body + <span class="string">"&lt;/body&gt;"</span>; <span class="comment">//商品或支付单简要描述</span></div><div class="line">formData += <span class="string">"&lt;mch_id&gt;"</span> + mch_id + <span class="string">"&lt;/mch_id&gt;"</span>; <span class="comment">//商户号</span></div><div class="line">formData += <span class="string">"&lt;nonce_str&gt;"</span> + nonce_str + <span class="string">"&lt;/nonce_str&gt;"</span>; <span class="comment">//随机字符串，不长于32位</span></div><div class="line">formData += <span class="string">"&lt;notify_url&gt;"</span> + notify_url + <span class="string">"&lt;/notify_url&gt;"</span>; <span class="comment">//支付成功后微信服务器通过POST请求通知这个地址</span></div><div class="line">formData += <span class="string">"&lt;out_trade_no&gt;"</span> + out_trade_no + <span class="string">"&lt;/out_trade_no&gt;"</span>; <span class="comment">//订单号</span></div><div class="line">formData += <span class="string">"&lt;total_fee&gt;"</span> + total_fee + <span class="string">"&lt;/total_fee&gt;"</span>; <span class="comment">//金额</span></div><div class="line">formData += <span class="string">"&lt;spbill_create_ip&gt;"</span> + ctx.request.ip + <span class="string">"&lt;/spbill_create_ip&gt;"</span>; <span class="comment">//ip</span></div><div class="line">formData += <span class="string">"&lt;trade_type&gt;NATIVE&lt;/trade_type&gt;"</span>; <span class="comment">//NATIVE会返回code_url ，JSAPI不会返回</span></div><div class="line">formData += <span class="string">"&lt;sign&gt;"</span> + sign + <span class="string">"&lt;/sign&gt;"</span>;</div><div class="line">formData += <span class="string">"&lt;/xml&gt;"</span>;</div><div class="line"><span class="comment">// 这里使用了egg里面请求的方式</span></div><div class="line"><span class="keyword">const</span> resultData = <span class="keyword">yield</span> ctx.curl(url, &#123;</div><div class="line">  <span class="attr">method</span>: <span class="string">"POST"</span>,</div><div class="line">  <span class="attr">content</span>: formData,</div><div class="line">  <span class="attr">headers</span>: &#123;</div><div class="line">    <span class="string">"content-type"</span>: <span class="string">"text/html"</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// xml转json格式</span></div><div class="line">xml2js.parseString(resultData.data, <span class="function"><span class="keyword">function</span> (<span class="params">err, json</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (err) &#123;</div><div class="line">    <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"解析xml报错"</span>);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">var</span> result = formMessage(json.xml); <span class="comment">// 转换成正常的json 数据</span></div><div class="line">    <span class="built_in">console</span>.log(result); <span class="comment">//打印出返回的结果</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> formMessage = <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> message = &#123;&#125;;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> result === <span class="string">"object"</span>) &#123;</div><div class="line">    <span class="keyword">var</span> keys = <span class="built_in">Object</span>.keys(result);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</div><div class="line">      <span class="keyword">var</span> item = result[keys[i]];</div><div class="line">      <span class="keyword">var</span> key = keys[i];</div><div class="line">      <span class="keyword">if</span> (!(item <span class="keyword">instanceof</span> <span class="built_in">Array</span>) || item.length === <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (item.length === <span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">var</span> val = item[<span class="number">0</span>];</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> val === <span class="string">"object"</span>) &#123;</div><div class="line">          message[key] = formMessage(val);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          message[key] = (val || <span class="string">""</span>).trim();</div><div class="line">        &#125;</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        message[key] = [];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>, k = item.length; j &lt; k; j++) &#123;</div><div class="line">          message[key].push(formMessage(itemp[j]));</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> message;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>上面使用了egg的请求方式，node可以使用request和axios<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>);</div><div class="line">request(&#123;</div><div class="line">  <span class="attr">url</span>: url,</div><div class="line">  <span class="attr">method</span>: <span class="string">"POST"</span>,</div><div class="line">  <span class="attr">body</span>: formData</div><div class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error, response, body</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!error &amp;&amp; response.statusCode == <span class="number">200</span>) &#123;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>如果请求成功会最终返回一个xml,然后我们进行解析成json的格式,里面会有一个<code>code_url</code>和<code>out_trade_no</code>,我们需要把这两个返回给前端，然后通过生成二维码展示给用户扫码，完成支付</p>
<h2 id="监听支付是否成功"><a href="#监听支付是否成功" class="headerlink" title="监听支付是否成功"></a>监听支付是否成功</h2><p>上面操作完成之后，我们需要知道用户是否完成支付，因为用户会停留在该页面，我们需要在用户付完款之后，通知用户支付成功。<br>首先，用户发起支付的时候我们会生成二维码，让用户完成扫码支付，我们还要做的是，开一个定时器，每隔一段时间去发送一个请求，这个时候，我们node后台就需要写一个查询订单的接口，之前我们拿到了<code>out_trade_no</code>，也就是我们系统内部的订单号，我们把这个数据发送给后台查询订单的接口，然后后台接收到之后会请求微信的查询接口地址<code>https://api.mch.weixin.qq.com/pay/orderquery</code>,流程跟上面一样，只是接口地址和微信返回的xml不一样而已，返回的字段会有一个状态即<code>SUCCESS</code>和<code>NOTPAY</code>，我们可以通过判断是否支付返回给前端，成功之后提示给用户支付成功，关闭定时器。</p>
<h2 id="回调地址"><a href="#回调地址" class="headerlink" title="回调地址"></a>回调地址</h2><p>这个是非常重要的一环，大部分的操作其实在上面就可以完成，但是有特殊的情况，比如用户电脑断网发送不了请求，但是手机付款了，这就会导致我们记录不到用户支付的信息。这个时候回调地址就很重要了</p>
<h3 id="设置回调地址"><a href="#设置回调地址" class="headerlink" title="设置回调地址"></a>设置回调地址</h3><p>微信商户中心-&gt;产品中心-&gt;开发配置-&gt;扫码支付</p>
<p>之后我们需要做的是后端用<code>post</code>来接收微信发送的异步回调信息，也是<code>xml</code>的格式，这里注意，如果不支持接收xml，可能会得到空的数据<br>这里还需要注意的是，我们在保存用户支付信息的同时，得先查改订单是否支付，以免重复操作，可能会插入多条记录的情况</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>微信扫码支付坑还是有的，如果你是第一次摸索的话，下面罗列一下需要注意的地方</p>
<ol>
<li>签名算法要写正确，不然是不会成功的，要拼接正确才行</li>
<li>微信返回的是xml格式的数据，我们得通过插件转成json，这样才方便获取数据</li>
<li>返回的<code>code_url</code>要给前端生成二维码用，然后需要开一个定时器查询该订单是否完成支付，最终通知用户结果</li>
<li>回调地址很重要，我们后端需要<code>post</code>接收微信返回的回调信息，然后保存信息，不过在保存用户支付信息的之前，我们得知道该订单是否已经保存过，以免重复添加。还有就是返回的是xml的数据，后端一定要保证能够接收得到，按照正常的方式是接收不了的，得额外设置。</li>
</ol>
<h2 id="个人小程序"><a href="#个人小程序" class="headerlink" title="个人小程序"></a>个人小程序</h2><p><img src="http://www.wclimb.site/cdn/xcx.jpeg" alt="img"></p>
]]></content>
      <categories>
        <category>Node</category>
        <category>Egg</category>
      </categories>
      <tags>
        <tag>原创</tag>
        <tag>javascript</tag>
        <tag>Node</tag>
        <tag>Egg</tag>
      </tags>
  </entry>
  <entry>
    <title>node项目服务器部署(新手教程)</title>
    <url>/2018/07/28/node%E9%A1%B9%E7%9B%AE%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2-%E6%96%B0%E6%89%8B%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>之前在github写了几个项目，然后一直有很多人问我node项目怎么部署到服务器上，于是乎应大家要求就写了这篇文章，此篇教程只提供给新手借鉴，如果你是大佬的话可以不用往下看了，教程多少有些缺陷，都是按照自己的印象写出来的，所以有问题还望指正。</p>
<h2 id="linux服务器安装node"><a href="#linux服务器安装node" class="headerlink" title="linux服务器安装node"></a>linux服务器安装node</h2><p>首先<br>下载node包<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">wget https://npm.taobao.org/mirrors/node/latest-v8.x/node-v8.1.0-linux-x64.tar.gz</div></pre></td></tr></table></figure></p>
<p>解压<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">tar xvf node-v8.1.0-linux-x64.tar.gz</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">ln -s ~/node-v8.1.0-linux-x64/bin/node /usr/local/bin/node</div><div class="line">ln -s ~/node-v8.1.0-linux-x64/bin/npm /usr/local/bin/npm</div></pre></td></tr></table></figure>
<p>最后<code>node -v</code>查看node版本，如果出现以下就表示安装成功了<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">v8.1.0</div></pre></td></tr></table></figure></p>
<p>如果你需要升级<code>node</code>版本，执行以下命令即可<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo npm i -g n</div><div class="line">n stable</div></pre></td></tr></table></figure></p>
<h2 id="安装pm2"><a href="#安装pm2" class="headerlink" title="安装pm2"></a>安装pm2</h2><p><code>pm2</code>是一个进程守护工具,类似的还有<code>forever</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo npm i pm2 -g</div></pre></td></tr></table></figure>
<p>然后执行，如果不映射的话，会出现<code>pm2</code>不是内部指令的错误<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">ln -s ~/node-v8.1.0-linux-x64/bin/pm2 /usr/local/bin/pm2</div></pre></td></tr></table></figure></p>
<p>我们顺便把<code>git</code>和<code>cnpm</code>也安装了<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">yum install git</div><div class="line">sudo npm i -g cnpm</div><div class="line">ln -s ~/node-v8.1.0-linux-x64/bin/cnpm /usr/bin/cnpm</div></pre></td></tr></table></figure></p>
<h2 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h2><p>卸载已有的<code>mysql</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">rpm -qa|grep -i mysql</div><div class="line">yum remove &apos;mysql&apos;</div></pre></td></tr></table></figure></p>
<p>下载<code>mysql</code>的<code>repo</code>源<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">wget http://repo.mysql.com//mysql57-community-release-el7-7.noarch.rpm</div><div class="line">rpm -ivh mysql57-community-release-el7-7.noarch.rpm</div></pre></td></tr></table></figure></p>
<p>安装<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">yum install mysql-server</div><div class="line">yum install mysql-devel</div><div class="line">yum install mysql</div></pre></td></tr></table></figure></p>
<p>然后查看刚刚安装的<code>mysql</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">rpm -qa|grep -i mysql</div></pre></td></tr></table></figure></p>
<p>登录<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">service mysqld status     查看mysql当前的状态</div><div class="line">service mysqld stop       停止mysql</div><div class="line">service mysqld restart    重启mysql</div><div class="line">service mysqld start      启动mysql</div></pre></td></tr></table></figure></p>
<p>在完成上述步骤之后登陆时可能遇到<code>ERROR 2002 (HY000): Can‘t connect to local MySQL server through socket ‘/var/lib/mysql/mysql.sock‘ (2)</code>错误。</p>
<blockquote>
<p>这个错误的原因是<code>/var/lib/mysql</code>的访问权限问题。下面的命令把<code>/var/lib/mysql</code>的拥有者改为当前用户。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">chown -R openscanner:openscanner /var/lib/mysql</div><div class="line">chown -R root:root /var/lib/mysql</div></pre></td></tr></table></figure>
<p>于是乎接下来就是查看一下<code>/var/lib/mysql/mysql.sock</code>文件是否存在，第一次查看时该文件不存在，后来在<code>/etc/my.cnf</code>文件中添加了<code>user=mysql</code><br>然后尝试登录<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">mysql -u root</div></pre></td></tr></table></figure></p>
<p>会出现<code>ERROR 1045 (28000): Access denied for user &#39;root&#39;@&#39;localhost&#39; (using password: NO)</code> 登录root帐号需要密码，现在我们没有设置密码，哪来的密码。<br>于是乎我们开始忘记密码的操作<br>第一步，在/etc/my.cnf文件中添加skip-grant-tables<br>第二步，重启mysql，service mysqld restart<br>第三步，登录mysql，<code>mysql -u root</code><br>第四步，修改密码：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">mysql&gt;use mysql;</div><div class="line">mysql&gt;update mysql.user set authentication_string=password(&apos;你的密码&apos;) where user=&apos;root&apos;;</div><div class="line">mysql&gt;flush privileges;</div><div class="line">mysql&gt;exit;</div></pre></td></tr></table></figure></p>
<p>第五步，恢复/etc/my.cnf，将skip-grant-tables删除或者注释掉<br>第六步，重启mysql，service mysqld restart</p>
<p>分配用户</p>
<blockquote>
<p>host指定该用户在哪个主机上可以登陆，此处的”localhost”，是指该用户只能在本地登录，不能在另外一台机器上远程登录，如果想远程登录的话，将”localhost”改为”%”，表示在任何一台电脑上都可以登录;也可以指定某台机器可以远程登录;</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">CREATE USER &apos;username&apos;@&apos;host&apos; IDENTIFIED BY &apos;password&apos;;</div><div class="line">CREATE USER &apos;test&apos;@&apos;%&apos; IDENTIFIED BY &apos;密码&apos;;</div></pre></td></tr></table></figure>
<p>给创建的用户权限</p>
<blockquote>
<p>privileges：用户的操作权限,如SELECT，INSERT，UPDATE等.如果要授予所的权限则使用ALL;<br>databasename：数据库名。<br>tablename：表名,如果要授予该用户对所有数据库和表的相应操作权限则可用<em>表示, 如</em>.*.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">GRANT privileges ON databasename.tablename TO &apos;username&apos;@&apos;host&apos;</div></pre></td></tr></table></figure>
<blockquote>
<p>下面表示给test用户所有数据库和表的权限</p>
</blockquote>
<p>mysql&gt;GRANT ALL ON <em>.</em> TO ‘test’@’%’; </p>
<h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h2><p>安装<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">yum -y install nginx</div></pre></td></tr></table></figure></p>
<p>启动<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">service nginx start</div></pre></td></tr></table></figure></p>
<p>查找nginx安装在哪，我这里是<code>/etc/nginx/conf.d</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">whereis nginx</div></pre></td></tr></table></figure></p>
<p>进入文件夹<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">cd /etc/nginx/conf.d</div></pre></td></tr></table></figure></p>
<p>然后新建文件，这里以我的域名为例<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">vi www.wclimb.site.conf</div></pre></td></tr></table></figure></p>
<p>然后里面的文件内容我们先不写，我们先把node项目部署一下</p>
<h2 id="使用pm2启动node项目"><a href="#使用pm2启动node项目" class="headerlink" title="使用pm2启动node项目"></a>使用pm2启动node项目</h2><p>这里以我的项目为例<a href="https://github.com/wclimb/Koa2-blog" target="_blank" rel="external">koa2-blog</a><br>我们先找到合适的文件夹存放我们得项目，然后<code>git clone</code>一下（git我们之前安装过了）</p>
<blockquote>
<p>该项目的数据库名叫nodeSql，使用运行之前得先建立好数据库，然后再运行项目，登录数据库执行 create database nodesql;</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git clone https://github.com/wclimb/Koa2-blog.git</div><div class="line">cd Koa2-blog</div><div class="line">cnpm i </div><div class="line">pm2 start index.js</div></pre></td></tr></table></figure>
<p>上面pm2我们也安装过，该项目监听的是3000端口，项目已经运行起来了<br>可以使用<code>pm2 list</code>查看进程列表，使用<code>pm2 log</code>打印日志</p>
<h2 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h2><p>记得刚刚我们没有编写<code>www.wclimb.site.conf</code>文件<br>现在开始写入以下内容，<code>blog.wclimb.site</code>是我的域名，你可以在你的服务器平台去解析一下，目前我们监听的是<code>3000</code>端口，所以代理到<code>3000</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen 80;</div><div class="line">    server_name blog.wclimb.site;</div><div class="line">    location / &#123;</div><div class="line">        proxy_pass http://127.0.0.1:3000;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>检验nginx是否正确配置<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">nginx -t</div></pre></td></tr></table></figure></p>
<p>重启nginx<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">service nginx restart</div></pre></td></tr></table></figure></p>
<p>如果不成功，可能还需执行一下命令<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">systemctl stop httpd</div><div class="line">systemctl disable httpd</div></pre></td></tr></table></figure></p>
<h2 id="完结"><a href="#完结" class="headerlink" title="完结"></a>完结</h2><p>OK，现在访问域名看看是否有效果了，整个流程可能有写纰漏，大致流程也差不多了，希望对你有帮助</p>
<p>GitHub：<a href="https://github.com/wclimb" target="_blank" rel="external">wclimb</a></p>
<h2 id="个人小程序"><a href="#个人小程序" class="headerlink" title="个人小程序"></a>个人小程序</h2><p><img src="http://www.wclimb.site/cdn/xcx.jpeg" alt="img"></p>
]]></content>
      <categories>
        <category>Node</category>
        <category>教程</category>
      </categories>
      <tags>
        <tag>原创</tag>
        <tag>javascript</tag>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>redis简易教程以及使用nodejs连接redis</title>
    <url>/2019/04/19/redis%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8nodejs%E8%BF%9E%E6%8E%A5redis/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一直没机会学习<code>redis</code>，最近抽空学了一下，因为知道<code>reids</code>还是比较重要的，经常看到有人开发公众号因为没有对<code>access_token</code>进行缓存，判断是否过期，导致<code>access_token</code>的调用<code>api</code>次数超过限制而影响业务的情况，熟悉的人都知道使用<code>redis</code>基本上都是做缓存，因为他简单、速度快，可以说是个”快男”。使用<code>reids</code>做抽奖也很普遍，有空可以试试。本篇本章暂时只讲<code>key</code>、<code>hash</code>、<code>list</code></p>
<h2 id="redis简介"><a href="#redis简介" class="headerlink" title="redis简介"></a>redis简介</h2><ul>
<li>Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。</li>
<li>Redis 与其他 key - value 缓存产品有以下三个特点：<ol>
<li>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li>
<li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li>
<li>Redis支持数据的备份，即master-slave模式的数据备份。</li>
</ol>
</li>
</ul>
<h2 id="为什么要用redis（优势）"><a href="#为什么要用redis（优势）" class="headerlink" title="为什么要用redis（优势）"></a>为什么要用redis（优势）</h2><ol>
<li>性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。</li>
<li>丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</li>
<li>原子 – Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。</li>
<li>丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。</li>
</ol>
<h2 id="安装运行及调试（这里以mac为例）"><a href="#安装运行及调试（这里以mac为例）" class="headerlink" title="安装运行及调试（这里以mac为例）"></a>安装运行及调试（这里以mac为例）</h2><ol>
<li>先去官网下载安装包：<a href="http://www.redis.net.cn/download/" target="_blank" rel="external">http://www.redis.net.cn/download/</a></li>
<li>解压安装</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; tar xzf redis-3.0.6.tar.gz</div><div class="line">&gt; make</div><div class="line">&gt; sudo make install</div><div class="line">&gt; cd /usr/local/bin &amp;&amp; redis-server // 开启redis服务</div><div class="line">&gt; cd /usr/local/bin &amp;&amp; redis-cli // 开启redis调试服务</div></pre></td></tr></table></figure>
<p>开启调试会显示下面的界面，现在你就可以开始使用redis的api了<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; cd /usr/local/bin &amp;&amp; redis-cli</div><div class="line">127.0.0.1:6379&gt;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="全局api"><a href="#全局api" class="headerlink" title="全局api"></a>全局api</h2><h3 id="查询键"><a href="#查询键" class="headerlink" title="查询键"></a>查询键</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">127.0.0.1:6379&gt; keys *</div><div class="line">1) &quot;wclimb&quot;</div><div class="line">2) &quot;key&quot;</div><div class="line">3) &quot;me&quot;</div><div class="line">4) &quot;user&quot;</div><div class="line">5) &quot;user1&quot;</div></pre></td></tr></table></figure>
<h3 id="键的总数"><a href="#键的总数" class="headerlink" title="键的总数"></a>键的总数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">127.0.0.1:6379&gt; dbsize </div><div class="line">(integer) 5</div></pre></td></tr></table></figure>
<h3 id="检查键是否存在"><a href="#检查键是否存在" class="headerlink" title="检查键是否存在"></a>检查键是否存在</h3><p>存在返回 1 ，不存在返回 0<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">127.0.0.1:6379&gt; exists wclimb </div><div class="line">(integer) 1</div><div class="line">127.0.0.1:6379&gt; exists wclimb1 </div><div class="line">(integer) 0</div></pre></td></tr></table></figure></p>
<h3 id="删除键"><a href="#删除键" class="headerlink" title="删除键"></a>删除键</h3><p>返回结果为成功删除键的个数<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">127.0.0.1:6379&gt; del user1 </div><div class="line">(integer) 1</div></pre></td></tr></table></figure></p>
<h3 id="键过期"><a href="#键过期" class="headerlink" title="键过期"></a>键过期</h3><p>expire key seconds 当超过过期时间，会自动删除，key在seconds秒后过期<br>expireat key timestamp 键在秒级时间戳timestamp后过期<br>pexpire key milliseconds 当超过过期时间，会自动删除，key在milliseconds毫秒后过期<br>pexpireat key milliseconds-timestamp key在毫秒级时间戳timestamp后过期</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">127.0.0.1:6379&gt; expire user 10   // 10秒后user会被删除</div><div class="line">(integer) 1</div></pre></td></tr></table></figure>
<h3 id="randomkey-随机返回一个键"><a href="#randomkey-随机返回一个键" class="headerlink" title="randomkey 随机返回一个键"></a>randomkey 随机返回一个键</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">127.0.0.1:6379&gt; randomkey </div><div class="line">&quot;wclimb&quot;</div><div class="line">127.0.0.1:6379&gt; randomkey </div><div class="line">&quot;me&quot;</div></pre></td></tr></table></figure>
<h2 id="redis-键（key）"><a href="#redis-键（key）" class="headerlink" title="redis 键（key）"></a>redis 键（key）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">set key value [ex] [px] [nx|xx]</div><div class="line">ex为键值设置秒级过期时间</div><div class="line">px为键值设置毫秒级过期时间</div><div class="line">nx键必须不存在，才可以设置成功，用于添加</div><div class="line">xx与nx相反，键必须存在，才可以设置成功，用于更新</div><div class="line">setnx、setex 与上面的nx、ex作用相同</div></pre></td></tr></table></figure>
<h3 id="设置key-O-1"><a href="#设置key-O-1" class="headerlink" title="设置key(O(1))"></a>设置key(O(1))</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">127.0.0.1:6379&gt; set name 25 </div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; keys * </div><div class="line">1) &quot;wclimb&quot;</div><div class="line">2) &quot;key&quot;</div><div class="line">3) &quot;me&quot;</div><div class="line">4) &quot;name&quot;</div></pre></td></tr></table></figure>
<h3 id="获取key-O-1"><a href="#获取key-O-1" class="headerlink" title="获取key(O(1))"></a>获取key(O(1))</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">127.0.0.1:6379&gt; get name </div><div class="line">&quot;25&quot;</div></pre></td></tr></table></figure>
<h3 id="批量设置key"><a href="#批量设置key" class="headerlink" title="批量设置key"></a>批量设置key</h3><p>mset key value [key value ……]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">127.0.0.1:6379&gt; mset test1 1 test2 2</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; get test2</div><div class="line">&quot;2&quot;</div></pre></td></tr></table></figure>
<h3 id="追加值-O-1"><a href="#追加值-O-1" class="headerlink" title="追加值(O(1))"></a>追加值(O(1))</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">127.0.0.1:6379&gt; append test2 apend</div><div class="line">(integer) 6</div><div class="line">127.0.0.1:6379&gt; get test2 </div><div class="line">&quot;2apend&quot;</div></pre></td></tr></table></figure>
<h3 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">127.0.0.1:6379&gt; strlen test2</div><div class="line">(integer) 6</div></pre></td></tr></table></figure>
<h2 id="哈希（hash）"><a href="#哈希（hash）" class="headerlink" title="哈希（hash）"></a>哈希（hash）</h2><p>HGET KEY_NAME FIELD_NAME<br>类似javscript里的对象 {}</p>
<h3 id="设置hash"><a href="#设置hash" class="headerlink" title="设置hash"></a>设置hash</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">127.0.0.1:6379&gt; HMSET hash name wclimb age 25</div><div class="line">OK</div></pre></td></tr></table></figure>
<h3 id="获取hash"><a href="#获取hash" class="headerlink" title="获取hash"></a>获取hash</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">127.0.0.1:6379&gt; hmget hash name</div><div class="line">1) &quot;wclimb&quot;</div></pre></td></tr></table></figure>
<h3 id="删除hash"><a href="#删除hash" class="headerlink" title="删除hash"></a>删除hash</h3><p>hdel key field [field ……] 会删除一个或多个field，返回结果为成功删除fiel的个数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">127.0.0.1:6379&gt; hdel hash name</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:6379&gt; hmget hash name  // 再获取就返回nil</div><div class="line">1) (nil)</div></pre></td></tr></table></figure>
<h3 id="获取所有field"><a href="#获取所有field" class="headerlink" title="获取所有field"></a>获取所有field</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">127.0.0.1:6379&gt; hkeys hash</div><div class="line">1) &quot;age&quot;</div><div class="line">127.0.0.1:6379&gt; HMSET hash name wclimb from jiangxi</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; hkeys hash</div><div class="line">1) &quot;age&quot;</div><div class="line">2) &quot;name&quot;</div><div class="line">3) &quot;from&quot;</div></pre></td></tr></table></figure>
<h3 id="获取所有value"><a href="#获取所有value" class="headerlink" title="获取所有value"></a>获取所有value</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">127.0.0.1:6379&gt; hvals hash</div><div class="line">1) &quot;25&quot;</div><div class="line">2) &quot;wclimb&quot;</div><div class="line">3) &quot;jiangxi&quot;</div></pre></td></tr></table></figure>
<h2 id="列表（list）"><a href="#列表（list）" class="headerlink" title="列表（list）"></a>列表（list）</h2><table>
<thead>
<tr>
<th>操作类型</th>
<th>操作</th>
</tr>
</thead>
<tbody>
<tr>
<td>添加</td>
<td>rpush 、lpush、linsert</td>
</tr>
<tr>
<td>查</td>
<td>lrange、lindex、llen</td>
</tr>
<tr>
<td>删除</td>
<td>lpop 、rpop、 lrem、ltrim</td>
</tr>
<tr>
<td>修改</td>
<td>lset</td>
</tr>
<tr>
<td>阻塞操作</td>
<td>blpop、brpop</td>
</tr>
</tbody>
</table>
<h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><p>（1）从左边插入元素<br>lpush key value [value……]<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">127.0.0.1:6379&gt; LPUSH list redis</div><div class="line">(integer) 1</div></pre></td></tr></table></figure></p>
<p>（1）从右边插入元素<br>rpush key value [value……]<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">127.0.0.1:6379&gt; RPUSH list test</div><div class="line">(integer) 2</div></pre></td></tr></table></figure></p>
<h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p>lrange key start end 索引下标从左到右分别是0到N-1，从右到左分别是-1到-N；end选项包含了自身<br>lrange key 0 -1 可以从左到右获取列表的所有元素<br>lrange mylist 1 3 获取列表中第2个到第4个元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">127.0.0.1:6379&gt; lrange list 0 1</div><div class="line">1) &quot;redis&quot;</div><div class="line">2) &quot;test&quot;</div></pre></td></tr></table></figure>
<h3 id="长度"><a href="#长度" class="headerlink" title="长度"></a>长度</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">127.0.0.1:6379&gt; llen key</div><div class="line">(integer) 2</div></pre></td></tr></table></figure>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>我们先添加几个</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">127.0.0.1:6379&gt; LPUSH list a b c</div><div class="line">(integer) 5</div></pre></td></tr></table></figure>
<p>（1）从列表右侧弹出元素 rpop key</p>
<p>（2）从列表左侧弹出元素 lpop key</p>
<p>先看看现在的列表<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">127.0.0.1:6379&gt; lrange list 0 -1</div><div class="line">1) &quot;c&quot;</div><div class="line">2) &quot;b&quot;</div><div class="line">3) &quot;a&quot;</div><div class="line">4) &quot;redis&quot;</div><div class="line">5) &quot;test&quot;</div></pre></td></tr></table></figure></p>
<p>删除<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">127.0.0.1:6379&gt; rpop list </div><div class="line">&quot;test&quot;</div></pre></td></tr></table></figure></p>
<p>我们发现test被删除了，现在看看我们的列表<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">127.0.0.1:6379&gt; lrange list 0 -1</div><div class="line">1) &quot;c&quot;</div><div class="line">2) &quot;b&quot;</div><div class="line">3) &quot;a&quot;</div><div class="line">4) &quot;redis&quot;</div></pre></td></tr></table></figure></p>
<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>lset key index newValue 修改指定索引下标的元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">127.0.0.1:6379&gt; lset list 0 newValue</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; lrange list 0 -1</div><div class="line">1) &quot;newValue&quot;</div><div class="line">2) &quot;b&quot;</div><div class="line">3) &quot;a&quot;</div><div class="line">4) &quot;redis&quot;</div></pre></td></tr></table></figure>
<p>第0个下标的元素被替换成最新的值</p>
<h2 id="使用node连接redis"><a href="#使用node连接redis" class="headerlink" title="使用node连接redis"></a>使用node连接redis</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; npm init</div><div class="line">&gt; cnpm i reids -S</div><div class="line">&gt; touch index.js</div><div class="line">&gt; vim index.js</div></pre></td></tr></table></figure>
<h3 id="连接redis"><a href="#连接redis" class="headerlink" title="连接redis"></a>连接redis</h3><p>redis npm包链接 <a href="https://www.npmjs.com/package/redis" target="_blank" rel="external">https://www.npmjs.com/package/redis</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> redis = <span class="built_in">require</span>(<span class="string">'redis'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> client = redis.createClient(<span class="number">6379</span>, <span class="string">'127.0.0.1'</span>);</div><div class="line">client.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Error '</span> + err);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="设置获取key"><a href="#设置获取key" class="headerlink" title="设置获取key"></a>设置获取key</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">client.set(<span class="string">'user'</span>, <span class="built_in">JSON</span>.stringify(&#123; <span class="attr">name</span>: <span class="string">'wclimb'</span>, <span class="attr">age</span>: <span class="string">'18'</span> &#125;), redis.print);</div><div class="line">client.get(<span class="string">'user'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, value</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'Got: '</span> + value);</div><div class="line">  client.quit();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>控制台打印</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; node index.js</div><div class="line">Reply: OK</div><div class="line">Got: &#123;&quot;name&quot;:&quot;wclimb&quot;,&quot;age&quot;:&quot;18&quot;&#125;</div></pre></td></tr></table></figure>
<h3 id="设置获取hash"><a href="#设置获取hash" class="headerlink" title="设置获取hash"></a>设置获取hash</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">client.hmset(<span class="string">"hosts"</span>, <span class="string">"mjr"</span>, <span class="string">"1"</span>, <span class="string">"another"</span>, <span class="string">"23"</span>, <span class="string">"home"</span>, <span class="string">"1234"</span>);</div><div class="line">client.hgetall(<span class="string">"hosts"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, obj</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.dir(obj);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>控制台打印<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; node index.js</div><div class="line">&#123; mjr: &apos;1&apos;, another: &apos;23&apos;, home: &apos;1234&apos; &#125;</div></pre></td></tr></table></figure></p>
<h3 id="设置获取list"><a href="#设置获取list" class="headerlink" title="设置获取list"></a>设置获取list</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">client.LPUSH(<span class="string">'list'</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], redis.print);</div><div class="line">client.lrange(<span class="string">'list'</span>, <span class="string">'0'</span>, <span class="string">'-1'</span>, redis.print);</div></pre></td></tr></table></figure>
<p>控制台打印<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; node index.js</div><div class="line">Reply: 8</div><div class="line">Reply: 4,3,2,1,newValue,b,a,redis</div></pre></td></tr></table></figure></p>
<p>基本用法和上面讲的都差不多，直接上去一顿写就完事了，完全可以不带脑子的使用各种api</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Node</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>撸一个简易Virtual DOM</title>
    <url>/2020/03/19/simple-virtual-dom/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="http://www.wclimb.site/2020/03/17/vue-source-code-virtual-dom/">上一篇</a>我们讲了一下 <code>Vue</code> 的 <code>虚拟DOM</code>，从创建到更新整个流程。今天带大家撸一个简易的<code>虚拟DOM</code>，本文的大部分借鉴 <code>Vue</code> 源码</p>
<h2 id="浏览器渲染流程"><a href="#浏览器渲染流程" class="headerlink" title="浏览器渲染流程"></a>浏览器渲染流程</h2><blockquote>
<p>摘自<a href="https://time.geekbang.org/column/article/118826" target="_blank" rel="external">浏览器工作原理与实践</a></p>
</blockquote>
<p><img src="/img/virtual-dom/brower-dom-render.png" alt=""></p>
<ol>
<li>渲染进程将 <code>HTML</code> 内容转换为能够读懂的 <code>DOM</code> 树结构。</li>
<li>渲染引擎将 <code>CSS</code> 样式表转化为浏览器可以理解的 <code>styleSheets</code>，计算出 <code>DOM</code> 节点的样式。</li>
<li>创建布局树，并计算元素的布局信息。</li>
<li>对布局树进行分层，并生成分层树。</li>
<li>为每个图层生成绘制列表，并将其提交到合成线程。</li>
<li>合成线程将图层分成图块，并在光栅化线程池中将图块转换成位图。</li>
<li>合成线程发送绘制图块命令 <code>DrawQuad</code> 给浏览器进程。</li>
<li>浏览器进程根据 <code>DrawQuad</code> 消息生成页面，并显示到显示器上。</li>
</ol>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>首先我们要明白什么是<code>虚拟DOM</code>，为什么要用到它，<code>虚拟DOM</code> 是使用 <code>javascript</code> 对象来描述 <code>DOM</code> 树，一切的更新修改都是在更改这个对象，然后反应到真实的 <code>DOM</code> 下。要说为什么要用到它，肯定是因为性能好，因为直接操作 <code>DOM</code> 的代价是很大的，比如，一次操作中有 <code>10</code> 次更新 <code>DOM</code> 的动作，<code>虚拟DOM</code> 不会立即操作 <code>DOM</code>，而是将这 <code>10</code> 次更新的 <code>diff</code> 内容保存到本地一个 <code>js</code> 对象中，最终将这个 <code>js</code> 对象一次性 反应到 <code>DOM</code> 树上，再进行后续操作，避免大量无谓的计算。也有人反驳说，使用 <code>虚拟DOM</code> 比起操作真实 <code>DOM</code> 要慢，的确如此，使用 <code>虚拟DOM</code> 确实没有原生操作快，但是既然使用了框架，优化框架都会帮你做，你不用自己去手动做DOM的优化，不用处处去考虑操作 <code>DOM</code> 带来的性能问题，使用 <code>虚拟DOM</code> 可以让性能得到有力的保证。</p>
<p>可以参考知乎问题 <a href="https://www.zhihu.com/question/31809713" target="_blank" rel="external">网上都说操作真实 DOM 慢，但测试结果却比 React 更快，为什么？</a></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="使用js对象模拟DOM树"><a href="#使用js对象模拟DOM树" class="headerlink" title="使用js对象模拟DOM树"></a>使用js对象模拟DOM树</h3><p>这里我们不使用 <code>Vue</code> 的那种根据 <code>template</code> 生成 <code>虚拟DOM</code> 的方法，那样太复杂了，这里只讲简单的方法，我们直接使用 <code>js</code> 对象来描述 <code>DOM</code></p>
<p>比如如下 的<code>html</code> 代码<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">data-title</span>=<span class="string">"header"</span>&gt;</span>Virtual Dom<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"ul1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>使用 <code>js</code> 对象表示<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">vnode</span>(<span class="params">tag, data, children</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    tag,</div><div class="line">    data,</div><div class="line">    children,</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createElement</span>(<span class="params">vNode</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> el;</div><div class="line">  <span class="keyword">if</span> (vNode.tag === <span class="string">'textNode'</span>) &#123;</div><div class="line">    el = <span class="built_in">document</span>.createTextNode(vNode.children[<span class="number">0</span>]);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    el = <span class="built_in">document</span>.createElement(vNode.tag);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> vNode.data) &#123;</div><div class="line">      <span class="keyword">if</span> (vNode.data.hasOwnProperty(key)) &#123;</div><div class="line">        el.setAttribute(key, vNode.data[key]);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(vNode.children) &amp;&amp; vNode.children.length &gt; <span class="number">0</span>) &#123;</div><div class="line">      vNode.children.forEach(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</div><div class="line">        el.appendChild(createElement(val));</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  vNode.$el = el;</div><div class="line">  <span class="keyword">return</span> el;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li><code>tag</code>：表示当前元素的标签名，后面会看到有 <code>textNode</code> 的标签名，实际上没有，在这里特指文本节点</li>
<li><code>data</code>：表示当前元素上的 <code>attribute</code></li>
<li><p><code>children</code>：表示当前元素的子元素</p>
</li>
<li><p><code>createElement</code>：使用该方法渲染到页面上</p>
</li>
</ul>
<p>生成 <code>vNode</code><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> vNode1 = vnode(<span class="string">'div'</span>, &#123; <span class="attr">id</span>: <span class="string">'app'</span> &#125;, [</div><div class="line">  vnode(<span class="string">'h1'</span>, &#123; <span class="string">'data-title'</span>: <span class="string">'header'</span> &#125;, [</div><div class="line">    vnode(<span class="string">'textNode'</span>, &#123;&#125;, [<span class="string">'Virtual Dom'</span>]),</div><div class="line">  ]),</div><div class="line">  vnode(<span class="string">'ul'</span>, &#123; <span class="attr">class</span>: <span class="string">'ul1'</span> &#125;, [</div><div class="line">    vnode(<span class="string">'li'</span>, &#123;&#125;, [vnode(<span class="string">'textNode'</span>, &#123;&#125;, [<span class="string">'1'</span>])]),</div><div class="line">    vnode(<span class="string">'li'</span>, &#123;&#125;, [vnode(<span class="string">'textNode'</span>, &#123;&#125;, [<span class="string">'2'</span>])]),</div><div class="line">    vnode(<span class="string">'li'</span>, &#123;&#125;, [vnode(<span class="string">'textNode'</span>, &#123;&#125;, [<span class="string">'3'</span>])]),</div><div class="line">  ]),</div><div class="line">]);</div></pre></td></tr></table></figure></p>
<p><img src="/img/virtual-dom/vnode.png" alt=""></p>
<p>反应到页面上，把结果放到 <code>body</code> 下<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">document</span>.body.appendChild(createElement(vNode1))</div></pre></td></tr></table></figure></p>
<p>效果<br><img src="/img/virtual-dom/old.png" alt=""></p>
<h3 id="更新Virtual-Dom"><a href="#更新Virtual-Dom" class="headerlink" title="更新Virtual Dom"></a>更新Virtual Dom</h3><p>更新之前我们把之前的旧的<code>虚拟DOM</code> <code>li</code>列表上的 <code>key</code>值加上</p>
<p><code>oldVNode</code><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> vNode1 = vnode(<span class="string">'div'</span>, &#123; <span class="attr">id</span>: <span class="string">'app'</span> &#125;, [</div><div class="line">  vnode(<span class="string">'h1'</span>, &#123; <span class="string">'data-title'</span>: <span class="string">'header'</span> &#125;, [</div><div class="line">    vnode(<span class="string">'textNode'</span>, &#123;&#125;, [<span class="string">'Virtual Dom'</span>]),</div><div class="line">  ]),</div><div class="line">  vnode(<span class="string">'ul'</span>, &#123; <span class="attr">class</span>: <span class="string">'ul1'</span> &#125;, [</div><div class="line">    vnode(<span class="string">'li'</span>, &#123;<span class="attr">key</span>: <span class="number">1</span>&#125;, [vnode(<span class="string">'textNode'</span>, &#123;&#125;, [<span class="string">'1'</span>])]),</div><div class="line">    vnode(<span class="string">'li'</span>, &#123;<span class="attr">key</span>: <span class="number">2</span>&#125;, [vnode(<span class="string">'textNode'</span>, &#123;&#125;, [<span class="string">'2'</span>])]),</div><div class="line">    vnode(<span class="string">'li'</span>, &#123;<span class="attr">key</span>: <span class="number">3</span>&#125;, [vnode(<span class="string">'textNode'</span>, &#123;&#125;, [<span class="string">'3'</span>])]),</div><div class="line">  ]),</div><div class="line">]);</div></pre></td></tr></table></figure></p>
<p><code>newVNode</code><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> vNode2 = vnode(<span class="string">'div'</span>, &#123; <span class="attr">id</span>: <span class="string">'app'</span> &#125;, [</div><div class="line">  vnode(<span class="string">'h4'</span>, &#123; <span class="attr">id</span>: <span class="string">'header'</span>&#125;, [</div><div class="line">    vnode(<span class="string">'textNode'</span>, &#123;&#125;, [<span class="string">'元素标签改变了'</span>]),</div><div class="line">  ]),</div><div class="line">  vnode(<span class="string">'ul'</span>, &#123; <span class="attr">class</span>: <span class="string">'ul2'</span> &#125;, [</div><div class="line">    vnode(<span class="string">'li'</span>, &#123;<span class="attr">key</span>: <span class="number">5</span>&#125;, [vnode(<span class="string">'textNode'</span>, &#123;&#125;, [<span class="string">'5'</span>])]),</div><div class="line">    vnode(<span class="string">'li'</span>, &#123;<span class="attr">key</span>: <span class="number">2</span>&#125;, [vnode(<span class="string">'textNode'</span>, &#123;&#125;, [<span class="string">'2'</span>])]),</div><div class="line">    vnode(<span class="string">'li'</span>, &#123;<span class="attr">key</span>: <span class="number">1</span>&#125;, [vnode(<span class="string">'textNode'</span>, &#123;&#125;, [<span class="string">'1'</span>])]),</div><div class="line">    vnode(<span class="string">'li'</span>, &#123;<span class="attr">key</span>: <span class="number">4</span>&#125;, [vnode(<span class="string">'textNode'</span>, &#123;&#125;, [<span class="string">'4'</span>])]),</div><div class="line">  ]),</div><div class="line">]);</div></pre></td></tr></table></figure></p>
<p>你会发现为把 <code>h1</code> 标签改成了 <code>h4</code>,文本那样也改变了，在 <code>ul</code> 列表里，把他们的顺序改变了，并插入删除了部分元素。当然你也可以定制更复杂的结构</p>
<p>开始 <code>diff</code>，调用 <code>patchVnode</code> 方法<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">patchVnode(vNode1, vNode2);</div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">patchVnode</span>(<span class="params">oldVnode, vnode</span>) </span>&#123;</div><div class="line">  <span class="comment">// 1. 文本节点都一样</span></div><div class="line">  <span class="keyword">if</span> (oldVnode.tag === <span class="string">'textNode'</span> || vnode.tag === <span class="string">'textNode'</span>) &#123;</div><div class="line">    <span class="keyword">if</span> (oldVnode.children[<span class="number">0</span>] !== vnode.children[<span class="number">0</span>]) &#123;</div><div class="line">      oldVnode.$el.textContent = vnode.children[<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 2. data是否被改变</span></div><div class="line">  <span class="keyword">if</span> (dataChanged(oldVnode.data, vnode.data)) &#123;</div><div class="line">    <span class="keyword">const</span> oldData = oldVnode.data;</div><div class="line">    <span class="keyword">const</span> newData = vnode.data;</div><div class="line">    <span class="keyword">const</span> oldDataKeys = <span class="built_in">Object</span>.keys(oldData);</div><div class="line">    <span class="keyword">const</span> newDataKeys = <span class="built_in">Object</span>.keys(newData);</div><div class="line">    <span class="keyword">if</span> (oldDataKeys.length === <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; oldDataKeys.length; i++) &#123;</div><div class="line">        oldVnode.$el.removeAttribute(oldData[i]);</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">const</span> filterKeys = <span class="keyword">new</span> <span class="built_in">Set</span>([...oldDataKeys, ...newDataKeys]);</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> filterKeys) &#123;</div><div class="line">        <span class="keyword">if</span> (isUndef(newData[key])) &#123;</div><div class="line">          oldVnode.$el.removeAttribute(oldData[key]);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (newData[key] !== oldData[key]) &#123;</div><div class="line">          oldVnode.$el.setAttribute(key, newData[key]);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> oldCh = oldVnode.children;</div><div class="line">  <span class="keyword">var</span> ch = vnode.children;</div><div class="line">  <span class="comment">// 如果新旧子节点仍然存在，则继续diff它的子节点</span></div><div class="line">  <span class="keyword">if</span> (oldCh.length || ch.length) &#123;</div><div class="line">    updateChildren(oldVnode.$el, oldCh, ch);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面先对最外层进行比较，</p>
<ol>
<li>如果是文本，说明已经是当前最后的一个元素了，后面不需要继续执行，发现不一样则改变他们</li>
<li>判断 <code>data</code> 是否变更，如果变更则进行插入或者删除修改操作</li>
<li>继续找它的子元素是否操作，如果存在进行子元素的 <code>diff</code>，使用 <code>updateChildren</code></li>
</ol>
<p><code>updateChildren</code><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateChildren</span>(<span class="params">parentElm, oldCh, newCh</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (oldCh) <span class="keyword">var</span> oldStartIdx = <span class="number">0</span>;</div><div class="line">  <span class="keyword">var</span> newStartIdx = <span class="number">0</span>;</div><div class="line">  <span class="keyword">var</span> oldEndIdx = oldCh.length - <span class="number">1</span>;</div><div class="line">  <span class="keyword">var</span> oldStartVnode = oldCh[<span class="number">0</span>];</div><div class="line">  <span class="keyword">var</span> oldEndVnode = oldCh[oldEndIdx];</div><div class="line">  <span class="keyword">var</span> newEndIdx = newCh.length - <span class="number">1</span>;</div><div class="line">  <span class="keyword">var</span> newStartVnode = newCh[<span class="number">0</span>];</div><div class="line">  <span class="keyword">var</span> newEndVnode = newCh[newEndIdx];</div><div class="line">  <span class="keyword">var</span> oldKeyToIdx, idxInOld, vnodeToMove, refElm;</div><div class="line">  <span class="keyword">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</div><div class="line">    <span class="keyword">if</span> (isUndef(oldStartVnode)) &#123;</div><div class="line">      oldStartVnode = oldCh[++oldStartIdx];</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isUndef(oldEndVnode)) &#123;</div><div class="line">      oldEndVnode = oldCh[--oldEndIdx];</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sameVnode(oldStartVnode, newStartVnode)) &#123;</div><div class="line">      patchVnode(oldStartVnode, newStartVnode);</div><div class="line">      oldStartVnode = oldCh[++oldStartIdx];</div><div class="line">      newStartVnode = newCh[++newStartIdx];</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sameVnode(oldEndVnode, newEndVnode)) &#123;</div><div class="line">      patchVnode(oldEndVnode, newEndVnode);</div><div class="line">      oldEndVnode = oldCh[--oldEndIdx];</div><div class="line">      newEndVnode = newCh[--newEndIdx];</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sameVnode(oldStartVnode, newEndVnode)) &#123;</div><div class="line">      patchVnode(oldStartVnode, newEndVnode);</div><div class="line">      parentElm.insertBefore(oldStartVnode.$el, oldEndVnode.$el.nextSibling);</div><div class="line">      oldStartVnode = oldCh[++oldStartIdx];</div><div class="line">      newEndVnode = newCh[--newEndIdx];</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sameVnode(oldEndVnode, newStartVnode)) &#123;</div><div class="line">      patchVnode(oldEndVnode, newStartVnode);</div><div class="line">      parentElm.insertBefore(oldEndVnode.$el, oldStartVnode.$el);</div><div class="line">      oldEndVnode = oldCh[--oldEndIdx];</div><div class="line">      newStartVnode = newCh[++newStartIdx];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">if</span> (isUndef(oldKeyToIdx)) &#123;</div><div class="line">        oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);</div><div class="line">      &#125;</div><div class="line">      idxInOld = isDef(newStartVnode.key)</div><div class="line">        ? oldKeyToIdx[newStartVnode.key]</div><div class="line">        : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);</div><div class="line">      <span class="keyword">if</span> (isUndef(idxInOld)) &#123;</div><div class="line">        parentElm.insertBefore(createElement(newStartVnode), oldStartVnode.$el);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        vnodeToMove = oldCh[idxInOld];</div><div class="line">        <span class="keyword">if</span> (sameVnode(vnodeToMove, newStartVnode)) &#123;</div><div class="line">          patchVnode(vnodeToMove, newStartVnode);</div><div class="line">          oldCh[idxInOld] = <span class="literal">undefined</span>;</div><div class="line">          parentElm.insertBefore(vnodeToMove.$el, oldStartVnode.$el);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          parentElm.insertBefore(</div><div class="line">            createElement(newStartVnode),</div><div class="line">            oldStartVnode.$el,</div><div class="line">          );</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      newStartVnode = newCh[++newStartIdx];</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (oldStartIdx &gt; oldEndIdx) &#123;</div><div class="line">    addVnodes(parentElm, newCh, newStartIdx, newEndIdx);</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (newStartIdx &gt; newEndIdx) &#123;</div><div class="line">    removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面代码基本参照 <code>Vue</code> 源码的方法，如果你阅读过我<a href="http://www.wclimb.site/2020/03/17/vue-source-code-virtual-dom/">之前发的文章</a>，肯定有印象，代码内就不多作解释了，上一篇文章的注释说得很明白，感兴趣可以去翻阅一下。</p>
<p>看一下结果，一切都正常</p>
<p><img src="/img/virtual-dom/new.png" alt=""></p>
<p>相关源码已经放在 <code>GitHub:</code> <a href="https://github.com/wclimb/simple-virtual-dom" target="_blank" rel="external">https://github.com/wclimb/simple-virtual-dom</a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文带大家撸了一个 <code>虚拟DOM</code>，代码大部分参照 <code>Vue</code> 的源码改造，并没有过多的去阐述代码内的运行流程，因为上一篇已经大致讲过了，本文意在抛砖引玉，如有问题还望指出</p>
<p>本文地址 <a href="http://www.wclimb.site/2020/03/19/simple-virtual-dom/">撸一个简易Virtual Dom</a></p>
]]></content>
      <categories>
        <category>javascript</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>原创</tag>
        <tag>javascript</tag>
        <tag>vue</tag>
        <tag>源码</tag>
      </tags>
  </entry>
  <entry>
    <title>编写一个webpack</title>
    <url>/2020/04/22/simple-webpack/</url>
    <content><![CDATA[<h2 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h2><ol>
<li>支持 <code>esModule</code> </li>
<li>支持 <code>import()</code> 异步加载文件</li>
<li>支持 <code>loader</code></li>
</ol>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>我们需要借助 <code>babel</code> 来解析，先 <code>npm init -y</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npm i @babel/parser @babel/traverse @babel/core @babel/preset-env -D</div></pre></td></tr></table></figure></p>
<p>最终的文件目录结构<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">|-- dist           // 打包目标文件夹 </div><div class="line">|   |-- 0.bundle.js                       </div><div class="line">|   |-- 1.bundle.js                    </div><div class="line">|   |-- result.js                       </div><div class="line">|-- src            // 项目测试代码                         </div><div class="line">|   |-- entry.js                   </div><div class="line">|   |-- messgae.js            </div><div class="line">|   |-- name.js            </div><div class="line">|   |-- a.js              </div><div class="line">|   |-- b.js            </div><div class="line">|-- index.html      // 加载文件打包出的文件             </div><div class="line">|-- app.js          // 启动文件         </div><div class="line">|-- init.js         // 打包项目需要的初始化代码</div><div class="line">|-- babel-plugin.js // babel插件</div><div class="line">|-- loader.js       // loader</div><div class="line">|-- package.json</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>文件内容<br><code>entry.js</code><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> message <span class="keyword">from</span> <span class="string">"./message.js"</span>;</div><div class="line"><span class="built_in">console</span>.log(message);</div><div class="line"><span class="keyword">import</span>(<span class="string">"./a.js"</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"a done"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><code>message.js</code><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; name &#125; <span class="keyword">from</span> <span class="string">"./name.js"</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">`hello <span class="subst">$&#123;name&#125;</span>!`</span>;</div><div class="line"><span class="keyword">import</span>(<span class="string">"./a.js"</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"copy a done"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><code>name.js</code><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">"world"</span>;</div><div class="line"><span class="keyword">import</span>(<span class="string">"./b.js"</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"b done"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><code>a.js</code><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">"import a"</span>);</div><div class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">document</span>.body.style = <span class="string">"background:red;"</span>;</div><div class="line">&#125;, <span class="number">3000</span>);</div></pre></td></tr></table></figure></p>
<p><code>b.js</code><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">"import b"</span>);</div></pre></td></tr></table></figure></p>
<h2 id="编写"><a href="#编写" class="headerlink" title="编写"></a>编写</h2><p>我在之前写的 <a href="http://www.wclimb.site/2019/06/19/webpack%E7%B3%BB%E5%88%97%E4%B9%8B%E8%BE%93%E5%87%BA%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90/">webpack系列之输出文件分析</a> 文章说过，<code>webpack</code>打包出来的代码大致的样子是👇<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">modules</span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</div><div class="line">    ...</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">  return __webpack_require__(__webpack_require__.s = <span class="string">"./src/main.js"</span>);</div><div class="line">&#125;)(&#123;</div><div class="line">  <span class="string">"./src/a.js"</span>: (<span class="function"><span class="keyword">function</span>(<span class="params">module, __webpack_exports__, __webpack_require__</span>) </span>&#123;&#125;</div><div class="line">  <span class="string">"./src/b.js"</span>: (<span class="function"><span class="keyword">function</span>(<span class="params">module, __webpack_exports__, __webpack_require__</span>) </span>&#123;&#125;</div><div class="line">  <span class="string">"./src/main.js"</span>: (<span class="function"><span class="keyword">function</span>(<span class="params">module, __webpack_exports__, __webpack_require__</span>) </span>&#123;&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>借鉴他的思路，我们也可以很快写出来一个简单的 <code>webpack</code>，首先 <code>(function(modules) {...})</code> 内部的代码基本上可以写死，也就是我们等会需要写的 <code>init.js</code>，接着看，这是一个自执行的函数， 传入的是一个对象，首先执行的是主入口的文件，然后再分别去找他们的依赖去执行相应的文件。</p>
<h3 id="热身"><a href="#热身" class="headerlink" title="热身"></a>热身</h3><p>我们这里借助bable来编译代码<br>先简单看一下👇这个示例<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</div><div class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">"@babel/parser"</span>);</div><div class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">"@babel/traverse"</span>).default;</div><div class="line"><span class="keyword">const</span> babel = <span class="built_in">require</span>(<span class="string">"@babel/core"</span>);</div><div class="line"><span class="keyword">let</span> id = <span class="number">0</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> resolve = <span class="function"><span class="keyword">function</span>(<span class="params">filename</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> content = <span class="string">""</span>;</div><div class="line">  content = fs.readFileSync(path.resolve(__dirname, filename), <span class="string">"utf-8"</span>);</div><div class="line">  <span class="comment">// 转ast树</span></div><div class="line">  <span class="keyword">const</span> ast = parser.parse(content, &#123;</div><div class="line">    <span class="attr">sourceType</span>: <span class="string">"module"</span>,</div><div class="line">  &#125;);</div><div class="line">  <span class="comment">// 依赖</span></div><div class="line">  <span class="keyword">const</span> dependencies = [];</div><div class="line">  traverse(ast, &#123;</div><div class="line">    ImportDeclaration(&#123; node &#125;) &#123;</div><div class="line">      <span class="comment">// import '' from ''</span></div><div class="line">      dependencies.push(node.source.value);</div><div class="line">    &#125;,</div><div class="line">  &#125;);</div><div class="line">  <span class="comment">// ES6转成ES5</span></div><div class="line">  <span class="keyword">const</span> &#123; code &#125; = babel.transformFromAstSync(ast, <span class="literal">null</span>, &#123;</div><div class="line">    <span class="attr">presets</span>: [<span class="string">"@babel/preset-env"</span>],</div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">id</span>: id++,</div><div class="line">    dependencies,</div><div class="line">    filename,</div><div class="line">    code,</div><div class="line">  &#125;;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">const</span> result = resolve(<span class="string">"./src/entry.js"</span>);</div><div class="line"><span class="built_in">console</span>.log(result);</div></pre></td></tr></table></figure></p>
<p>打印结果<br><figure class="highlight"><table><tr><td class="code"><pre><div class="line">&#123; id: 0,</div><div class="line">  dependencies: [ './message.js' ],</div><div class="line">  filename: './src/entry.js',</div><div class="line">  code: '"use strict";\n\nvar _message = _interopRequireDefault(require( ....."</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们这里解析了一个入口文件，然后通过 <code>babel</code> 转成 <code>ast</code>，<code>ImportDeclaration</code> 拦截到 <code>import</code>，将它添加到 <code>dependencies</code> 依赖内，处理完 <code>import</code>后把代码转成 <code>es5</code>，最后输出对象，包含当前的文件的<code>id</code>，依赖关系，文件名，以及编译后的源代码。这段代码是整篇的精髓，不过现在只处理了一个文件，我们刚刚找到了当前文件的依赖，接着需要递归查找下一个文件的依赖关系，最后把他们组合起来，跟之前看 <code>webpack</code> 输出的文件思想差不多。</p>
<h3 id="递归查找所有依赖"><a href="#递归查找所有依赖" class="headerlink" title="递归查找所有依赖"></a>递归查找所有依赖</h3><p>在下面添加以下代码👇，顺便删除最后两行 <code>const result = resolve(&quot;./src/entry.js&quot;); console.log(result);</code><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> start = <span class="function"><span class="keyword">function</span>(<span class="params">filename</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> entry = resolve(filename);</div><div class="line">  <span class="keyword">const</span> queue = [entry];</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> asset <span class="keyword">of</span> queue) &#123;</div><div class="line">    <span class="keyword">const</span> dependencies = asset.dependencies;</div><div class="line">    <span class="keyword">const</span> dirname = path.dirname(asset.filename);</div><div class="line">    asset.mapping = &#123;&#125;;</div><div class="line">    dependencies.forEach(<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</div><div class="line">      <span class="keyword">const</span> result = resolve(path.join(dirname, val));</div><div class="line">      asset.mapping[val] = result.id;</div><div class="line">      queue.push(result);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> queue;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">const</span> fileDependenceList = start(<span class="string">"./src/entry.js"</span>);</div><div class="line"><span class="built_in">console</span>.log(fileDependenceList);</div></pre></td></tr></table></figure></p>
<p>执行后结果，我们捋一捋<br>入口 <code>entry.js</code> import 👉 <code>message.js</code><br><code>message.js</code> import 👉 <code>name.js</code><br><code>name.js</code> 没有 <code>import</code> 别的文件所以依赖是空的<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">[</div><div class="line">  &#123;</div><div class="line">    <span class="attr">id</span>: <span class="number">0</span>,</div><div class="line">    <span class="attr">dependencies</span>: [ <span class="string">'./message.js'</span> ],</div><div class="line">    <span class="attr">filename</span>: <span class="string">'./src/entry.js'</span>,</div><div class="line">    <span class="attr">code</span>: <span class="string">'"use strict";\n\nvar _message = _interopRequireDefault(require( ....."'</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="attr">id</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">dependencies</span>: [ <span class="string">'./name.js'</span> ],</div><div class="line">    <span class="attr">filename</span>: <span class="string">'src/message.js'</span>,</div><div class="line">    <span class="attr">code</span>: <span class="string">'"..."'</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    <span class="attr">id</span>: <span class="number">2</span>,</div><div class="line">    <span class="attr">dependencies</span>: [],</div><div class="line">    <span class="attr">filename</span>: <span class="string">'src/name.js'</span>,</div><div class="line">    <span class="attr">code</span>: <span class="string">'"..."'</span></div><div class="line">  &#125;,</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>结果我们得到了，目前还不是之前想要的那个结构，继续添加以下代码<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> moduleStr = <span class="string">""</span>;</div><div class="line">fileDependenceList.forEach(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</div><div class="line">  moduleStr += <span class="string">`<span class="subst">$&#123;value.id&#125;</span>:[</span></div><div class="line">    function(require, module, exports) &#123;</div><div class="line">      <span class="subst">$&#123;value.code&#125;</span>;</div><div class="line">    &#125;,</div><div class="line">    <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(value.mapping)&#125;</span></div><div class="line">  ],`;</div><div class="line">&#125;);</div><div class="line"><span class="keyword">const</span> result = <span class="string">`(<span class="subst">$&#123;fs.readFileSync(<span class="string">"./init.js"</span>, <span class="string">"utf-8"</span>)&#125;</span>)(&#123;<span class="subst">$&#123;moduleStr&#125;</span>&#125;)`</span>;</div><div class="line">fs.writeFileSync(<span class="string">"./dist/result.js"</span>, result); <span class="comment">// 注意这里需要有dist文件夹</span></div></pre></td></tr></table></figure></p>
<p>这里把 <code>init.js</code> 引入了，内容如下<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params">modules</span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">require</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> [fn, mapping] = modules[id];</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">localRequire</span>(<span class="params">relativePath</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="built_in">require</span>(mapping[relativePath]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> <span class="built_in">module</span> = &#123; <span class="attr">exports</span>: &#123;&#125; &#125;;</div><div class="line">    fn(localRequire, <span class="built_in">module</span>, <span class="built_in">module</span>.exports);</div><div class="line">    <span class="keyword">return</span> <span class="built_in">module</span>.exports;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//执行入口文件，</span></div><div class="line">  <span class="keyword">return</span> <span class="built_in">require</span>(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>执行之后在 <code>dist/</code> 下有一个 <code>result</code> 文件，我们放到浏览器去执行，<code>index.html</code> 加载</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>webpack<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./dist/result.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>不出意外控制台输出 <code>hello world</code>，接着会有三个报错，没错，因为我们没有处理 <code>import().then()</code> 这种代码，这个需要单独处理，如果你想把错误去掉，去 <code>src</code> 文件夹把 <code>import()</code> 都注释就完事了。</p>
<p>你去看 <code>result</code> 的代码内容，会发现代码我们首先执行 <code>require(0)</code>，从入口触发，然后递归调用 <code>require</code> 来完成整个流程，看我们之前 <code>moduleStr</code> 输出的代码，结构跟 <code>webpack</code> 输入的有点区别，思路差不多<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="number">0</span>: [</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">require, module, exports</span>) </span>&#123;</div><div class="line">      <span class="keyword">var</span> _message = _interopRequireDefault(<span class="built_in">require</span>(<span class="string">"./message.js"</span>));</div><div class="line">      <span class="function"><span class="keyword">function</span> <span class="title">_interopRequireDefault</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> obj &amp;&amp; obj.__esModule ? obj : &#123; <span class="attr">default</span>: obj &#125;;</div><div class="line">      &#125;</div><div class="line">      <span class="built_in">console</span>.log(_message[<span class="string">"default"</span>]);</div><div class="line">    &#125;,</div><div class="line">    &#123; <span class="string">"./message.js"</span>: <span class="number">1</span> &#125;,</div><div class="line">  ],</div><div class="line">  <span class="number">1</span>: [<span class="function"><span class="keyword">function</span>(<span class="params">require, module, exports</span>) </span>&#123; ... &#125;, &#123; <span class="string">"./name.js"</span>: <span class="number">2</span> &#125;],</div><div class="line">  <span class="number">2</span>: [<span class="function"><span class="keyword">function</span>(<span class="params">require, module, exports</span>) </span>&#123; ... &#125;, &#123;&#125;],</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们 <code>require</code> 都是当前文件的 <code>id</code>，但是我们看内部有一段 <code>require(&quot;./message.js&quot;)</code> ，其实它执行的是 <code>localRequire</code> 方法，通过当前文件数组的第二个值 <code>{ &quot;./message.js&quot;: 1 }</code> 来定位它要执行的 <code>id</code> 是什么，这里的 <code>id</code> 是1，下面就是它的逻辑，通过文件名<code>filename</code>，去查找 <code>mapping</code> 对应的 <code>id</code>。<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> [fn, mapping] = modules[id];</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">localRequire</span>(<span class="params">relativePath</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">require</span>(mapping[relativePath]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="支持-import-异步加载"><a href="#支持-import-异步加载" class="headerlink" title="支持 import() 异步加载"></a>支持 import() 异步加载</h3><p>首先先来解释以下如何异步加载，我们需要先生成 <code>0.bundle.js</code> <code>1.bundle.js</code>这样的文件，然后通过 <code>document.createElement(&quot;script&quot;)</code> 把它 <code>push</code> 到页面的 <code>head</code> 内完成加载。<br>修改<code>babel</code>部分<br><figure class="highlight diff"><table><tr><td class="code"><pre><div class="line">....</div><div class="line"></div><div class="line"><span class="addition">+ let bundleId = 0;</span></div><div class="line"><span class="addition">+ const installedChunks = &#123;&#125;;</span></div><div class="line">const resolve = function(filename) &#123;</div><div class="line">  let content = "";</div><div class="line">  content = fs.readFileSync(path.resolve(__dirname, filename), "utf-8");</div><div class="line">  const ast = parser.parse(content, &#123;</div><div class="line">    sourceType: "module",</div><div class="line">  &#125;);</div><div class="line">  const dependencies = [];</div><div class="line">  traverse(ast, &#123;</div><div class="line">    ImportDeclaration(&#123; node &#125;) &#123;</div><div class="line">      // import '' from ''</div><div class="line">      dependencies.push(node.source.value);</div><div class="line">    &#125;,</div><div class="line"><span class="addition">+    CallExpression(&#123; node &#125;) &#123;</span></div><div class="line"><span class="addition">+      // import()</span></div><div class="line"><span class="addition">+      if (node.callee.type === "Import") &#123;</span></div><div class="line"><span class="addition">+        const realPath = path.join(</span></div><div class="line"><span class="addition">+          path.dirname(filename),</span></div><div class="line"><span class="addition">+          node.arguments[0].value</span></div><div class="line"><span class="addition">+        );</span></div><div class="line"><span class="addition">+        if (installedChunks[realPath] !== undefined) return;</span></div><div class="line"><span class="addition">+        let sourse = fs.readFileSync(realPath, "utf-8");</span></div><div class="line"><span class="addition">+         // 转es5</span></div><div class="line"><span class="addition">+        const &#123; code &#125; = babel.transform(sourse, &#123;</span></div><div class="line"><span class="addition">+          presets: ["@babel/preset-env"]</span></div><div class="line"><span class="addition">+        &#125;);</span></div><div class="line"><span class="addition">+        sourse = `jsonp.load([$&#123;bundleId&#125;, function()&#123;$&#123;code&#125;&#125;])`;</span></div><div class="line"><span class="addition">+        fs.writeFileSync(`./dist/$&#123;bundleId&#125;.bundle.js`, sourse);</span></div><div class="line"><span class="addition">+        installedChunks[realPath] = bundleId;</span></div><div class="line"><span class="addition">+        bundleId++;</span></div><div class="line"><span class="addition">+        process.installedChunks = &#123;</span></div><div class="line"><span class="addition">+          nowPath: path.dirname(filename),</span></div><div class="line"><span class="addition">+          ...installedChunks,</span></div><div class="line"><span class="addition">+        &#125;;</span></div><div class="line"><span class="addition">+      &#125;</span></div><div class="line"><span class="addition">+    &#125;,</span></div><div class="line">  &#125;);</div><div class="line">  // ES6转成ES5</div><div class="line">  const &#123; code &#125; = babel.transformFromAstSync(ast, null, &#123;</div><div class="line"><span class="addition">+    plugins: ["./babel-plugin.js"],</span></div><div class="line">    presets: ["@babel/preset-env"],</div><div class="line">  &#125;);</div><div class="line">  return &#123;</div><div class="line">    id: id++,</div><div class="line">    dependencies,</div><div class="line">    filename,</div><div class="line">    code,</div><div class="line">  &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>我们看到上面我们新增使用 <code>babel</code> 插件 <code>plugins: [&quot;./babel-plugin.js&quot;]</code>，不懂的可以看<a href="https://github.com/jamiebuilds/babel-handbook" target="_blank" rel="external">babel-handbook</a></p>
<p><code>babel-plugin.js</code><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> nodePath = <span class="built_in">require</span>(<span class="string">"path"</span>);</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">&#123; types: t &#125;</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">visitor</span>: &#123;</div><div class="line">      CallExpression(path) &#123;</div><div class="line">        <span class="keyword">if</span> (path.node.callee.type === <span class="string">"Import"</span>) &#123;</div><div class="line">          path.replaceWith(</div><div class="line">            t.callExpression(</div><div class="line">              t.memberExpression(</div><div class="line">                t.identifier(<span class="string">"require"</span>),</div><div class="line">                t.identifier(<span class="string">"import"</span>)</div><div class="line">              ),</div><div class="line">              [</div><div class="line">                t.numericLiteral(</div><div class="line">                  process.installedChunks[</div><div class="line">                    nodePath.join(</div><div class="line">                      process.installedChunks[<span class="string">"nowPath"</span>],</div><div class="line">                      path.node.arguments[<span class="number">0</span>].value</div><div class="line">                    )</div><div class="line">                  ]</div><div class="line">                ),</div><div class="line">              ]</div><div class="line">            )</div><div class="line">          );</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">    &#125;,</div><div class="line">  &#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>上面插件的功能就是把 <code>import(&#39;./a.js&#39;)</code> 转成 <code>require.import(0)</code></p>
<p>修改 <code>init.js</code>，主要是新增 <code>import</code> 方法，借鉴自 <code>webpack</code><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params">modules</span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">require</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> [fn, mapping] = modules[id];</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">localRequire</span>(<span class="params">relativePath</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="built_in">require</span>(mapping[relativePath]);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> <span class="built_in">module</span> = &#123; <span class="attr">exports</span>: &#123;&#125; &#125;;</div><div class="line">    localRequire.import = <span class="built_in">require</span>.import; <span class="comment">// 新增</span></div><div class="line">    fn(localRequire, <span class="built_in">module</span>, <span class="built_in">module</span>.exports);</div><div class="line">    <span class="keyword">return</span> <span class="built_in">module</span>.exports;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> installedChunks = &#123;&#125;; <span class="comment">// 当前新增</span></div><div class="line">  <span class="built_in">require</span>.import = <span class="function"><span class="keyword">function</span>(<span class="params">chunkId</span>) </span>&#123; <span class="comment">// 当前新增</span></div><div class="line">    <span class="keyword">var</span> promises = [];</div><div class="line">    <span class="keyword">var</span> installedChunkData = installedChunks[chunkId];</div><div class="line">    <span class="comment">// 如果没有加载</span></div><div class="line">    <span class="keyword">if</span> (installedChunkData !== <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">if</span> (installedChunkData) &#123;</div><div class="line">        promises.push(installedChunkData[<span class="number">2</span>]);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">          installedChunkData = installedChunks[chunkId] = [resolve, reject];</div><div class="line">        &#125;);</div><div class="line">        promises.push((installedChunkData[<span class="number">2</span>] = promise));</div><div class="line">        <span class="comment">// start chunk loading</span></div><div class="line">        <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</div><div class="line">        <span class="keyword">var</span> onScriptComplete;</div><div class="line">        script.charset = <span class="string">"utf-8"</span>;</div><div class="line">        script.src = <span class="string">"dist/"</span> + chunkId + <span class="string">".bundle.js"</span>;</div><div class="line">        <span class="keyword">var</span> error = <span class="keyword">new</span> <span class="built_in">Error</span>();</div><div class="line">        onScriptComplete = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">          <span class="comment">// avoid mem leaks in IE.</span></div><div class="line">          script.onerror = script.onload = <span class="literal">null</span>;</div><div class="line">          clearTimeout(timeout);</div><div class="line">          <span class="keyword">var</span> chunk = installedChunks[chunkId];</div><div class="line">          <span class="keyword">if</span> (chunk !== <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (chunk) &#123;</div><div class="line">              <span class="keyword">var</span> errorType =</div><div class="line">                event &amp;&amp; (event.type === <span class="string">"load"</span> ? <span class="string">"missing"</span> : event.type);</div><div class="line">              <span class="keyword">var</span> realSrc = event &amp;&amp; event.target &amp;&amp; event.target.src;</div><div class="line">              error.message =</div><div class="line">                <span class="string">"Loading chunk "</span> +</div><div class="line">                chunkId +</div><div class="line">                <span class="string">" failed.\n("</span> +</div><div class="line">                errorType +</div><div class="line">                <span class="string">": "</span> +</div><div class="line">                realSrc +</div><div class="line">                <span class="string">")"</span>;</div><div class="line">              error.name = <span class="string">"ChunkLoadError"</span>;</div><div class="line">              error.type = errorType;</div><div class="line">              error.request = realSrc;</div><div class="line">              chunk[<span class="number">1</span>](error);</div><div class="line">            &#125;</div><div class="line">            installedChunks[chunkId] = <span class="literal">undefined</span>;</div><div class="line">          &#125;</div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">var</span> timeout = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">          onScriptComplete(&#123; <span class="attr">type</span>: <span class="string">"timeout"</span>, <span class="attr">target</span>: script &#125;);</div><div class="line">        &#125;, <span class="number">120000</span>);</div><div class="line">        script.onerror = script.onload = onScriptComplete;</div><div class="line">        <span class="built_in">document</span>.head.appendChild(script);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.all(promises);</div><div class="line">  &#125;;</div><div class="line">  <span class="built_in">window</span>.jsonp = &#123;&#125;; <span class="comment">// 当前新增</span></div><div class="line">  jsonp.load = <span class="function"><span class="keyword">function</span>(<span class="params">bundle</span>) </span>&#123; <span class="comment">// 当前新增</span></div><div class="line">    <span class="keyword">var</span> chunkId = bundle[<span class="number">0</span>];</div><div class="line">    <span class="keyword">var</span> fn = bundle[<span class="number">1</span>];</div><div class="line">    <span class="keyword">var</span> resolve = installedChunks[chunkId][<span class="number">0</span>];</div><div class="line">    installedChunks[chunkId] = <span class="number">0</span>;</div><div class="line">    <span class="comment">// 执行异步加载文件代码</span></div><div class="line">    fn();</div><div class="line">    <span class="comment">// 执行resolve</span></div><div class="line">    resolve();</div><div class="line">  &#125;;</div><div class="line">  <span class="comment">//执行入口文件，</span></div><div class="line">  <span class="keyword">return</span> <span class="built_in">require</span>(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们异步加载的文件都会执行 <code>jsonp.load</code> 方法，，在生成文件 <code>*.bunnd.js</code> 之前都会把代码改装一下，得到下面的结构，这样就可以控制执行源代码及 <code>.then() .catch()</code> 等操作了<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">jsonp.load([</div><div class="line">  <span class="number">0</span>,</div><div class="line">  <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="comment">// 原文件代码</span></div><div class="line">  &#125;,</div><div class="line">]);</div></pre></td></tr></table></figure></p>
<p>然后执行，你会发现 <code>dist</code> 多了两个文件，<code>0.bundle.js</code> <code>1.bundle.js</code>，前提是你没有注释之前 <code>import()</code> 写的代码，然后去浏览器控制台查看，分别打印以下，接着3秒后页面背景变为红色<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">hello world!</div><div class="line">import b</div><div class="line">b done</div><div class="line">import a</div><div class="line">copy a done</div><div class="line">a done</div></pre></td></tr></table></figure></p>
<p>等等，我们使用了三个 <code>import</code>，为什么只有两个文件，因为有一个 <code>import(&#39;./a.js&#39;)</code> 使用了两次，这里我做了缓存，所以重复异步引入的文件会缓存利用</p>
<h3 id="支持loader"><a href="#支持loader" class="headerlink" title="支持loader"></a>支持loader</h3><p><code>loader</code> 支持很简单，其实就是把文件的内容交给它单独处理返回新的结果，我们新建文件 <code>loader.js</code>，内容如下：<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">content</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> content + <span class="string">"; console.log('loader')"</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>在每个js文件后都加上打印loader的代码</p>
<p>接着修改resolve方法内的代码<br><figure class="highlight diff"><table><tr><td class="code"><pre><div class="line"><span class="addition">+ const loader = require("./loader");</span></div><div class="line">const resolve = function(filename) &#123;</div><div class="line">  let content = "";</div><div class="line">  content = fs.readFileSync(path.resolve(__dirname, filename), "utf-8");</div><div class="line"><span class="addition">+  content = loader(content);</span></div><div class="line">  const ast = parser.parse(content, &#123;</div><div class="line">    sourceType: "module",</div><div class="line">  &#125;);</div><div class="line">  ....</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后运行代码，浏览器控制台会打印是三个 <code>loader</code></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>至此，我们完成了 <code>esModule</code> 的支持，文件异步加载的支持、<code>loader</code> 的支持，我们顺便还写了一个 <code>babel</code> 插件，整个流程没有什么难理解的地方，一个 <code>webpack</code> 就这样完成了，当然还可以再把功能完善。支持插件？把 <code>tapable</code> 加入？等等，时间有限，点到为止，如有错误还望指正</p>
<p>本章代码部分借鉴 <code>webpack</code> 输出的 <code>bundle</code> 及 <code>You Gotta Love Frontend</code> 的视频 <a href="https://www.youtube.com/watch?v=Gc9-7PBqOC8&amp;list=LLHK1mTHpwrUeYgF5gu-Kd4g" target="_blank" rel="external">Ronen Amiel - Build Your Own Webpack</a></p>
<p>代码已上传至 <code>GitHub</code>： <a href="https://github.com/wclimb/my-webpack" target="_blank" rel="external">https://github.com/wclimb/my-webpack</a></p>
<p>本文地址 <a href="http://www.wclimb.site/2020/04/22/simple-webpack/">http://www.wclimb.site/2020/04/22/simple-webpack/</a></p>
<h2 id="公众号"><a href="#公众号" class="headerlink" title="公众号"></a>公众号</h2><p><img src="/img/gzh.jpg" alt="img"></p>
]]></content>
      <categories>
        <category>javascript</category>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>原创</tag>
        <tag>javascript</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue源码之双向数据绑定</title>
    <url>/2020/03/15/vue-source-code-data-bind/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近一年多都在做小程序开发，<code>Vue</code> 感觉都有写些生疏了，从今天开始阅读一下 <code>Vue</code> 的源码，了解其内部的工作机制，本文涉及的 <code>Vue</code> 版本为 <code>2.6.11</code>，我已经提前 <code>fork</code> 了一份到 <a href="https://github.com/wclimb/vue" target="_blank" rel="external">github</a> 上</p>
<h2 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h2><p>提到 <code>Vue</code>，自然会想到双向数据绑定，要说他的原理，你也能脱口而出，使用 <code>Object.defineProperty</code> 的 <code>get</code>、<code>set</code>来实现，但要把功能做更强大健壮，往往并不是这么简单。<code>Vue</code>的双向数据绑定由以下几个部分组成</p>
<ol>
<li><code>Obserber监听器</code>：负责数据的劫持调用<code>Object.defineProperty</code>来实现监听效果，<code>get</code>负责收集依赖，<code>set</code>负责派发更新</li>
<li><code>Dep订阅器</code>：负责订阅者的收集，收集依赖</li>
<li><code>Watcher订阅者</code>：负责更新视图</li>
</ol>
<h2 id="从入口开始"><a href="#从入口开始" class="headerlink" title="从入口开始"></a>从入口开始</h2><p><a href="https://github.com/wclimb/vue/blob/dev/src/core/instance/init.js#L15" target="_blank" rel="external">https://github.com/wclimb/vue/blob/dev/src/core/instance/init.js#L15</a><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initMixin</span> (<span class="params">Vue: Class&lt;Component&gt;</span>) </span>&#123;</div><div class="line">  Vue.prototype._init = <span class="function"><span class="keyword">function</span> (<span class="params">options?: Object</span>) </span>&#123;</div><div class="line">    ......</div><div class="line"></div><div class="line">    <span class="comment">// expose real self</span></div><div class="line">    vm._self = vm</div><div class="line">    initLifecycle(vm)</div><div class="line">    initEvents(vm)</div><div class="line">    initRender(vm)</div><div class="line">    callHook(vm, <span class="string">'beforeCreate'</span>)</div><div class="line">    initInjections(vm) <span class="comment">// resolve injections before data/props</span></div><div class="line">    initState(vm)</div><div class="line">    initProvide(vm) <span class="comment">// resolve provide after data/props</span></div><div class="line">    callHook(vm, <span class="string">'created'</span>)</div><div class="line"></div><div class="line">    ......</div><div class="line"></div><div class="line">    if (vm.$options.el) &#123;</div><div class="line">      vm.$mount(vm.$options.el)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>从上面可以看出初始化 <code>Vue</code> 会调用多个函数来做不同的事情，本文主要讲解双向数据绑定，所以其他的在这里都不重要，这里我们着重关注 <code>initState</code> 内部方法<br><a id="more"></a></p>
<h3 id="initState"><a href="#initState" class="headerlink" title="initState"></a>initState</h3><p><a href="https://github.com/wclimb/vue/blob/dev/src/core/instance/state.js#L42" target="_blank" rel="external">https://github.com/wclimb/vue/blob/dev/src/core/instance/state.js#L42</a><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initState</span> (<span class="params">vm: Component</span>) </span>&#123;</div><div class="line">  vm._watchers = []</div><div class="line">  <span class="keyword">const</span> opts = vm.$options</div><div class="line">  <span class="comment">// 如果存在props，初始化props</span></div><div class="line">  <span class="keyword">if</span> (opts.props) initProps(vm, opts.props)</div><div class="line">  <span class="comment">// 挂载定义的方法</span></div><div class="line">  <span class="keyword">if</span> (opts.methods) initMethods(vm, opts.methods)</div><div class="line">  <span class="comment">// 如果存在data，执行initData开始创建监听器</span></div><div class="line">  <span class="keyword">if</span> (opts.data) &#123;</div><div class="line">    initData(vm)</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    observe(vm._data = &#123;&#125;, <span class="literal">true</span> <span class="comment">/* asRootData */</span>)</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 以下同理，都是初始化定义的一些数据</span></div><div class="line">  <span class="keyword">if</span> (opts.computed) initComputed(vm, opts.computed)</div><div class="line">  <span class="keyword">if</span> (opts.watch) initWatch(vm, opts.watch)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="initData"><a href="#initData" class="headerlink" title="initData"></a>initData</h3><p><a href="https://github.com/wclimb/vue/blob/dev/src/core/instance/state.js#L112" target="_blank" rel="external">https://github.com/wclimb/vue/blob/dev/src/core/instance/state.js#L112</a><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">initData</span> (<span class="params">vm: Component</span>) </span>&#123;</div><div class="line">  ....</div><div class="line">  <span class="comment">// observe data</span></div><div class="line">  observe(data, <span class="literal">true</span> <span class="comment">/* asRootData */</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="observe"><a href="#observe" class="headerlink" title="observe"></a>observe</h3><p><a href="https://github.com/wclimb/vue/blob/dev/src/core/observer/index.js#L110" target="_blank" rel="external">https://github.com/wclimb/vue/blob/dev/src/core/observer/index.js#L110</a><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">observe</span> (<span class="params">value: any, asRootData: ?boolean</span>): <span class="title">Observer</span> | <span class="title">void</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (!isObject(value) || value <span class="keyword">instanceof</span> VNode) &#123;</div><div class="line">    <span class="keyword">return</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">let</span> ob: Observer | <span class="keyword">void</span></div><div class="line">  <span class="comment">// 这里判断当前是否已经创建过Observer，如果有就直接返回</span></div><div class="line">  <span class="keyword">if</span> (hasOwn(value, <span class="string">'__ob__'</span>) &amp;&amp; value.__ob__ <span class="keyword">instanceof</span> Observer) &#123;</div><div class="line">    ob = value.__ob__</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (</div><div class="line">    shouldObserve &amp;&amp;</div><div class="line">    !isServerRendering() &amp;&amp;</div><div class="line">    (<span class="built_in">Array</span>.isArray(value) || isPlainObject(value)) &amp;&amp;</div><div class="line">    <span class="built_in">Object</span>.isExtensible(value) &amp;&amp;</div><div class="line">    !value._isVue</div><div class="line">  ) &#123;</div><div class="line">    <span class="comment">// 这里是重点，创建一个Observer</span></div><div class="line">    ob = <span class="keyword">new</span> Observer(value)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (asRootData &amp;&amp; ob) &#123;</div><div class="line">    ob.vmCount++</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> ob</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Observer-监听器"><a href="#Observer-监听器" class="headerlink" title="Observer-监听器"></a>Observer-监听器</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</div><div class="line">  value: any;</div><div class="line">  dep: Dep;</div><div class="line">  vmCount: number; <span class="comment">// number of vms that have this object as root $data</span></div><div class="line"></div><div class="line">  <span class="keyword">constructor</span> (value: any) &#123;</div><div class="line">    <span class="keyword">this</span>.value = value</div><div class="line">    <span class="keyword">this</span>.dep = <span class="keyword">new</span> Dep()</div><div class="line">    <span class="keyword">this</span>.vmCount = <span class="number">0</span></div><div class="line">    <span class="comment">// def其实就是给当前对象定义一个key为__ob__，值为this</span></div><div class="line">    def(value, <span class="string">'__ob__'</span>, <span class="keyword">this</span>)</div><div class="line">    <span class="comment">// 判断当前值是否为数组，如果是数组需要单独处理</span></div><div class="line">    <span class="comment">// 因为我们知道vue主要原理是 Object.defineProperty，但是它监听不了数组的变化，所以3.0采用了proxy</span></div><div class="line">    <span class="comment">// 但是数组只能监听到部分方法的改动，感兴趣可以看 https://github.com/wclimb/vue/blob/dev/src/core/observer/array.js</span></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(value)) &#123;</div><div class="line">      <span class="keyword">if</span> (hasProto) &#123;</div><div class="line">        protoAugment(value, arrayMethods)</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        copyAugment(value, arrayMethods, arrayKeys)</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">this</span>.observeArray(value)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">this</span>.walk(value)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 除了数组，都会调用该方法来劫持数据</span></div><div class="line">  walk (obj: <span class="built_in">Object</span>) &#123;</div><div class="line">    <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(obj)</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</div><div class="line">      defineReactive(obj, keys[i])</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 为数组创建Observer监听器</span></div><div class="line">  observeArray (items: <span class="built_in">Array</span>&lt;any&gt;) &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = items.length; i &lt; l; i++) &#123;</div><div class="line">      observe(items[i])</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="defineReactive"><a href="#defineReactive" class="headerlink" title="defineReactive"></a>defineReactive</h3><p>下面代码是双向数据绑定额核心</p>
<p><a href="https://github.com/wclimb/vue/blob/dev/src/core/observer/index.js#L135" target="_blank" rel="external">https://github.com/wclimb/vue/blob/dev/src/core/observer/index.js#L135</a><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span> (<span class="params"></span></span></div><div class="line">  obj: Object,</div><div class="line">  key: string,</div><div class="line">  val: any,</div><div class="line">  customSetter?: ?Function,</div><div class="line">  shallow?: boolean</div><div class="line">) &#123;</div><div class="line">  <span class="comment">// 创建dep，主要做依赖收集</span></div><div class="line">  <span class="keyword">const</span> dep = <span class="keyword">new</span> Dep()</div><div class="line"></div><div class="line">  <span class="keyword">const</span> property = <span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, key)</div><div class="line">  <span class="comment">// 判断当前对象是否可定义，不能的话后面执行也没有意义了，所以直接return</span></div><div class="line">  <span class="keyword">if</span> (property &amp;&amp; property.configurable === <span class="literal">false</span>) &#123;</div><div class="line">    <span class="keyword">return</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 是否有自定义get set</span></div><div class="line">  <span class="keyword">const</span> getter = property &amp;&amp; property.get</div><div class="line">  <span class="keyword">const</span> setter = property &amp;&amp; property.set</div><div class="line">  <span class="comment">// 取当前的值</span></div><div class="line">  <span class="keyword">if</span> ((!getter || setter) &amp;&amp; <span class="built_in">arguments</span>.length === <span class="number">2</span>) &#123;</div><div class="line">    val = obj[key]</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// shallow为undfined，因为上一步没有传，只有定义$attrs和$listeners使用true</span></div><div class="line">  <span class="comment">// 继续调用observe(val)劫持</span></div><div class="line">  <span class="keyword">let</span> childOb = !shallow &amp;&amp; observe(val)</div><div class="line">  <span class="comment">// 重头戏，调用Object.defineProperty</span></div><div class="line">  <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</div><div class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</div><div class="line">    <span class="attr">get</span>: <span class="function"><span class="keyword">function</span> <span class="title">reactiveGetter</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">const</span> value = getter ? getter.call(obj) : val</div><div class="line">      <span class="comment">// 此时的Dep.target是一个Watcher类，Dep.target全局只有一个</span></div><div class="line">      <span class="keyword">if</span> (Dep.target) &#123;</div><div class="line">        <span class="comment">// 订阅</span></div><div class="line">        dep.depend()</div><div class="line">        <span class="comment">// 如果数据是对象，继续</span></div><div class="line">        <span class="keyword">if</span> (childOb) &#123;</div><div class="line">          childOb.dep.depend()</div><div class="line">          <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(value)) &#123;</div><div class="line">            dependArray(value)</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> value</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">set</span>: <span class="function"><span class="keyword">function</span> <span class="title">reactiveSetter</span> (<span class="params">newVal</span>) </span>&#123;</div><div class="line">      <span class="keyword">const</span> value = getter ? getter.call(obj) : val</div><div class="line">      <span class="keyword">if</span> (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) &#123;</div><div class="line">        <span class="keyword">return</span></div><div class="line">      &#125;</div><div class="line"></div><div class="line">      ...... </div><div class="line"></div><div class="line">      if (setter) &#123;</div><div class="line">        setter.call(obj, newVal)</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 把值更新为最新的</span></div><div class="line">        val = newVal</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// 把新值变成响应式的对象</span></div><div class="line">      childOb = !shallow &amp;&amp; observe(newVal)</div><div class="line">      <span class="comment">// 数据发生变化之后通知</span></div><div class="line">      dep.notify()</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Dep-订阅器"><a href="#Dep-订阅器" class="headerlink" title="Dep-订阅器"></a>Dep-订阅器</h2><p><code>Dep</code> 在 <code>Vue</code> 里面也是关键的一环，它负责依赖收集，从上面 <code>defineReactive</code> 内部方法有看到实例化了一个 <code>dep</code>，然后有使用到<code>Dep.target</code>、<code>dep.depend()</code>、<code>dep.notify()</code>，那么我们来看看 <code>Dep</code> 的实现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> uid = <span class="number">0</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * A dep is an observable that can have multiple</div><div class="line"> * directives subscribing to it.</div><div class="line"> */</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</div><div class="line">  <span class="keyword">static</span> target: ?Watcher;</div><div class="line">  id: number;</div><div class="line">  subs: <span class="built_in">Array</span>&lt;Watcher&gt;;</div><div class="line"></div><div class="line">  <span class="keyword">constructor</span> () &#123;</div><div class="line">    <span class="keyword">this</span>.id = uid++</div><div class="line">    <span class="keyword">this</span>.subs = []</div><div class="line">  &#125;</div><div class="line">  addSub (sub: Watcher) &#123;</div><div class="line">    <span class="keyword">this</span>.subs.push(sub)</div><div class="line">  &#125;</div><div class="line">  removeSub (sub: Watcher) &#123;</div><div class="line">    remove(<span class="keyword">this</span>.subs, sub)</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 收集依赖</span></div><div class="line">  depend () &#123;</div><div class="line">    <span class="keyword">if</span> (Dep.target) &#123;</div><div class="line">      <span class="comment">// Dep.target是一个Watcher类，所以Dep.target.addDep调用的是Watcher类里面的方法</span></div><div class="line">      Dep.target.addDep(<span class="keyword">this</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  notify () &#123;</div><div class="line">    <span class="comment">// stabilize the subscriber list first</span></div><div class="line">    <span class="keyword">const</span> subs = <span class="keyword">this</span>.subs.slice()</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = subs.length; i &lt; l; i++) &#123;</div><div class="line">      subs[i].update()</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// the current target watcher being evaluated.</span></div><div class="line"><span class="comment">// this is globally unique because there could be only one</span></div><div class="line"><span class="comment">// watcher being evaluated at any time.</span></div><div class="line">Dep.target = <span class="literal">null</span></div><div class="line"><span class="keyword">const</span> targetStack = []</div><div class="line"></div><div class="line"><span class="comment">// 该方法会用在Watcher内部</span></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">pushTarget</span> (<span class="params">_target: Watcher</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (Dep.target) targetStack.push(Dep.target)</div><div class="line">  Dep.target = _target</div><div class="line">&#125;</div><div class="line"><span class="comment">// 和上面方法一样，调用完pushTarget之后接着会调用popTarget，删除当前目标watcher</span></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">popTarget</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  Dep.target = targetStack.pop()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为什么 <code>Dep.target</code> 会有值呢？因为实例化一个 <code>Watcher</code> 会调用 <code>pushTarget</code>，但是什么时候会实例化 <code>Watcher</code> 呢？1. 初始化 <code>initComputed</code>  2. 绑定 <code>$watch</code> 3. <code>mountComponent</code>。<br>实际上是来自 <code>mountComponent</code> 内部的实例化 <code>Watcher</code>，我们看看代码</p>
<p><a href="https://github.com/wclimb/vue/blob/dev/src/core/instance/lifecycle.js#L141" target="_blank" rel="external">https://github.com/wclimb/vue/blob/dev/src/core/instance/lifecycle.js#L141</a></p>
<h2 id="mountComponent"><a href="#mountComponent" class="headerlink" title="mountComponent"></a>mountComponent</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">mountComponent</span> (<span class="params"></span></span></div><div class="line">  vm: Component,</div><div class="line">  el: ?Element,</div><div class="line">  hydrating?: boolean</div><div class="line">): <span class="title">Component</span> &#123;</div><div class="line">  vm.$el = el</div><div class="line">  <span class="keyword">if</span> (!vm.$options.render) &#123;</div><div class="line">    .....</div><div class="line">  &#125;</div><div class="line">  callHook(vm, <span class="string">'beforeMount'</span>)</div><div class="line"></div><div class="line">  <span class="keyword">let</span> updateComponent</div><div class="line">  <span class="comment">/* istanbul ignore if */</span></div><div class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; config.performance &amp;&amp; mark) &#123;</div><div class="line">    updateComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">     ......</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    updateComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      vm._update(vm._render(), hydrating)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// we set this to vm._watcher inside the watcher's constructor</span></div><div class="line">  <span class="comment">// since the watcher's initial patch may call $forceUpdate (e.g. inside child</span></div><div class="line">  <span class="comment">// component's mounted hook), which relies on vm._watcher being already defined</span></div><div class="line">  <span class="keyword">new</span> Watcher(vm, updateComponent, noop, &#123;</div><div class="line">    before () &#123;</div><div class="line">      <span class="keyword">if</span> (vm._isMounted &amp;&amp; !vm._isDestroyed) &#123;</div><div class="line">        callHook(vm, <span class="string">'beforeUpdate'</span>)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;, <span class="literal">true</span> <span class="comment">/* isRenderWatcher */</span>)</div><div class="line">  hydrating = <span class="literal">false</span></div><div class="line"></div><div class="line">  <span class="comment">// manually mounted instance, call mounted on self</span></div><div class="line">  <span class="comment">// mounted is called for render-created child components in its inserted hook</span></div><div class="line">  <span class="keyword">if</span> (vm.$vnode == <span class="literal">null</span>) &#123;</div><div class="line">    vm._isMounted = <span class="literal">true</span></div><div class="line">    callHook(vm, <span class="string">'mounted'</span>)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> vm</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面代码很重要，主要是视图的初始化过程，我们还可以看到两个生命周期，<code>beforeMount</code>和<code>mounted</code>，实例化<code>Watcher</code>，传递了几个主要参数，分别是<code>vm</code>、<code>updateComponent</code>、和一个 <code>before</code> 方法，<code>vm</code> 就是当前 <code>Vue</code> 的<code>this</code>了，重点在 <code>updateComponent</code> 方法，内部是 <code>vm._update(vm._render(), hydrating)</code> ，既然是初始化渲染视图，那么它也没有调用呀，我们先说 <code>vm._render()</code>，它的作用是生成当前 <code>vnode</code>，也就是虚拟 <code>dom</code>，通过 <code>vm.__update</code> 来更新视图，这里其实就牵扯到了新旧虚拟 <code>dom</code> 的比较，也就是 <code>diff</code> 算法，我们知道现在是初始化，也就是说只有一个 <code>vnode</code>，直接渲染就可以了，关键是在这里它没有执行，所以接下来我们需要看看 <code>Watcher</code> 做了什么</p>
<h2 id="Wachter-订阅者"><a href="#Wachter-订阅者" class="headerlink" title="Wachter-订阅者"></a>Wachter-订阅者</h2><p><a href="https://github.com/wclimb/vue/blob/dev/src/core/observer/watcher.js#L26" target="_blank" rel="external">https://github.com/wclimb/vue/blob/dev/src/core/observer/watcher.js#L26</a><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">constructor</span> (</div><div class="line">    vm: Component,</div><div class="line">    expOrFn: string | Function,</div><div class="line">    cb: Function,</div><div class="line">    options?: ?Object,</div><div class="line">    isRenderWatcher?: boolean</div><div class="line">  ) &#123;</div><div class="line">    <span class="keyword">this</span>.vm = vm</div><div class="line">    <span class="keyword">if</span> (isRenderWatcher) &#123;</div><div class="line">      vm._watcher = <span class="keyword">this</span></div><div class="line">    &#125;</div><div class="line">    vm._watchers.push(<span class="keyword">this</span>)</div><div class="line">    <span class="comment">// options</span></div><div class="line">    <span class="keyword">if</span> (options) &#123;</div><div class="line">      <span class="keyword">this</span>.deep = !!options.deep</div><div class="line">      <span class="keyword">this</span>.user = !!options.user</div><div class="line">      <span class="keyword">this</span>.lazy = !!options.lazy</div><div class="line">      <span class="keyword">this</span>.sync = !!options.sync</div><div class="line">      <span class="keyword">this</span>.before = options.before</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">this</span>.deep = <span class="keyword">this</span>.user = <span class="keyword">this</span>.lazy = <span class="keyword">this</span>.sync = <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.cb = cb</div><div class="line">    <span class="keyword">this</span>.id = ++uid <span class="comment">// uid for batching</span></div><div class="line">    <span class="keyword">this</span>.active = <span class="literal">true</span></div><div class="line">    <span class="keyword">this</span>.dirty = <span class="keyword">this</span>.lazy <span class="comment">// for lazy watchers</span></div><div class="line">    <span class="keyword">this</span>.deps = []</div><div class="line">    <span class="keyword">this</span>.newDeps = []</div><div class="line">    <span class="keyword">this</span>.depIds = <span class="keyword">new</span> <span class="built_in">Set</span>()</div><div class="line">    <span class="keyword">this</span>.newDepIds = <span class="keyword">new</span> <span class="built_in">Set</span>()</div><div class="line">    <span class="keyword">this</span>.expression = process.env.NODE_ENV !== <span class="string">'production'</span></div><div class="line">      ? expOrFn.toString()</div><div class="line">      : <span class="string">''</span></div><div class="line">    <span class="comment">// parse expression for getter</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> expOrFn === <span class="string">'function'</span>) &#123;</div><div class="line">      <span class="keyword">this</span>.getter = expOrFn</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">this</span>.getter = parsePath(expOrFn)</div><div class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.getter) &#123;</div><div class="line">        <span class="keyword">this</span>.getter = noop</div><div class="line">        ...</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.value = <span class="keyword">this</span>.lazy</div><div class="line">      ? <span class="literal">undefined</span></div><div class="line">      : <span class="keyword">this</span>.get()</div><div class="line">  &#125;</div><div class="line">  get () &#123;</div><div class="line">    pushTarget(<span class="keyword">this</span>)</div><div class="line">    <span class="keyword">let</span> value</div><div class="line">    <span class="keyword">const</span> vm = <span class="keyword">this</span>.vm</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      value = <span class="keyword">this</span>.getter.call(vm, vm)</div><div class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">      .....</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">      <span class="comment">// "touch" every property so they are all tracked as</span></div><div class="line">      <span class="comment">// dependencies for deep watching</span></div><div class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.deep) &#123;</div><div class="line">        traverse(value)</div><div class="line">      &#125;</div><div class="line">      popTarget()</div><div class="line">      <span class="keyword">this</span>.cleanupDeps()</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> value</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  addDep (dep: Dep) &#123;</div><div class="line">    <span class="keyword">const</span> id = dep.id</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.newDepIds.has(id)) &#123;</div><div class="line">      <span class="keyword">this</span>.newDepIds.add(id)</div><div class="line">      <span class="keyword">this</span>.newDeps.push(dep)</div><div class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.depIds.has(id)) &#123;</div><div class="line">        dep.addSub(<span class="keyword">this</span>)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  ....</div></pre></td></tr></table></figure></p>
<p>我们上一步实例化了 <code>Wathcer</code>，传入了一些参数，<code>Watcher</code> 内部构造函数最后执行了 <code>this.get()</code>，也就是内部 <code>get</code> 方法，重点来了<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">get () &#123;</div><div class="line">    pushTarget(<span class="keyword">this</span>)</div><div class="line">    <span class="keyword">let</span> value</div><div class="line">    <span class="keyword">const</span> vm = <span class="keyword">this</span>.vm</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      value = <span class="keyword">this</span>.getter.call(vm, vm)</div><div class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">      .....</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">      <span class="comment">// "touch" every property so they are all tracked as</span></div><div class="line">      <span class="comment">// dependencies for deep watching</span></div><div class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.deep) &#123;</div><div class="line">        traverse(value)</div><div class="line">      &#125;</div><div class="line">      popTarget()</div><div class="line">      <span class="keyword">this</span>.cleanupDeps()</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> value</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>首先它会调用之前的方法 <code>pushTarget</code> 来赋值 <code>Dep.target</code>，所以我们会知道 <code>Dep.target</code> 一定是一个<code>Watcher</code>，紧接着调用了<code>this.getter</code>，<code>getter</code>是什么？<code>getter</code>实际就是传进来的第二个参数<code>expOrFn</code>，是一个方法。之前我们说的 <code>mountComponent</code> 方法内部传入的 <code>updateComponent</code> 方法，会在这里被调用，达到初始化视图的作用。<br>继续往下看，我们可以看到 <code>addDep</code> 方法，是不是很眼熟，之前我们说了 <code>Vue</code> 劫持数据，在 <code>get</code> 内会收集依赖，调用 <code>dep.depend()</code> 方法，然后 <code>depend</code> 方法执行了 <code>Dep.target.addDep(this)</code>，接着会调用这里我们说的 <code>addDep</code> 方法，传入的 <code>this</code> 就是 <code>Dep</code><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">addDep (dep: Dep) &#123;</div><div class="line">  <span class="keyword">const</span> id = dep.id</div><div class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.newDepIds.has(id)) &#123;</div><div class="line">    <span class="keyword">this</span>.newDepIds.add(id)</div><div class="line">    <span class="keyword">this</span>.newDeps.push(dep)</div><div class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.depIds.has(id)) &#123;</div><div class="line">      dep.addSub(<span class="keyword">this</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先判断是否已经存在 <code>dep</code>，没有就往调用 <code>dep</code> 的方法 <code>addSub</code> 追加当前的 <code>Watcher</code>，调用 <code>addSub</code> 会存在 <code>dep</code> 内的 <code>subs</code>，<code>subs</code>是一个数组，整个流程是不是很绕，我们可以画个图来看看</p>
<h2 id="派发更新"><a href="#派发更新" class="headerlink" title="派发更新"></a>派发更新</h2><p>我们收集了依赖有什么用呢？我们修改值之后需要更新视图和数据，这个动作我们是可以预知的，因为会触发之前的<code>setter</code>，<code>setter</code>内部调用了 <code>dep.notify()</code>，这个时候就可以通知所有订阅者更新视图<br>setter<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">set: <span class="function"><span class="keyword">function</span> <span class="title">reactiveSetter</span> (<span class="params">newVal</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> value = getter ? getter.call(obj) : val;</div><div class="line">  <span class="comment">/* eslint-disable no-self-compare */</span></div><div class="line">  <span class="keyword">if</span> (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) &#123;</div><div class="line">    <span class="keyword">return</span></div><div class="line">  &#125;</div><div class="line">  <span class="comment">/* eslint-enable no-self-compare */</span></div><div class="line">  <span class="keyword">if</span> (customSetter) &#123;</div><div class="line">    customSetter();</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// #7981: for accessor properties without setter</span></div><div class="line">  <span class="keyword">if</span> (getter &amp;&amp; !setter) &#123; <span class="keyword">return</span> &#125;</div><div class="line">  <span class="keyword">if</span> (setter) &#123;</div><div class="line">    setter.call(obj, newVal);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    val = newVal;</div><div class="line">  &#125;</div><div class="line">  childOb = !shallow &amp;&amp; observe(newVal);</div><div class="line">  dep.notify();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>dep.notify()</code>会调用 <code>dep</code> 的 <code>notify</code> 方法，我们知道 <code>subs</code> 内部都是 <code>Watcher</code> 类的数组，需要更新全部就得其遍历他们，执行 <code>Watcher</code> 内部的 <code>update</code> 方法<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">constructor</span> () &#123;</div><div class="line">    <span class="keyword">this</span>.id = uid++</div><div class="line">    <span class="keyword">this</span>.subs = []</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  ....</div><div class="line"></div><div class="line">  notify () &#123;</div><div class="line">    <span class="comment">// stabilize the subscriber list first</span></div><div class="line">    <span class="keyword">const</span> subs = <span class="keyword">this</span>.subs.slice()</div><div class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; !config.async) &#123;</div><div class="line">      <span class="comment">// subs aren't sorted in scheduler if not running async</span></div><div class="line">      <span class="comment">// we need to sort them now to make sure they fire in correct</span></div><div class="line">      <span class="comment">// order</span></div><div class="line">      subs.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.id - b.id)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = subs.length; i &lt; l; i++) &#123;</div><div class="line">      subs[i].update()</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p><a href="https://github.com/wclimb/vue/blob/dev/src/core/observer/watcher.js#L164" target="_blank" rel="external">https://github.com/wclimb/vue/blob/dev/src/core/observer/watcher.js#L164</a><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">update () &#123;</div><div class="line">  <span class="comment">/* istanbul ignore else */</span></div><div class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.lazy) &#123;</div><div class="line">    <span class="keyword">this</span>.dirty = <span class="literal">true</span></div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.sync) &#123;</div><div class="line">    <span class="keyword">this</span>.run()</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    queueWatcher(<span class="keyword">this</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>实际上大部分情况都会直接执行 <code>queueWatcher</code> 方法</p>
<p><a href="https://github.com/wclimb/vue/blob/dev/src/core/observer/scheduler.js#L164" target="_blank" rel="external">https://github.com/wclimb/vue/blob/dev/src/core/observer/scheduler.js#L164</a></p>
<p><code>queueWatcher</code><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">queueWatcher</span> (<span class="params">watcher: Watcher</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> id = watcher.id</div><div class="line">  <span class="keyword">if</span> (has[id] == <span class="literal">null</span>) &#123;</div><div class="line">    has[id] = <span class="literal">true</span></div><div class="line">    <span class="keyword">if</span> (!flushing) &#123;</div><div class="line">      queue.push(watcher)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">// 如果已经刷新，则根据其ID拼接订阅者</span></div><div class="line">      <span class="comment">// 如果已经超过其ID，它将立即运行</span></div><div class="line">      <span class="keyword">let</span> i = queue.length - <span class="number">1</span></div><div class="line">      <span class="keyword">while</span> (i &gt; index &amp;&amp; queue[i].id &gt; watcher.id) &#123;</div><div class="line">        i--</div><div class="line">      &#125;</div><div class="line">      queue.splice(i + <span class="number">1</span>, <span class="number">0</span>, watcher)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// queue the flush</span></div><div class="line">    <span class="keyword">if</span> (!waiting) &#123;</div><div class="line">      waiting = <span class="literal">true</span></div><div class="line">      <span class="comment">// 开发环境并且不是异步的就直接执行</span></div><div class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; !config.async) &#123;</div><div class="line">        flushSchedulerQueue()</div><div class="line">        <span class="keyword">return</span></div><div class="line">      &#125;</div><div class="line">      <span class="comment">// 这里其实就是执行了个异步操作，可以了解一些nextTick的实现</span></div><div class="line">      <span class="comment">// https://github.com/wclimb/vue/blob/dev/src/core/util/env.js#L51</span></div><div class="line">      nextTick(flushSchedulerQueue)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/wclimb/vue/blob/dev/src/core/observer/scheduler.js#L71" target="_blank" rel="external">https://github.com/wclimb/vue/blob/dev/src/core/observer/scheduler.js#L71</a></p>
<p><code>flushSchedulerQueue</code><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">flushSchedulerQueue</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  currentFlushTimestamp = getNow()</div><div class="line">  flushing = <span class="literal">true</span></div><div class="line">  <span class="keyword">let</span> watcher, id</div><div class="line"></div><div class="line">  <span class="comment">//在刷新之前对队列进行排序。</span></div><div class="line">  <span class="comment">//这样可以确保：</span></div><div class="line">  <span class="comment">//1.组件从父级更新为子级。 （因为父母总是在子级之前创建）</span></div><div class="line">  <span class="comment">//2.组件的用户监视程序先于其呈现监视程序运行（因为用户订阅者先于渲染订阅者创建）</span></div><div class="line">  <span class="comment">//3.如果在父组件的订阅者运行期间破坏了某个组件，可以跳过其订阅者</span></div><div class="line">  queue.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.id - b.id)</div><div class="line"></div><div class="line">  <span class="comment">// do not cache length because more watchers might be pushed</span></div><div class="line">  <span class="comment">// as we run existing watchers</span></div><div class="line">  <span class="keyword">for</span> (index = <span class="number">0</span>; index &lt; queue.length; index++) &#123;</div><div class="line">    watcher = queue[index]</div><div class="line">    <span class="comment">// 调用之前执行一下before，目的是可以触发beforeUpdate生命周期</span></div><div class="line">    <span class="keyword">if</span> (watcher.before) &#123;</div><div class="line">      watcher.before()</div><div class="line">    &#125;</div><div class="line">    id = watcher.id</div><div class="line">    has[id] = <span class="literal">null</span></div><div class="line">    watcher.run()</div><div class="line">    <span class="comment">// in dev build, check and stop circular updates.</span></div><div class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; has[id] != <span class="literal">null</span>) &#123;</div><div class="line">      circular[id] = (circular[id] || <span class="number">0</span>) + <span class="number">1</span></div><div class="line">      <span class="comment">// 判断是否死循环了</span></div><div class="line">      <span class="keyword">if</span> (circular[id] &gt; MAX_UPDATE_COUNT) &#123;</div><div class="line">        ....</div><div class="line">        break</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  ....</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面代码主要是对 <code>queue</code> 内的数据根据 <code>watcher</code> 的 <code>id</code> 来排序，确保数据是从父级更新到子级，因为是有先后顺序的，先有父后有子。接着就是批量去更新他们，可以看到先执行了<code>before</code>方法，然后调用了 <code>watcher</code> 的 <code>run</code> 方法，我们来看看 <code>run</code> 方法的代码<br><code>run</code><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">run () &#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.active) &#123;</div><div class="line">    <span class="keyword">const</span> value = <span class="keyword">this</span>.get()</div><div class="line">    <span class="keyword">if</span> (</div><div class="line">      value !== <span class="keyword">this</span>.value ||</div><div class="line">      <span class="comment">// Deep watchers and watchers on Object/Arrays should fire even</span></div><div class="line">      <span class="comment">// when the value is the same, because the value may</span></div><div class="line">      <span class="comment">// have mutated.</span></div><div class="line">      isObject(value) ||</div><div class="line">      <span class="keyword">this</span>.deep</div><div class="line">    ) &#123;</div><div class="line">      <span class="comment">// set new value</span></div><div class="line">      <span class="keyword">const</span> oldValue = <span class="keyword">this</span>.value</div><div class="line">      <span class="keyword">this</span>.value = value</div><div class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.user) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">          <span class="keyword">this</span>.cb.call(<span class="keyword">this</span>.vm, value, oldValue)</div><div class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">          handleError(e, <span class="keyword">this</span>.vm, <span class="string">`callback for watcher "<span class="subst">$&#123;<span class="keyword">this</span>.expression&#125;</span>"`</span>)</div><div class="line">        &#125;</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">this</span>.cb.call(<span class="keyword">this</span>.vm, value, oldValue)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们主要关注<code>const value = this.get()</code>这段代码，其实<code>this.get</code>我们之前就说过了，初始化的时候它就会调用，实际上执行的是以下代码<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">updateComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  vm._update(vm._render(), hydrating)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>自此整个流程已经讲完，以上流程可以通过下面一张图来表达<br><img src="/img/vue-data-bind-process.png" alt=""></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此双向数据绑定的全部流程已经全部讲完，你会发现主要是通过<code>Observer</code>、<code>Dep</code>、<code>Watcher</code>来串起来整个流程，其中当然还有很多可以单独提取出来讲的，本文还会继续完善补充</p>
<p>本文地址 <a href="http://www.wclimb.site/2020/03/15/vue-source-code-data-bind/">Vue源码之双向数据绑定</a></p>
]]></content>
      <categories>
        <category>javascript</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>原创</tag>
        <tag>javascript</tag>
        <tag>vue</tag>
        <tag>源码</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue源码之虚拟DOM</title>
    <url>/2020/03/17/vue-source-code-virtual-dom/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="http://www.wclimb.site/2020/03/15/vue-source-code-data-bind/">上一篇</a>我们讲了一下 <code>Vue</code> 的双向数据绑定原理，今天我们开始讲一下 <code>Vue</code> 的 <code>虚拟DOM</code>。<br>本文会先分析一下 <code>Vue</code> 的 <code>虚拟DOM</code>，然后下一篇文章会带大家撸一个简易的 <code>虚拟DOM</code></p>
<h2 id="Vue虚拟DOM"><a href="#Vue虚拟DOM" class="headerlink" title="Vue虚拟DOM"></a>Vue虚拟DOM</h2><h3 id="创建虚拟DOM"><a href="#创建虚拟DOM" class="headerlink" title="创建虚拟DOM"></a>创建虚拟DOM</h3><p><a href="https://github.com/wclimb/vue/blob/dev/src/core/vdom/vnode.js" target="_blank" rel="external">https://github.com/wclimb/vue/blob/dev/src/core/vdom/vnode.js</a><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">VNode</span> </span>&#123;</div><div class="line">  tag: string | <span class="keyword">void</span>;</div><div class="line">  data: VNodeData | <span class="keyword">void</span>;</div><div class="line">  children: ?<span class="built_in">Array</span>&lt;VNode&gt;;</div><div class="line">  text: string | <span class="keyword">void</span>;</div><div class="line">  elm: Node | <span class="keyword">void</span>;</div><div class="line">  ns: string | <span class="keyword">void</span>;</div><div class="line">  context: Component | <span class="keyword">void</span>; <span class="comment">// rendered in this component's scope</span></div><div class="line">  functionalContext: Component | <span class="keyword">void</span>; <span class="comment">// only for functional component root nodes</span></div><div class="line">  key: string | number | <span class="keyword">void</span>;</div><div class="line">  componentOptions: VNodeComponentOptions | <span class="keyword">void</span>;</div><div class="line">  componentInstance: Component | <span class="keyword">void</span>; <span class="comment">// component instance</span></div><div class="line">  parent: VNode | <span class="keyword">void</span>; <span class="comment">// component placeholder node</span></div><div class="line">  raw: boolean; <span class="comment">// contains raw HTML? (server only)</span></div><div class="line">  isStatic: boolean; <span class="comment">// hoisted static node</span></div><div class="line">  isRootInsert: boolean; <span class="comment">// necessary for enter transition check</span></div><div class="line">  isComment: boolean; <span class="comment">// empty comment placeholder?</span></div><div class="line">  isCloned: boolean; <span class="comment">// is a cloned node?</span></div><div class="line">  isOnce: boolean; <span class="comment">// is a v-once node?</span></div><div class="line"></div><div class="line">  <span class="keyword">constructor</span> (</div><div class="line">    tag?: string,</div><div class="line">    data?: VNodeData,</div><div class="line">    children?: ?Array&lt;VNode&gt;,</div><div class="line">    text?: string,</div><div class="line">    elm?: Node,</div><div class="line">    context?: Component,</div><div class="line">    componentOptions?: VNodeComponentOptions</div><div class="line">  ) &#123;</div><div class="line">    <span class="keyword">this</span>.tag = tag</div><div class="line">    <span class="keyword">this</span>.data = data</div><div class="line">    <span class="keyword">this</span>.children = children</div><div class="line">    <span class="keyword">this</span>.text = text</div><div class="line">    <span class="keyword">this</span>.elm = elm</div><div class="line">    <span class="keyword">this</span>.ns = <span class="literal">undefined</span></div><div class="line">    <span class="keyword">this</span>.context = context</div><div class="line">    <span class="keyword">this</span>.functionalContext = <span class="literal">undefined</span></div><div class="line">    <span class="keyword">this</span>.key = data &amp;&amp; data.key</div><div class="line">    <span class="keyword">this</span>.componentOptions = componentOptions</div><div class="line">    <span class="keyword">this</span>.componentInstance = <span class="literal">undefined</span></div><div class="line">    <span class="keyword">this</span>.parent = <span class="literal">undefined</span></div><div class="line">    <span class="keyword">this</span>.raw = <span class="literal">false</span></div><div class="line">    <span class="keyword">this</span>.isStatic = <span class="literal">false</span></div><div class="line">    <span class="keyword">this</span>.isRootInsert = <span class="literal">true</span></div><div class="line">    <span class="keyword">this</span>.isComment = <span class="literal">false</span></div><div class="line">    <span class="keyword">this</span>.isCloned = <span class="literal">false</span></div><div class="line">    <span class="keyword">this</span>.isOnce = <span class="literal">false</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// DEPRECATED: alias for componentInstance for backwards compat.</span></div><div class="line">  <span class="comment">/* istanbul ignore next */</span></div><div class="line">  get child (): Component | <span class="keyword">void</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.componentInstance</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>以上代码是<code>Vue</code>创建 <code>虚拟DOM</code> 的类，一眼看过去是不是感觉东西太多了？其实我们主要关注主要的几个参数就可以了，<code>tag</code> 、<code>data</code>、<code>children</code>、<code>text</code>、<code>elm</code>、<code>key</code></p>
<ul>
<li><code>tag</code> 表示当前 <code>vnode</code> 的标签类型，比如 <code>div</code> <code>ul</code> </li>
<li><code>data</code> 表示当前 <code>vnode</code> 标签上的 <code>attribute</code>，可能是<code>class</code>、<code>id</code>、<code>key</code></li>
<li><code>children</code> 表示当前 <code>vnode</code> 的子节点</li>
<li><code>text</code> 表示文本内容</li>
<li><code>elm</code> 表示当前 <code>vnode</code> 的真实 <code>DOM</code> 节点</li>
<li><code>key</code> <code>diff算法</code> 需要用到，就是我们开发中写的 <code>:key</code></li>
</ul>
<a id="more"></a>
<h3 id="从入口开始"><a href="#从入口开始" class="headerlink" title="从入口开始"></a>从入口开始</h3><p>我们从入口开始，看一下 <code>Vue</code> 实现 <code>虚拟DOM</code> 的流程是怎么样的，<br><a href="https://github.com/wclimb/vue/blob/dev/src/core/instance/init.js#L15" target="_blank" rel="external">https://github.com/wclimb/vue/blob/dev/src/core/instance/init.js#L15</a><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initMixin</span> (<span class="params">Vue: Class&lt;Component&gt;</span>) </span>&#123;</div><div class="line">  Vue.prototype._init = <span class="function"><span class="keyword">function</span> (<span class="params">options?: Object</span>) </span>&#123;</div><div class="line">    ......</div><div class="line"></div><div class="line">    <span class="comment">// expose real self</span></div><div class="line">    vm._self = vm</div><div class="line">    initLifecycle(vm)</div><div class="line">    initEvents(vm)</div><div class="line">    initRender(vm)</div><div class="line">    callHook(vm, <span class="string">'beforeCreate'</span>)</div><div class="line">    initInjections(vm) <span class="comment">// resolve injections before data/props</span></div><div class="line">    initState(vm)</div><div class="line">    initProvide(vm) <span class="comment">// resolve provide after data/props</span></div><div class="line">    callHook(vm, <span class="string">'created'</span>)</div><div class="line"></div><div class="line">    ......</div><div class="line"></div><div class="line">    if (vm.$options.el) &#123;</div><div class="line">      vm.$mount(vm.$options.el)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面这段代码在<a href="http://www.wclimb.site/2020/03/15/vue-source-code-data-bind/">上一篇</a>文章有讲过，我们在这里只需要关心 <code>vm.$mount(vm.$options.el)</code> 这段代码，从这里开始挂载<code>DOM</code></p>
<h3 id="mount"><a href="#mount" class="headerlink" title="$mount"></a>$mount</h3><p><a href="https://github.com/wclimb/vue/blob/dev/src/platforms/web/entry-runtime-with-compiler.js#L17" target="_blank" rel="external">https://github.com/wclimb/vue/blob/dev/src/platforms/web/entry-runtime-with-compiler.js#L17</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> mount = Vue.prototype.$mount;</div><div class="line">Vue.prototype.$mount = <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></div><div class="line">  el,</div><div class="line">  hydrating</div><div class="line">) &#123;</div><div class="line">  el = el &amp;&amp; query(el);</div><div class="line"></div><div class="line">  <span class="comment">/* istanbul ignore if */</span></div><div class="line">  <span class="keyword">if</span> (el === <span class="built_in">document</span>.body || el === <span class="built_in">document</span>.documentElement) &#123;</div><div class="line">    warn(</div><div class="line">      <span class="string">"Do not mount Vue to &lt;html&gt; or &lt;body&gt; - mount to normal elements instead."</span></div><div class="line">    );</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> options = <span class="keyword">this</span>.$options;</div><div class="line">  <span class="comment">// resolve template/el and convert to render function</span></div><div class="line">  <span class="keyword">if</span> (!options.render) &#123;</div><div class="line">      ...</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (el) &#123;</div><div class="line">      template = getOuterHTML(el);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (template) &#123;</div><div class="line">      <span class="keyword">var</span> ref = compileToFunctions(template, &#123;</div><div class="line">        <span class="attr">outputSourceRange</span>: <span class="string">"development"</span> !== <span class="string">'production'</span>,</div><div class="line">        <span class="attr">shouldDecodeNewlines</span>: shouldDecodeNewlines,</div><div class="line">        <span class="attr">shouldDecodeNewlinesForHref</span>: shouldDecodeNewlinesForHref,</div><div class="line">        <span class="attr">delimiters</span>: options.delimiters,</div><div class="line">        <span class="attr">comments</span>: options.comments</div><div class="line">      &#125;, <span class="keyword">this</span>);</div><div class="line">      <span class="keyword">var</span> render = ref.render;</div><div class="line">      <span class="keyword">var</span> staticRenderFns = ref.staticRenderFns;</div><div class="line">      options.render = render;</div><div class="line">      options.staticRenderFns = staticRenderFns;</div><div class="line"></div><div class="line">      <span class="comment">/* istanbul ignore if */</span></div><div class="line">      <span class="keyword">if</span> (config.performance &amp;&amp; mark) &#123;</div><div class="line">        mark(<span class="string">'compile end'</span>);</div><div class="line">        measure((<span class="string">"vue "</span> + (<span class="keyword">this</span>._name) + <span class="string">" compile"</span>), <span class="string">'compile'</span>, <span class="string">'compile end'</span>);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> mount.call(<span class="keyword">this</span>, el, hydrating)</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>我们先看上面 <code>template</code> 是什么，<code>template</code> 其实是我们写的模版的 <code>html</code> 比如 <code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code>，然后把模版给 <code>compileToFunctions</code> 方法去解析，这过程就是生成<code>ast</code> <code>html</code>树。得到 <code>ref</code> 对象，<br>内部有一个<code>render</code>方法，它的方法就是类似下面代码一样,比如 <code>_c</code> 其实就是我们后面要讲的创建生成 <code>vnode</code> 元素方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">with</span>(<span class="keyword">this</span>)&#123;<span class="keyword">return</span> _c(<span class="string">'div'</span>,&#123;<span class="attr">attrs</span>:&#123;<span class="string">"id"</span>:<span class="string">"div1"</span>&#125;&#125;,_l((arr),<span class="function"><span class="keyword">function</span>(<span class="params">item,idx</span>)</span>&#123;<span class="keyword">return</span> _c(<span class="string">'span'</span>,&#123;<span class="attr">key</span>:item&#125;,[_v(_s(item))])&#125;),<span class="number">0</span>)&#125;</div></pre></td></tr></table></figure>
<p>以下就是对应的方法 <code>_v</code>指创建文本<code>vnode</code><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">installRenderHelpers</span> (<span class="params">target</span>) </span>&#123;</div><div class="line">  target._o = markOnce;</div><div class="line">  target._n = toNumber;</div><div class="line">  target._s = toString;</div><div class="line">  target._l = renderList;</div><div class="line">  target._t = renderSlot;</div><div class="line">  target._q = looseEqual;</div><div class="line">  target._i = looseIndexOf;</div><div class="line">  target._m = renderStatic;</div><div class="line">  target._f = resolveFilter;</div><div class="line">  target._k = checkKeyCodes;</div><div class="line">  target._b = bindObjectProps;</div><div class="line">  target._v = createTextVNode;</div><div class="line">  target._e = createEmptyVNode;</div><div class="line">  target._u = resolveScopedSlots;</div><div class="line">  target._g = bindObjectListeners;</div><div class="line">  target._d = bindDynamicKeys;</div><div class="line">  target._p = prependModifier;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们接着往下看最后代码会执行 <code>return mount.call(this, el, hydrating)</code>，<code>mount</code>代码就是之前第一行代码提前获取了</p>
<p><a href="https://github.com/wclimb/vue/blob/dev/src/platforms/web/runtime/index.js#L37" target="_blank" rel="external">https://github.com/wclimb/vue/blob/dev/src/platforms/web/runtime/index.js#L37</a><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">Vue.prototype.$mount = <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></div><div class="line">  el?: string | Element,</div><div class="line">  hydrating?: boolean</div><div class="line">): <span class="title">Component</span> &#123;</div><div class="line">  el = el &amp;&amp; inBrowser ? query(el) : <span class="literal">undefined</span></div><div class="line">  <span class="keyword">return</span> mountComponent(<span class="keyword">this</span>, el, hydrating)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面代码继续调用了 <code>mountComponent</code> 方法，继续往下看</p>
<h3 id="mountComponent"><a href="#mountComponent" class="headerlink" title="mountComponent"></a>mountComponent</h3><p><a href="https://github.com/wclimb/vue/blob/dev/src/core/instance/lifecycle.js#L141" target="_blank" rel="external">https://github.com/wclimb/vue/blob/dev/src/core/instance/lifecycle.js#L141</a><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">mountComponent</span> (<span class="params"></span></span></div><div class="line">  vm: Component,</div><div class="line">  el: ?Element,</div><div class="line">  hydrating?: boolean</div><div class="line">): <span class="title">Component</span> &#123;</div><div class="line">  vm.$el = el</div><div class="line">  <span class="keyword">if</span> (!vm.$options.render) &#123;</div><div class="line">    vm.$options.render = createEmptyVNode</div><div class="line">    ....</div><div class="line">  &#125;</div><div class="line">  callHook(vm, <span class="string">'beforeMount'</span>)</div><div class="line"></div><div class="line">  <span class="keyword">let</span> updateComponent</div><div class="line">  <span class="comment">/* istanbul ignore if */</span></div><div class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; config.performance &amp;&amp; mark) &#123;</div><div class="line">    updateComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">const</span> name = vm._name</div><div class="line">      <span class="keyword">const</span> id = vm._uid</div><div class="line">      <span class="keyword">const</span> startTag = <span class="string">`vue-perf-start:<span class="subst">$&#123;id&#125;</span>`</span></div><div class="line">      <span class="keyword">const</span> endTag = <span class="string">`vue-perf-end:<span class="subst">$&#123;id&#125;</span>`</span></div><div class="line"></div><div class="line">      mark(startTag)</div><div class="line">      <span class="keyword">const</span> vnode = vm._render()</div><div class="line">      mark(endTag)</div><div class="line">      measure(<span class="string">`vue <span class="subst">$&#123;name&#125;</span> render`</span>, startTag, endTag)</div><div class="line"></div><div class="line">      mark(startTag)</div><div class="line">      vm._update(vnode, hydrating)</div><div class="line">      mark(endTag)</div><div class="line">      measure(<span class="string">`vue <span class="subst">$&#123;name&#125;</span> patch`</span>, startTag, endTag)</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    updateComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      vm._update(vm._render(), hydrating)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">new</span> Watcher(vm, updateComponent, noop, &#123;</div><div class="line">    before () &#123;</div><div class="line">      <span class="keyword">if</span> (vm._isMounted &amp;&amp; !vm._isDestroyed) &#123;</div><div class="line">        callHook(vm, <span class="string">'beforeUpdate'</span>)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;, <span class="literal">true</span> )</div><div class="line">  hydrating = <span class="literal">false</span></div><div class="line"></div><div class="line">  <span class="keyword">if</span> (vm.$vnode == <span class="literal">null</span>) &#123;</div><div class="line">    vm._isMounted = <span class="literal">true</span></div><div class="line">    callHook(vm, <span class="string">'mounted'</span>)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> vm</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这段代码是重点，看过<a href="http://www.wclimb.site/2020/03/15/vue-source-code-data-bind/">上一篇</a>文章的可能有印象，主要实例化了一个订阅者<code>Watcher</code>，内部会执行<code>updateComponent</code>方法，内容如下<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">updateComponent = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  vm._update(vm._render(), hydrating)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Vue会调用 <code>_render</code> 方法去生成<code>虚拟DOM</code>，调用<code>_update</code>去更新视图，<code>_update</code>方法后面讲<code>diff</code>算法会讲，很重要。不过这里我们先看看<code>_render</code>函数</p>
<h3 id="render"><a href="#render" class="headerlink" title="_render"></a>_render</h3><p><a href="https://github.com/wclimb/vue/blob/dev/src/core/instance/render.js#L69" target="_blank" rel="external">https://github.com/wclimb/vue/blob/dev/src/core/instance/render.js#L69</a><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">Vue.prototype._render = <span class="function"><span class="keyword">function</span> (<span class="params"></span>): <span class="title">VNode</span> </span>&#123;</div><div class="line">    <span class="keyword">const</span> vm: Component = <span class="keyword">this</span></div><div class="line">    <span class="keyword">const</span> &#123; render, _parentVnode &#125; = vm.$options</div><div class="line"></div><div class="line">    ....</div><div class="line">    </div><div class="line">    vm.$vnode = _parentVnode</div><div class="line">    <span class="comment">// render self</span></div><div class="line">    <span class="keyword">let</span> vnode</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      currentRenderingInstance = vm</div><div class="line">      vnode = render.call(vm._renderProxy, vm.$createElement)</div><div class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">      handleError(e, vm, <span class="string">`render`</span>)</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">      currentRenderingInstance = <span class="literal">null</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="comment">// set parent</span></div><div class="line">    vnode.parent = _parentVnode</div><div class="line">    <span class="keyword">return</span> vnode</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>我们主要看这一段代码 <code>vnode = render.call(vm._renderProxy, vm.$createElement)</code>，生成 <code>虚拟DOM</code>，之前会把 <code>vm.$createElement</code> 方法传入，其实就是创建 <code>vnode</code> 元素的方法，最后会执行render方法，<code>render</code> 方法就是我们之前 <code>compileToFunctions</code> 函数生成对象的方法，</p>
<h3 id="createElement"><a href="#createElement" class="headerlink" title="$createElement"></a>$createElement</h3><p><a href="https://github.com/wclimb/vue/blob/dev/src/core/instance/render.js#L34" target="_blank" rel="external">https://github.com/wclimb/vue/blob/dev/src/core/instance/render.js#L34</a><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initRender</span> (<span class="params">vm: Component</span>) </span>&#123;</div><div class="line">  ...</div><div class="line">  vm.$createElement = <span class="function">(<span class="params">a, b, c, d</span>) =&gt;</span> createElement(vm, a, b, c, d, <span class="literal">true</span>)</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>继续调用了<code>createElement</code>方法</p>
<h3 id="createElement-1"><a href="#createElement-1" class="headerlink" title="createElement"></a>createElement</h3><p><a href="https://github.com/wclimb/vue/blob/dev/src/core/vdom/create-element.js#L28" target="_blank" rel="external">https://github.com/wclimb/vue/blob/dev/src/core/vdom/create-element.js#L28</a><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createElement</span> (<span class="params"></span></span></div><div class="line">  context: Component,</div><div class="line">  tag: any,</div><div class="line">  data: any,</div><div class="line">  children: any,</div><div class="line">  normalizationType: any,</div><div class="line">  alwaysNormalize: boolean</div><div class="line">): <span class="title">VNode</span> | <span class="title">Array</span>&lt;<span class="title">VNode</span>&gt; &#123;</div><div class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(data) || isPrimitive(data)) &#123;</div><div class="line">    normalizationType = children</div><div class="line">    children = data</div><div class="line">    data = <span class="literal">undefined</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (isTrue(alwaysNormalize)) &#123;</div><div class="line">    normalizationType = ALWAYS_NORMALIZE</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> _createElement(context, tag, data, children, normalizationType)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>不用多说了？ 继续找<code>_createElement</code>，往下看下面几行代码就是了</p>
<h3 id="createElement-2"><a href="#createElement-2" class="headerlink" title="_createElement"></a>_createElement</h3><p><a href="https://github.com/wclimb/vue/blob/dev/src/core/vdom/create-element.js#L47" target="_blank" rel="external">https://github.com/wclimb/vue/blob/dev/src/core/vdom/create-element.js#L47</a><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">_createElement</span> (<span class="params"></span></span></div><div class="line">  context: Component,</div><div class="line">  tag?: string | Class&lt;Component&gt; | Function | Object,</div><div class="line">  data?: VNodeData,</div><div class="line">  children?: any,</div><div class="line">  normalizationType?: number</div><div class="line">): <span class="title">VNode</span> | <span class="title">Array</span>&lt;<span class="title">VNode</span>&gt; &#123;</div><div class="line"></div><div class="line">  ....</div><div class="line"></div><div class="line">  if (normalizationType === ALWAYS_NORMALIZE) &#123;</div><div class="line">    children = normalizeChildren(children)</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (normalizationType === SIMPLE_NORMALIZE) &#123;</div><div class="line">    children = simpleNormalizeChildren(children)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">let</span> vnode, ns</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> tag === <span class="string">'string'</span>) &#123;</div><div class="line">    <span class="keyword">let</span> Ctor</div><div class="line">    ns = (context.$vnode &amp;&amp; context.$vnode.ns) || config.getTagNamespace(tag)</div><div class="line">    <span class="keyword">if</span> (config.isReservedTag(tag)) &#123;</div><div class="line">      ...</div><div class="line">      vnode = <span class="keyword">new</span> VNode(</div><div class="line">        config.parsePlatformTagName(tag), data, children,</div><div class="line">        <span class="literal">undefined</span>, <span class="literal">undefined</span>, context</div><div class="line">      )</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((!data || !data.pre) &amp;&amp; isDef(Ctor = resolveAsset(context.$options, <span class="string">'components'</span>, tag))) &#123;</div><div class="line">      <span class="comment">// component</span></div><div class="line">      vnode = createComponent(Ctor, data, context, children, tag)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      vnode = <span class="keyword">new</span> VNode(</div><div class="line">        tag, data, children,</div><div class="line">        <span class="literal">undefined</span>, <span class="literal">undefined</span>, context</div><div class="line">      )</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    vnode = createComponent(tag, data, context, children)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(vnode)) &#123;</div><div class="line">    <span class="keyword">return</span> vnode</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(vnode)) &#123;</div><div class="line">    <span class="keyword">if</span> (isDef(ns)) applyNS(vnode, ns)</div><div class="line">    <span class="keyword">if</span> (isDef(data)) registerDeepBindings(data)</div><div class="line">    <span class="keyword">return</span> vnode</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> createEmptyVNode()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>到目前为止创建<code>虚拟DOM</code>的过程就结束了</p>
<h2 id="diff更新虚拟DOM"><a href="#diff更新虚拟DOM" class="headerlink" title="diff更新虚拟DOM"></a>diff更新虚拟DOM</h2><p>之前我们又说到用<code>_render</code>来生成<code>vnode</code>树，用<code>_update</code>来更新视图</p>
<h3 id="update"><a href="#update" class="headerlink" title="_update"></a>_update</h3><p><a href="https://github.com/wclimb/vue/blob/dev/src/core/instance/lifecycle.js#L59" target="_blank" rel="external">https://github.com/wclimb/vue/blob/dev/src/core/instance/lifecycle.js#L59</a><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">Vue.prototype._update = <span class="function"><span class="keyword">function</span> (<span class="params">vnode: VNode, hydrating?: boolean</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> vm: Component = <span class="keyword">this</span></div><div class="line">  <span class="keyword">const</span> prevEl = vm.$el</div><div class="line">  <span class="keyword">const</span> prevVnode = vm._vnode</div><div class="line">  <span class="keyword">const</span> restoreActiveInstance = setActiveInstance(vm)</div><div class="line">  vm._vnode = vnode</div><div class="line">  <span class="comment">// 如果之前不存在虚拟DOM</span></div><div class="line">  <span class="keyword">if</span> (!prevVnode) &#123;</div><div class="line">    <span class="comment">// initial render</span></div><div class="line">    vm.$el = vm.__patch__(vm.$el, vnode, hydrating, <span class="literal">false</span> <span class="comment">/* removeOnly */</span>)</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// 如果存在旧的虚拟DOM，就传递到__patch__去进行新旧的比较</span></div><div class="line">    vm.$el = vm.__patch__(prevVnode, vnode)</div><div class="line">  &#125;</div><div class="line">  .....</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面第一个参数传递的就是<code>虚拟DOM</code>，也就是本文之前说的 <code>_render()</code> 返回的 <code>vnode</code> ，我们需要继续看 <code>__patch__</code> 方法</p>
<h3 id="patch"><a href="#patch" class="headerlink" title="patch"></a><strong>patch</strong></h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">patch</span> (<span class="params">oldVnode, vnode, hydrating, removeOnly</span>) </span>&#123;</div><div class="line"></div><div class="line">  .....</div><div class="line">  </div><div class="line">  let isInitialPatch = <span class="literal">false</span></div><div class="line">  <span class="keyword">const</span> insertedVnodeQueue = []</div><div class="line">  <span class="comment">// 不存在旧的就会重新创建一个</span></div><div class="line">  <span class="keyword">if</span> (isUndef(oldVnode)) &#123;</div><div class="line">    isInitialPatch = <span class="literal">true</span></div><div class="line">    createElm(vnode, insertedVnodeQueue)</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">const</span> isRealElement = isDef(oldVnode.nodeType)</div><div class="line">    <span class="keyword">if</span> (!isRealElement &amp;&amp; sameVnode(oldVnode, vnode)) &#123;</div><div class="line">      patchVnode(oldVnode, vnode, insertedVnodeQueue, <span class="literal">null</span>, <span class="literal">null</span>, removeOnly)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      </div><div class="line">      .....</div><div class="line">      </div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> vnode.elm</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>patch</code>方法主要做了两件事情，如果没有旧的 <code>虚拟DOM</code>，旧会重新创建一个根节点。否则的话使用<code>sameVnode</code>判断 <code>oldVnode</code>和<code>vnode</code>是否是相同的节点(这个相同不是完全都相同)，<code>sameVnode</code>的作用主要是判断是否只需要作局部刷新，来看看具体的代码<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sameVnode</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    a.key === b.key &amp;&amp; (</div><div class="line">      (</div><div class="line">        a.tag === b.tag &amp;&amp;</div><div class="line">        a.isComment === b.isComment &amp;&amp;</div><div class="line">        isDef(a.data) === isDef(b.data) &amp;&amp;</div><div class="line">        sameInputType(a, b)</div><div class="line">      ) || (</div><div class="line">        isTrue(a.isAsyncPlaceholder) &amp;&amp;</div><div class="line">        a.asyncFactory === b.asyncFactory &amp;&amp;</div><div class="line">        isUndef(b.asyncFactory.error)</div><div class="line">      )</div><div class="line">    )</div><div class="line">  )</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>主要判断<code>key</code> <code>tag</code>，如果 <code>key</code> 并且 <code>tag</code> 相同我们旧可以判定作局部刷新，如果不相同那么就会直接跳过 <code>diff</code>，进而依据 <code>vnode</code> 新建一个真实的 <code>DOM</code>，删除旧的 <code>DOM</code> 节点。我们看看<code>Vue</code>是怎么<code>diff</code>的，继续看 <code>patchVnode</code> 代码</p>
<h3 id="patchVnode"><a href="#patchVnode" class="headerlink" title="patchVnode"></a>patchVnode</h3><p><a href="https://github.com/wclimb/vue/blob/dev/src/core/vdom/patch.js#L501" target="_blank" rel="external">https://github.com/wclimb/vue/blob/dev/src/core/vdom/patch.js#L501</a><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">patchVnode</span> (<span class="params"></span></span></div><div class="line">  oldVnode,</div><div class="line">  vnode,</div><div class="line">  insertedVnodeQueue,</div><div class="line">  ownerArray,</div><div class="line">  index,</div><div class="line">  removeOnly</div><div class="line">) &#123;</div><div class="line">  <span class="keyword">if</span> (oldVnode === vnode) &#123;</div><div class="line">    <span class="keyword">return</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  ....</div><div class="line"></div><div class="line">  let i</div><div class="line">  <span class="keyword">const</span> data = vnode.data</div><div class="line">  <span class="keyword">if</span> (isDef(data) &amp;&amp; isDef(i = data.hook) &amp;&amp; isDef(i = i.prepatch)) &#123;</div><div class="line">    i(oldVnode, vnode)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">const</span> oldCh = oldVnode.children</div><div class="line">  <span class="keyword">const</span> ch = vnode.children</div><div class="line">  <span class="keyword">if</span> (isDef(data) &amp;&amp; isPatchable(vnode)) &#123;</div><div class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; cbs.update.length; ++i) cbs.update[i](oldVnode, vnode)</div><div class="line">    <span class="keyword">if</span> (isDef(i = data.hook) &amp;&amp; isDef(i = i.update)) i(oldVnode, vnode)</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 判断当前节点是否为文本节点</span></div><div class="line">  <span class="keyword">if</span> (isUndef(vnode.text)) &#123;</div><div class="line">    <span class="comment">// 如果虚拟DOM的新旧children都存在，也就是子节点</span></div><div class="line">    <span class="keyword">if</span> (isDef(oldCh) &amp;&amp; isDef(ch)) &#123;</div><div class="line">      <span class="comment">// 如果都存在，但是二者不相等，则需要对他们的children进行diff</span></div><div class="line">      <span class="keyword">if</span> (oldCh !== ch) updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly)</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(ch)) &#123;</div><div class="line">      <span class="comment">// 新的子节点如果存在但是旧的不存在，则需要把向旧的添加</span></div><div class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</div><div class="line">        checkDuplicateKeys(ch)</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> (isDef(oldVnode.text)) nodeOps.setTextContent(elm, <span class="string">''</span>)</div><div class="line">      addVnodes(elm, <span class="literal">null</span>, ch, <span class="number">0</span>, ch.length - <span class="number">1</span>, insertedVnodeQueue)</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(oldCh)) &#123;</div><div class="line">      <span class="comment">// 旧的子节点如果存在但是新的不存在，则需要把旧虚拟DOM原有的children删除</span></div><div class="line">      removeVnodes(oldCh, <span class="number">0</span>, oldCh.length - <span class="number">1</span>)</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(oldVnode.text)) &#123;</div><div class="line">      nodeOps.setTextContent(elm, <span class="string">''</span>)</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldVnode.text !== vnode.text) &#123;</div><div class="line">    <span class="comment">// 文本不相同则替换新的文本</span></div><div class="line">    nodeOps.setTextContent(elm, vnode.text)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>patchVnode</code> 相当于只能做到一层的判断，如果当前 <code>diff</code> 的虚拟DOM还存在 <code>children</code> 的话，需要进一步 <code>diff</code>，也就是使用 <code>updateChildren</code></p>
<h3 id="updateChildren"><a href="#updateChildren" class="headerlink" title="updateChildren"></a>updateChildren</h3><p><a href="https://github.com/wclimb/vue/blob/dev/src/core/vdom/patch.js#L404" target="_blank" rel="external">https://github.com/wclimb/vue/blob/dev/src/core/vdom/patch.js#L404</a><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateChildren</span> (<span class="params">parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> oldStartIdx = <span class="number">0</span></div><div class="line">  <span class="keyword">let</span> newStartIdx = <span class="number">0</span></div><div class="line">  <span class="keyword">let</span> oldEndIdx = oldCh.length - <span class="number">1</span></div><div class="line">  <span class="keyword">let</span> oldStartVnode = oldCh[<span class="number">0</span>]</div><div class="line">  <span class="keyword">let</span> oldEndVnode = oldCh[oldEndIdx]</div><div class="line">  <span class="keyword">let</span> newEndIdx = newCh.length - <span class="number">1</span></div><div class="line">  <span class="keyword">let</span> newStartVnode = newCh[<span class="number">0</span>]</div><div class="line">  <span class="keyword">let</span> newEndVnode = newCh[newEndIdx]</div><div class="line">  <span class="keyword">let</span> oldKeyToIdx, idxInOld, vnodeToMove, refElm</div><div class="line"></div><div class="line">  <span class="keyword">const</span> canMove = !removeOnly</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</div><div class="line">    checkDuplicateKeys(newCh)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</div><div class="line">    <span class="comment">// 如果oldStartVnode不存在，因为可能是undefined，后面处理可能会置为undefined</span></div><div class="line">    <span class="keyword">if</span> (isUndef(oldStartVnode)) &#123;</div><div class="line">      oldStartVnode = oldCh[++oldStartIdx] <span class="comment">// Vnode has been moved left</span></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isUndef(oldEndVnode)) &#123;</div><div class="line">    <span class="comment">// 如果oldEndVnode不存在，跟上面情况类似，如果没有就收缩diff区间</span></div><div class="line">      oldEndVnode = oldCh[--oldEndIdx]</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sameVnode(oldStartVnode, newStartVnode)) &#123;</div><div class="line">      <span class="comment">// 新旧第一位的虚拟DOM相同，则可以局部渲染，diff区间都进一位，继续patch比较子节点(如果有children的话,如果没有就比较文本节点就可以了)</span></div><div class="line">      patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)</div><div class="line">      oldStartVnode = oldCh[++oldStartIdx]</div><div class="line">      newStartVnode = newCh[++newStartIdx]</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sameVnode(oldEndVnode, newEndVnode)) &#123;</div><div class="line">      <span class="comment">// 新旧结尾的虚拟DOM相同，diff区间最后一位都向前进一位，继续patch比较子节点</span></div><div class="line">      patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx)</div><div class="line">      oldEndVnode = oldCh[--oldEndIdx]</div><div class="line">      newEndVnode = newCh[--newEndIdx]</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sameVnode(oldStartVnode, newEndVnode)) &#123; <span class="comment">// Vnode moved right</span></div><div class="line">      <span class="comment">// 旧的开头和新的结尾判断是否一样，如果一样的话就的开头放到最后去，我们看它调用了insertBefore，按理不管怎样都不会在最后，因为它又使用了nextSibling，</span></div><div class="line">      <span class="comment">// nodeOps.nextSibling(oldEndVnode.elm)返回的就是null了，调用insertBefore就会把它放到parentElm的最后</span></div><div class="line">      patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx)</div><div class="line">      canMove &amp;&amp; nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm))</div><div class="line">      oldStartVnode = oldCh[++oldStartIdx]</div><div class="line">      newEndVnode = newCh[--newEndIdx]</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sameVnode(oldEndVnode, newStartVnode)) &#123; <span class="comment">// Vnode moved left</span></div><div class="line">      <span class="comment">// 同理上面</span></div><div class="line">      patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)</div><div class="line">      canMove &amp;&amp; nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm)</div><div class="line">      oldEndVnode = oldCh[--oldEndIdx]</div><div class="line">      newStartVnode = newCh[++newStartIdx]</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">// 这里会判断oldKeyToIdx是否定义，初次都是undefined，如果没有就会去通过key生成一个对象，比如你的key为 abc，当前下标为0，那么oldKeyToIdx = &#123;abc: 0,xxx: 1&#125; </span></div><div class="line">      <span class="keyword">if</span> (isUndef(oldKeyToIdx)) oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx)</div><div class="line">      idxInOld = isDef(newStartVnode.key)</div><div class="line">        ? oldKeyToIdx[newStartVnode.key]</div><div class="line">        : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx)</div><div class="line">      <span class="comment">// 看看当前的key是否在里面，得到当前的idxInOld</span></div><div class="line">      <span class="keyword">if</span> (isUndef(idxInOld)) &#123; <span class="comment">// New element</span></div><div class="line">        <span class="comment">// 如果没找到相应的key就证明当前是新元素。则直接创建</span></div><div class="line">        createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, <span class="literal">false</span>, newCh, newStartIdx)</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">// 如果找到</span></div><div class="line">        vnodeToMove = oldCh[idxInOld]</div><div class="line">        <span class="comment">// 并且是同类型的虚拟DOM，则先把当前置为undefined，证明当前已经处理了，然后把相应的元素插入到对应的位置</span></div><div class="line">        <span class="keyword">if</span> (sameVnode(vnodeToMove, newStartVnode)) &#123;</div><div class="line">          patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx)</div><div class="line">          oldCh[idxInOld] = <span class="literal">undefined</span></div><div class="line">          canMove &amp;&amp; nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm)</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="comment">// 相同的key但是不同的元素就直接创建元素</span></div><div class="line">          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, <span class="literal">false</span>, newCh, newStartIdx)</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// 处理完当前新的虚拟DOM就进一位</span></div><div class="line">      newStartVnode = newCh[++newStartIdx]</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 如果旧的开始 &gt; 旧的结尾下标，证明当前旧的虚拟DOM不够比较了，证明新的虚拟DOM明显比旧的元素多，就可以直接插入剩下的元素了</span></div><div class="line">  <span class="keyword">if</span> (oldStartIdx &gt; oldEndIdx) &#123;</div><div class="line">    refElm = isUndef(newCh[newEndIdx + <span class="number">1</span>]) ? <span class="literal">null</span> : newCh[newEndIdx + <span class="number">1</span>].elm</div><div class="line">    addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue)</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (newStartIdx &gt; newEndIdx) &#123;</div><div class="line">  <span class="comment">// 如果新的开始 &gt; 新的结尾下标，证明当前新的虚拟DOM不够比较了，证明新的虚拟DOM明显比旧的元素少，则需要把剩下的旧虚拟DOM移除掉</span></div><div class="line">    removeVnodes(oldCh, oldStartIdx, oldEndIdx)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面就是完整的<code>diff</code>算法了，可以直接看代码内的注释，你会发现进行最简单的判断，判断开始结尾是否相互一样，再通过<code>key</code>来查找元素，提高效率。</p>
<h2 id="图解diff过程"><a href="#图解diff过程" class="headerlink" title="图解diff过程"></a>图解diff过程</h2><p>比如我们现在我们有<code>data</code> <code>[A, B, C, D]</code>，我们把他们改为 <code>[B, C, A, D]</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"item in arr"</span> <span class="attr">:key</span>=<span class="string">"item"</span>&gt;</span>item<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">  <span class="attr">data</span>:&#123;</div><div class="line">    <span class="attr">arr</span>: [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>]</div><div class="line">  &#125;,</div><div class="line">  mounted()&#123;</div><div class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">      <span class="keyword">this</span>.arr = [<span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'A'</span>, <span class="string">'D'</span>, <span class="string">'F'</span>]</div><div class="line">    &#125;,<span class="number">1000</span>)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="有key的情况"><a href="#有key的情况" class="headerlink" title="有key的情况"></a>有key的情况</h3><p><img src="/img/diff/1.jpg" alt=""><br>解析👆：最开始的 <code>startIdx</code> 都是<code>0</code>，都会从最开始比对，第一位是 <code>A</code> 和 <code>B</code>，发现不一样，整个判断下来，发现前后都没有一样的元素，那么就会走第7个判断，通过<code>key</code>值来查找，他会去旧的<code>虚拟DOM</code>里找<code>B</code>元素，发现找了，先把他置为 <code>undefined</code> ，然后把他插入到A的前面，然后<code>newStartIdx</code>进一位，此轮<code>diff</code>完成</p>
<p><img src="/img/diff/2.jpg" alt=""><br>解析👆：现在<code>newStartIdx</code>来到了 <code>C</code> 这里，同样先看看有没有前后一样的，发现没有，又走到第7个判断里，通过 <code>key</code> 值来查找，找到 <code>C</code> 之后，把旧的<code>C</code>置为<code>undefined</code>，然后把<code>C</code>插入到<code>A</code>前面，然后<code>newStartIdx</code>进一位，此轮 <code>diff</code> 完成</p>
<p><img src="/img/diff/3.jpg" alt=""><br>解析👆：现在<code>newStartIdx</code>来到了 <code>A</code> 这里，同样先看看有没有前后一样的，发现旧的开始和新的开始位置一样，此时就不用改变位置了，直接<code>oldStartIdx</code>和<code>newStartIdx</code>都进一位，此轮<code>diff</code>完成</p>
<p><img src="/img/diff/4.jpg" alt=""><br>解析👆：我们发现<code>oldStartIdx</code>来到了<code>B</code>这里，但是B是已经是<code>undefined</code>的，此轮会走 <code>if(isUndef(oldStartVnode)){}</code>，直接<code>oldStartIdx</code>进一位。进一位之后发现又是<code>undefined</code>，继续+1，来到来<code>D</code>这里<br>此时的<code>oldStartIdx</code>和<code>oldEndIdx</code>是一样的，此时的<code>newStartIdx</code>也是<code>D</code>，发现开始都相同，那么位置不用变，新旧的<code>startIdx</code>都进一位，你会发现此时的<code>oldStartIdx &gt; oldEndIdx</code>，大于的话就满足上面源码里<br><code>if (oldStartIdx &gt; oldEndIdx) {}</code></p>
<p><img src="/img/diff/5.jpg" alt=""><br>解析👆：满足 <code>if (oldStartIdx &gt; oldEndIdx) {}</code> 我们需要把剩下的新的 <code>虚拟DOM</code> 插入到后面，也就是把<code>F</code>插入到最后</p>
<h3 id="无key的情况"><a href="#无key的情况" class="headerlink" title="无key的情况"></a>无key的情况</h3><p><img src="/img/diff/diff-no-key.png" alt=""><br>👆看下来你会发现，为啥不带 <code>key</code> 貌似反而更快，因为咱们这里比较的都是文本节点，最简单的示例。为什么会直接赋值修改，你应该可以回过头看<code>sameVnode</code>的判断规则<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sameVnode</span> (<span class="params">a, b</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    a.key === b.key &amp;&amp; (</div><div class="line">      (</div><div class="line">        a.tag === b.tag &amp;&amp;</div><div class="line">        a.isComment === b.isComment &amp;&amp;</div><div class="line">        isDef(a.data) === isDef(b.data) &amp;&amp;</div><div class="line">        sameInputType(a, b)</div><div class="line">      ) || (</div><div class="line">        isTrue(a.isAsyncPlaceholder) &amp;&amp;</div><div class="line">        a.asyncFactory === b.asyncFactory &amp;&amp;</div><div class="line">        isUndef(b.asyncFactory.error)</div><div class="line">      )</div><div class="line">    )</div><div class="line">  )</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>不写 <code>key</code>，也满足第一个条件，然后 <code>tag</code>又都是 <code>span</code>，所以每次比较都会走 <code>sameVnode(oldStartVnode, newStartVnode)</code>，然后他们就会直接去修改 <code>textContent</code>。</p>
<p>所以在复杂的 <code>DOM</code> 中，我们还是要通过写 <code>key</code> 来提升渲染效率</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文讲解了<code>Vue</code> <code>虚拟DOM</code> 的原理，带大家看了一下他的运行流程，以及关键的 <code>diff</code> 算法，也比较了有 <code>key</code> 和无 <code>key</code> 的 <code>diff</code> 过程，本文的示例比较简单，不能覆盖所有 <code>diff</code> 判断的条件，感兴趣可以自己去尝试。下一篇会带大家撸一个自己的 <code>虚拟DOM</code>，加深理解</p>
<p>本文地址 <a href="http://www.wclimb.site/2020/03/17/vue-source-code-virtual-dom/">Vue源码之虚拟DOM</a></p>
]]></content>
      <categories>
        <category>javascript</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>原创</tag>
        <tag>javascript</tag>
        <tag>vue</tag>
        <tag>源码</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue源码之nextTick</title>
    <url>/2020/03/25/vue-sourse-code-nextTick/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天我们开始讲一下 <code>Vue</code> 的 <code>nextTick</code> 方法的实现，无论是源码还是开发的过程中，经常需要使用到 <code>nextTick</code>，<code>Vue</code> 在更新 <code>DOM</code> 时是异步执行的，只要侦听到数据变化，<code>Vue</code> 将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更。如果同一个 <code>watcher</code> 被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 <code>DOM</code> 操作是非常重要的。然后，在下一个的事件循环 <code>“tick”</code> 中，<code>Vue</code> 刷新队列并执行实际 (已去重的) 工作。<code>Vue</code> 在内部对异步队列尝试使用原生的 <code>Promise.then</code>、<code>MutationObserver</code> 和 <code>setImmediate</code>，如果执行环境不支持，则会采用 <code>setTimeout(fn, 0)</code> 代替。</p>
<a id="more"></a>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/wclimb/vue/blob/dev/src/core/util/next-tick.js" target="_blank" rel="external">https://github.com/wclimb/vue/blob/dev/src/core/util/next-tick.js</a><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">let</span> isUsingMicroTask = <span class="literal">false</span></div><div class="line"></div><div class="line"><span class="comment">// 储存回调</span></div><div class="line"><span class="keyword">const</span> callbacks = []</div><div class="line"><span class="comment">// 是否正在处理中</span></div><div class="line"><span class="keyword">let</span> pending = <span class="literal">false</span></div><div class="line"><span class="comment">// 批量执行回调</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">flushCallbacks</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// 恢复状态以便后续能正常使用</span></div><div class="line">  pending = <span class="literal">false</span></div><div class="line">  <span class="keyword">const</span> copies = callbacks.slice(<span class="number">0</span>)</div><div class="line">  <span class="comment">// 执行之前先把回调清空，以便后续能正常调用</span></div><div class="line">  callbacks.length = <span class="number">0</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; copies.length; i++) &#123;</div><div class="line">    copies[i]()</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> timerFunc</div><div class="line"><span class="comment">// 判断是否支持Promise，使用Promise的异步，属于微任务</span></div><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Promise</span> !== <span class="string">'undefined'</span> &amp;&amp; isNative(<span class="built_in">Promise</span>)) &#123;</div><div class="line">  <span class="keyword">const</span> p = <span class="built_in">Promise</span>.resolve()</div><div class="line">  timerFunc = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    p.then(flushCallbacks)</div><div class="line">    <span class="keyword">if</span> (isIOS) setTimeout(noop)</div><div class="line">  &#125;</div><div class="line">  isUsingMicroTask = <span class="literal">true</span></div><div class="line">  <span class="comment">// 判断是否支持MutationObserver，属于微任务</span></div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isIE &amp;&amp; <span class="keyword">typeof</span> MutationObserver !== <span class="string">'undefined'</span> &amp;&amp; (</div><div class="line">  isNative(MutationObserver) ||</div><div class="line">  <span class="comment">// iOS 7.x 平台处理的判断</span></div><div class="line">  MutationObserver.toString() === <span class="string">'[object MutationObserverConstructor]'</span></div><div class="line">)) &#123;</div><div class="line">  <span class="keyword">let</span> counter = <span class="number">1</span></div><div class="line">  <span class="keyword">const</span> observer = <span class="keyword">new</span> MutationObserver(flushCallbacks)</div><div class="line">  <span class="keyword">const</span> textNode = <span class="built_in">document</span>.createTextNode(<span class="built_in">String</span>(counter))</div><div class="line">  observer.observe(textNode, &#123;</div><div class="line">    <span class="attr">characterData</span>: <span class="literal">true</span></div><div class="line">  &#125;)</div><div class="line">  timerFunc = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    counter = (counter + <span class="number">1</span>) % <span class="number">2</span></div><div class="line">    textNode.data = <span class="built_in">String</span>(counter)</div><div class="line">  &#125;</div><div class="line">  isUsingMicroTask = <span class="literal">true</span></div><div class="line">  <span class="comment">// 是否支持setImmediate，属于宏任务</span></div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> setImmediate !== <span class="string">'undefined'</span> &amp;&amp; isNative(setImmediate)) &#123;</div><div class="line">  timerFunc = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    setImmediate(flushCallbacks)</div><div class="line">  &#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="comment">// 都不支持就直接使用宏任务 setTimeout</span></div><div class="line">  timerFunc = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    setTimeout(flushCallbacks, <span class="number">0</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// nextTick方法</span></div><div class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">nextTick</span> (<span class="params">cb?: Function, ctx?: Object</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> _resolve</div><div class="line">  <span class="comment">// 收集回调函数</span></div><div class="line">  callbacks.push(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">if</span> (cb) &#123;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        cb.call(ctx)</div><div class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">        handleError(e, ctx, <span class="string">'nextTick'</span>)</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_resolve) &#123;</div><div class="line">      <span class="comment">// 如果没有传递回调函数会执行_resolve，执行的代码其实就是callback this.$nextTick().then(callback)</span></div><div class="line">      _resolve(ctx)</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">  <span class="comment">// 如果状态没有正在处理执行</span></div><div class="line">  <span class="keyword">if</span> (!pending) &#123;</div><div class="line">    <span class="comment">// 置为处理中</span></div><div class="line">    pending = <span class="literal">true</span></div><div class="line">    <span class="comment">// 执行刚刚一系列判断下来获得的函数，最终会执行flushCallbacks方法</span></div><div class="line">    timerFunc()</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 如果没有传递回调函数就会返回一个Promise，this.$nextTick().then(callback)，执行 _resolve(ctx) 之后会执行callback</span></div><div class="line">  <span class="keyword">if</span> (!cb &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">Promise</span> !== <span class="string">'undefined'</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</div><div class="line">      _resolve = resolve</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们可以看到 <code>Vue</code> 会借助 <code>timerFunc</code> 方法异步批量处理回调函数，<code>timerFunc</code> 可能是 <code>Promise.then</code>、<code>MutationObserver</code> 、 <code>setImmediate</code>、<code>setTimeout</code>。判断他们的支持程度，降级处理。<br>如果没有传递回调函数会返回一个Promise，并把 <code>resolve</code> 方法赋值给 <code>_resolve</code>，这样我们 <code>this.$nextTick().then(callback)</code>，<code>callback</code>就会被触发了。至于为什么要使用 <code>timerFunc</code> 这种方式，开头已经讲了，是因为 <code>Vue</code> 是异步更新队列，这样做的好处是去除重复数据对于避免不必要的计算和 <code>DOM</code> 操作，比如我们操作一个数据，并且重复多次给他赋不一样的值，<code>this.a = 1;this.a = 2; this.a = 3</code>，答案结果最后自然是3，但是 <code>Vue</code> 不会去更新三次 <code>DOM</code> 或者数据，这样会造成不必要的浪费，所以需要做异步处理去 <code>update</code> 他们，既然更新是异步的，我们如果想直接马上获取最新的数据自然是不行的，需要借助 <code>nextTick</code>，在下一次事件循环中去获取，可以看下面👇的代码</p>
<h2 id="实际代码"><a href="#实际代码" class="headerlink" title="实际代码"></a>实际代码</h2><p>我们看下面的代码<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span> @<span class="attr">click</span>=<span class="string">"fn"</span>&gt;</span>&#123;&#123;code&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">  <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">  <span class="attr">data</span>: &#123;</div><div class="line">    <span class="attr">code</span>: <span class="number">0</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">methods</span>:&#123;</div><div class="line">    fn()&#123;</div><div class="line">      <span class="keyword">this</span>.code = <span class="number">1</span></div><div class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el.textConent); <span class="comment">// 0</span></div><div class="line">      <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el.textConent) <span class="comment">// 1</span></div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>你也可以这样</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><div class="line">var vm = new Vue(&#123;</div><div class="line">  el: '#app',</div><div class="line">  data: &#123;</div><div class="line">    code: 0</div><div class="line">  &#125;,</div><div class="line">  methods:&#123;</div><div class="line">    async fn()&#123;</div><div class="line">      this.code = 1</div><div class="line">      console.log(this.$el.textConent); // 0</div><div class="line"><span class="deletion">-     this.$nextTick(()=&gt;&#123;</span></div><div class="line"><span class="deletion">-       console.log(this.$el.textConent) // 1</span></div><div class="line"><span class="deletion">-     &#125;)</span></div><div class="line"><span class="addition">+     await this.$nextTick()</span></div><div class="line"><span class="addition">+     console.log(this.$el.textConent) // 1</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>今天带大家了解了一下 <code>nextTick</code> 的内部实现，虽然你也可以直接使用 <code>setTimeout</code> 去做，但是基于性能和执行顺序的问题(微任务执行快于宏任务)，推荐还是使用 <code>nextTick</code> 更好一点。</p>
<p>本文地址 <a href="http://www.wclimb.site/2020/03/25/vue-sourse-code-nextTick/">Vue源码之nextTick</a></p>
]]></content>
      <categories>
        <category>javascript</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>原创</tag>
        <tag>javascript</tag>
        <tag>vue</tag>
        <tag>源码</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack系列之编写一个loader</title>
    <url>/2019/07/05/webpack%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AAloader/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p><code>webpack</code>的<code>loader</code>的应用是非常广泛的，完全离不开它，我们开发的过程往往都是使用别人编写好的<code>loader</code>来处理文件，今天我们就来编写一个<code>loader</code>。</p>
<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>首先我们看看<code>loader</code>是怎么使用在<code>webpack</code>上的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">entry</span>: <span class="string">'...'</span>,</div><div class="line">  <span class="attr">module</span>: &#123;</div><div class="line">    <span class="attr">rules</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</div><div class="line">        <span class="attr">use</span>: <span class="string">'css-loader'</span>,</div><div class="line">      &#125;,</div><div class="line">    ],</div><div class="line">  &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用起来很简单，如果你需要处理<code>css</code>文件，那么安装好<code>css-loader</code>包，然后正则匹配到所有<code>.css</code>的文件，使用<code>css-loader</code>进行文件得处理</p>
<a id="more"></a>
<h2 id="编写"><a href="#编写" class="headerlink" title="编写"></a>编写</h2><p>编写之前我们先给定个需求吧，设想我们能不能像vue那样编写，处理<code>style/script/template</code>，这样，我们先只处理<code>style</code>的内容，把他提取处理。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; npm init -y</div><div class="line">&gt; cnpm i webpack webpack-cli webpack-dev-server clean-webpack-plugin html-webpack-plugin -D</div></pre></td></tr></table></figure>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>先来编写一个配置文件</p>
<p>新建文件 <code>webpack.config.js</code><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</div><div class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">entry</span>: <span class="string">'./src/main.js'</span>,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">'./dist'</span>),</div><div class="line">    <span class="attr">filename</span>: <span class="string">'bundle.js'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">plugins</span>: [</div><div class="line">    <span class="keyword">new</span> CleanWebpackPlugin(),</div><div class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123; <span class="attr">template</span>: <span class="string">'index.html'</span> &#125;),</div><div class="line">  ],</div><div class="line">  <span class="attr">module</span>: &#123;</div><div class="line">    <span class="attr">rules</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.css/</span>,</div><div class="line">        <span class="attr">use</span>: path.resolve(__dirname, <span class="string">'loader/loader.js'</span>),</div><div class="line">      &#125;,</div><div class="line">    ],</div><div class="line">  &#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>项目下新建<code>src</code>文件夹，<code>src</code>项目新建<code>main.js</code>、<code>a.test</code>文件</p>
<p><code>main.js</code><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">'./a.test'</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'loader test'</span>);</div></pre></td></tr></table></figure></p>
<p><code>a.test</code><br><figure class="highlight"><table><tr><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">body&#123;</div><div class="line">  background: #ccc</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure></p>
<p>我们重点是<code>a.test</code>文件，等会我会用<code>loader</code>处理他，让他显示到页面中</p>
<p>———–分割线———–</p>
<p>现在我们在项目下新建<code>loader</code>文件夹，文件夹下面新建<code>loader.js</code>，这就是我们编写的<code>loader</code></p>
<p><code>loader/loader.js</code><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">sSource</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> sStyleString = sSource</div><div class="line">    .match(<span class="regexp">/&lt;style&gt;([\s\S]*)&lt;\/style&gt;/</span>)[<span class="number">1</span>]</div><div class="line">    .replace(<span class="regexp">/\n/g</span>, <span class="string">''</span>);</div><div class="line">  <span class="keyword">return</span> <span class="string">`</span></div><div class="line">      let head = document.querySelector('head');</div><div class="line">      let style = document.createElement('style');</div><div class="line">      style.type = 'text/css';</div><div class="line">      let cssNode = document.createTextNode('<span class="subst">$&#123;sStyleString&#125;</span>');</div><div class="line">      style.appendChild(cssNode);</div><div class="line">      head.appendChild(style);`;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>没错，就这么多，<code>loader</code>接收一个参数，也就是<code>sSource</code>，内容就是<code>.test</code>后缀下的文件内容，我们只需要获取内容，然后做我们想做的一切事情，比如，我提取了文件里<code>css</code>的部分，像<code>.vue</code>那样，然后去写一段<code>js</code>，把这段<code>css</code>通过<code>&lt;style&gt;&lt;/style&gt;</code>的方式放到页面上去</p>
<p>现在你运行一下这个项目，然后查看浏览器，浏览器的背景是否变了颜色？</p>
<h2 id="api"><a href="#api" class="headerlink" title="api"></a>api</h2><p><code>loader</code>的上下文通过<code>this</code>访问，举几个例子</p>
<h3 id="this-query"><a href="#this-query" class="headerlink" title="this.query"></a>this.query</h3><ol>
<li>如果这个 <code>loader</code> 配置了 <code>options</code> 对象的话，<code>this.query</code> 就指向这个 <code>option</code> 对象</li>
<li>如果 <code>loader</code> 中没有 <code>options</code>，而是以 <code>query</code> 字符串作为参数调用时，<code>this.query</code> 就是一个以 <code>?</code> 开头的字符串</li>
</ol>
<h3 id="this-context"><a href="#this-context" class="headerlink" title="this.context"></a>this.context</h3><p>模块所在的目录</p>
<h3 id="this-emitFile"><a href="#this-emitFile" class="headerlink" title="this.emitFile"></a>this.emitFile</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">emitFile(name: string, <span class="attr">content</span>: Buffer|string, <span class="attr">sourceMap</span>: &#123;...&#125;)</div></pre></td></tr></table></figure>
<p>可以通过用它来生成一个文件</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>写一个<code>loader</code>很简单，只需要你有对文件内容处理的能力，还是很容易上手的，关键不在<code>loader</code>，而在于你的需求复杂程度</p>
<p>本文地址 <a href="http://www.wclimb.site/2019/07/05/webpack系列之编写一个loader/">webpack系列之编写一个loader</a></p>
]]></content>
      <categories>
        <category>javascript</category>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>原创</tag>
        <tag>javascript</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack系列之初探</title>
    <url>/2019/06/06/webpack%E7%B3%BB%E5%88%97%E4%B9%8B%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>相信<code>webpack</code>这个名称对于前端的同学来说并不陌生，只要你在用<code>vue</code>、<code>react</code>等等之类的框架，就得天天和它打交道。但是大部分人都只是直接怼一个<code>vue-cli</code>脚手架生成一个项目，运行起来就开始一顿写，完全不会去看这个项目的其他相关的东西，今天开始，咱们就来说说这个又爱又恨的<code>webpack</code></p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>使用wepack的时候经常会出现下面这些疑问</p>
<ol>
<li><font color="red">你webpack只能打包单页面的文件吗？</font></li>
<li><font color="red">WTF，我包怎么这么大，加载太慢了</font></li>
<li><font color="red">我打包速度怎么这么慢，什么破玩意？</font><br>…</li>
</ol>
<h2 id="为什么要使用webpack"><a href="#为什么要使用webpack" class="headerlink" title="为什么要使用webpack"></a>为什么要使用webpack</h2><p>哈，你问我为什么要用？因为大家都在用啊😃😃。开个玩笑，前端发展到今天，新技术新思想新框架爆发式增长，当前的浏览器环境跑不赢啊，你说你写个ES6/7在浏览器环境都能跑起来？扯淡的。这个时候<code>babel</code>就出现了，你跑不起来是吧，那我转成<code>ES5</code>你总该跑起来吧~，那<code>babel</code>我还是不能直接用啊，肯定得借助工具编译呀，所以我们需要webpack去做这件事情了。<font color="red">这个时候有人就要站出来说了，我gulp不服，我也能做，我就不用<code>webpack</code></font>。你这么说我就要跟你唠唠了，现在我们先来比较一下<code>webpack</code>和<code>gulp</code>。</p>
<p><code>gulp</code> 是 <code>task runner</code>，<code>Webpack</code> 是 <code>module bundler</code></p>
<p>webpack的优势在模块化，<code>gulp</code>除了模块化方面都很不错。但是前端发展至今，模块化真的很重要，<code>CMD</code>、<code>AMD</code>就是模块化的产物。<br>简单来说，如果你当前项目需要模块化编程，那就选<code>webpack</code>，如果是处理其他事情，比如把图片拼接成雪碧图或者压缩，那么<code>gulp</code>是最擅长的</p>
<p>感兴趣的可以看看这个回答 <a href="https://www.zhihu.com/question/45536395/answer/164361274" target="_blank" rel="external">gulp 有哪些功能是 webpack 不能替代的？</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>这里可以参考<a href="https://www.webpackjs.com/guides/getting-started/#%E5%9F%BA%E6%9C%AC%E5%AE%89%E8%A3%85" target="_blank" rel="external">webpack官网</a><br>开发环境 <code>webpack: 4.34.0</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; mkdir webpack &amp;&amp; cd webpack</div><div class="line">&gt; npm init -y</div><div class="line">&gt; npm install webpack webpack-cli -D</div></pre></td></tr></table></figure></p>
<h2 id="入口（entry）"><a href="#入口（entry）" class="headerlink" title="入口（entry）"></a>入口（entry）</h2><p>每个<code>webpack</code>都会有一个<code>entry</code>，就是入口的意思，指示 <code>webpack</code> 应该使用哪个模块，来作为构建其内部依赖图的开始。</p>
<p>注意点：</p>
<ol>
<li>入口可以有多个，如果是单页面只需要一个入口，多页面可以设置多个入口</li>
<li>入口的文件必须是<code>.js</code>文件，因为<code>webpack</code>只认识<code>js</code>（不完全对，其实任意文件都可以，只是<code>webpack</code>会把它当做<code>js</code>来处理）</li>
</ol>
<p>举个🌰<br><a id="more"></a><br>我们新建<code>webpack.config.js</code>和新建<code>src</code>文件夹，并且文件夹下新建<code>index.js</code>文件<br>目录如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">- webpack/</div><div class="line">-   src/</div><div class="line">-     index.js</div><div class="line">-   webpack.config.js</div></pre></td></tr></table></figure>
<p>webpack.config.js<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">entry</span>: <span class="string">'./src/index.js'</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>我们上面指定<code>webpack</code>的入口文件为<code>index.js</code>文件，这是总入口</p>
<h2 id="出口（output）"><a href="#出口（output）" class="headerlink" title="出口（output）"></a>出口（output）</h2><p>有入口当然就会有出口了，就是你导出的文件</p>
<p>webpack.config.js<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">entry</span>: <span class="string">'./src/index.js'</span>,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">'dist'</span>),</div><div class="line">    <span class="attr">filename</span>: <span class="string">'bundle.js'</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>上述<code>entry</code>已经介绍过了，我们来看看<code>output</code>，他有文件导出的路径（path）和导出的文件名（filename）</p>
<p>关于<code>filename</code>这里需要注意的地方有：</p>
<ol>
<li>出口的文件名可以定制化，当前如果你是单页面的话，简单的可以写死一个filename，就如上面的<code>bundle.js</code>一样</li>
<li>你也可以这么写，使用入口名称的名称：<code>filename: &#39;[name].bundle.js&#39;</code>,当然还需要改一下entry，把它改成以下形式，name就会变成 -&gt; app</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">entry</span>: &#123;</div><div class="line">    <span class="attr">app</span>: <span class="string">'./src/index.js'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">'dist'</span>),</div><div class="line">    <span class="attr">filename</span>: <span class="string">'bundle.js'</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>现在我们来试一下webapck打包</p>
<h2 id="小试牛刀"><a href="#小试牛刀" class="headerlink" title="小试牛刀"></a>小试牛刀</h2><p>第一步，新建一个文件夹webpack-demo<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; mkdir webpack-demo &amp;&amp; cd webpack-demo</div><div class="line">&gt; npm init -y</div><div class="line">&gt; cnpm install webpack webpack-cli -D</div></pre></td></tr></table></figure></p>
<p>第二步，新建src/index.js文件和webpack.config.js文件</p>
<p>webpack.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">entry</span>: <span class="string">'./src/index.js'</span>,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">filename</span>: <span class="string">'bundle.js'</span>,</div><div class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">'dist/'</span>),</div><div class="line">  &#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>index.js<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">document</span>.write(<span class="string">'hello webpack'</span>);</div></pre></td></tr></table></figure></p>
<p>第三步，打包<br>命令行输入<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; npx webpack --config webpack.config.js</div></pre></td></tr></table></figure></p>
<p>然后控制台就会输出<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Hash: 348dca17387cd3f29cef</div><div class="line">Version: webpack 4.33.0</div><div class="line">Time: 227ms</div><div class="line">Built at: 2019-06-08 15:24:07</div><div class="line">    Asset       Size  Chunks             Chunk Names</div><div class="line">bundle.js  961 bytes       0  [emitted]  main</div><div class="line">Entrypoint main = bundle.js</div><div class="line">[0] ./src/index.js 33 bytes &#123;0&#125; [built]</div></pre></td></tr></table></figure></p>
<p>看到这个信息证明你已经大功告成了，去看看dist/文件夹下是不是有打包好的js文件<br>最后面你会看到有黄色的警告，说mode没有设置，待会再讲</p>
<font color="red">这个时候你就会想，我每次生成的文件都叫bundle.js，我都区分不开，也不好做缓存，这个时候你就需要配置一下filename了</font>

<p>我们把webpack.config.js改成以下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">entry</span>: &#123;</div><div class="line">    <span class="attr">app</span>: <span class="string">'./src/index.js'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">filename</span>: <span class="string">'[name].[hash].js'</span>,</div><div class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">'dist/'</span>),</div><div class="line">  &#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>然后执行<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; npx webpack --config webpack.config.js</div></pre></td></tr></table></figure></p>
<p>这个时候dist/文件夹下就会多出个类似<code>app.32434c7cc602e3049dac.js</code>的文件，而且如果你反复执行打包命令，你发现app.32434c7cc602e3049dac.js文件名都没有改变，这是为什么呢？<br>因为webpack会判断你的文件是否有更改而来觉得文件夹hash的变更，现在你可以尝试修改一下index.js文件之后打包的效果就知道了。</p>
<h2 id="模式（mode-）"><a href="#模式（mode-）" class="headerlink" title="模式（mode ）"></a>模式（mode ）</h2><p>上面说到每次打包的时候都会报警告，告诉我们没有设置mode，现在我们来说说mode<br>首先mode有两个值，分别是development和production，意思就是，当前项目打包的开发环境还是生成环境的代码<br>如果你设置了mode: ‘development’，在项目里你可以使用 process.env.NODE_ENV 来获取当前的环境的值<br>你可以尝试把webpack.config.js改成以下，然后在index.js里把这个值打印出来，运行一下效果</p>
<p>webpack.config.js<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">mode</span>: <span class="string">'development'</span>,</div><div class="line">  <span class="attr">entry</span>: &#123;</div><div class="line">    <span class="attr">app</span>: <span class="string">'./src/index.js'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">filename</span>: <span class="string">'[name].[hash].js'</span>,</div><div class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">'dist/'</span>),</div><div class="line">  &#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>index.js<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">document</span>.write(<span class="string">`hello webpack，this is <span class="subst">$&#123;process.env.NODE_ENV&#125;</span>`</span>);</div></pre></td></tr></table></figure></p>
<p>现在我们只有js文件，你可以先在根目录新建一个index.html文件，把js引入在浏览器环境执行(或者直接在浏览器控制台执行js)，你会看到浏览器显示 -&gt; hello webpack，this is development<br>你分别运行之后会发现他们的效果是不一样的，一个是被压缩的，一个没有被压缩</p>
<font color="red">这个时候你就会想了，怎么这么麻烦，我打包还得自己去新建html文件引入js然后运行或者去执行js文件，能不能让他自动运行跑起来？</font><br>当然是可以的，下面我们来说说plugins<br><br>## 插件（plugins）<br><br>插件是 webpack 的支柱功能。webpack 自身也是构建于，你在 webpack 配置中用到的相同的插件系统之上！（官网的解释）<br>插件怎么说呢？不好解释它，你可以理解为处理工具，插件目的在于解决 <code>loader</code>(这个等会再讲，现在用不上) 无法实现的其他事<br><br>插件怎么配置？就像下面这样，当然不是随便找的插件，我们会用到下面配置的插件<br><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">mode</span>: <span class="string">'development'</span>,</div><div class="line">  <span class="attr">entry</span>: &#123;</div><div class="line">    <span class="attr">app</span>: <span class="string">'./src/index.js'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">filename</span>: <span class="string">'[name].[hash].js'</span>,</div><div class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">'dist/'</span>),</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">plugins</span>: [</div><div class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;<span class="attr">template</span>: <span class="string">'index.html'</span>&#125;)</div><div class="line">  ]</div><div class="line">&#125;;</div></pre></td></tr></table></figure><br><br>我们先在根目录新建一个index.html文件，之前不是说运行项目很麻烦嘛？现在教你简单的方法<br>然后我们用到了html-webpack-plugin，需要先安装他才能使用<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; cnpm i html-webpack-plugin -D</div></pre></td></tr></table></figure><br><br>下一步打包运行项目<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; npx webpack --config webpack.config.js</div></pre></td></tr></table></figure><br><br>运行结果：<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Hash: bea857ae13cad8af6e66</div><div class="line">Version: webpack 4.33.0</div><div class="line">Time: 274ms</div><div class="line">Built at: 2019-06-08 16:00:33</div><div class="line">                      Asset      Size  Chunks             Chunk Names</div><div class="line">app.bea857ae13cad8af6e66.js  3.83 KiB     app  [emitted]  app</div><div class="line">                 index.html  74 bytes          [emitted]  </div><div class="line">Entrypoint app = app.bea857ae13cad8af6e66.js</div><div class="line">[./src/index.js] 65 bytes &#123;app&#125; [built]</div><div class="line">Child html-webpack-plugin for &quot;index.html&quot;:</div><div class="line">     1 asset</div><div class="line">    Entrypoint undefined = index.html</div><div class="line">    [./node_modules/_html-webpack-plugin@3.2.0@html-webpack-plugin/lib/loader.js!./index.html] 209 bytes &#123;0&#125; [built]</div><div class="line">    [./node_modules/_webpack@4.33.0@webpack/buildin/global.js] (webpack)/buildin/global.js 472 bytes &#123;0&#125; [built]</div><div class="line">    [./node_modules/_webpack@4.33.0@webpack/buildin/module.js] (webpack)/buildin/module.js 497 bytes &#123;0&#125; [built]</div><div class="line">        + 1 hidden module</div></pre></td></tr></table></figure><br><br>去查看dist文件夹下，你会发现多出了两个文件，js和index.html文件，这就是插件的功劳<br>html-webpack-plugin这个插件需要指定是那个html模板，然后最后打包的时候就是以这个模板为主，把打包好的js文件放到这个index.html里面，你可以查看html文件里的内容：<br><br>index.html<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"app.1b0b2001b0579faec32d.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><br><br><font color="red">这个时候你会发现，我靠，我dist文件怎么这么多啊，怎么办啊？别急，我们再来用一个插件解决这个问题</font>

<p>安装插件clean-webpack-plugin<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; cnpm i clean-webpack-plugin -D</div></pre></td></tr></table></figure></p>
<p>然后配置文件去添加插件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</div><div class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">mode</span>: <span class="string">'development'</span>,</div><div class="line">  <span class="attr">entry</span>: &#123;</div><div class="line">    <span class="attr">app</span>: <span class="string">'./src/index.js'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">filename</span>: <span class="string">'[name].[hash].js'</span>,</div><div class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">'dist/'</span>),</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">plugins</span>: [</div><div class="line">    <span class="keyword">new</span> CleanWebpackPlugin(),</div><div class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;<span class="attr">template</span>: <span class="string">'index.html'</span>&#125;)</div><div class="line">  ]</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>然后你再去看看dist文件夹里的文件，是不是只有两个文件了？这个插件的作用是，先把dist文件夹里的文件先清空然后再把打包好的文件放入dist。</p>
<font color="red">那么你还会有问题，这还是麻烦啊，我不能只运行命令行，让重新自己打开浏览器运行我打包的项目吗？</font>当然可以啊<br><br>首先安装 webpack-dev-server<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; cnpm i webpack-dev-server -D</div></pre></td></tr></table></figure><br><br>然后<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; webpack-dev-server --open --config webpack.config.js</div></pre></td></tr></table></figure><br><br>你会发现重新自动打开了浏览器，页面显示 hello webpack，this is development。是不是很简单？<br>你现在可以去修改index.js然后保存文件，去浏览器看看是不是自动刷新了你刚刚更改的内容呢？<br><br><font color="red">现在你可能还会有问题，我去，这太简单了吧，我要用css和图片怎么办？js不能导入css文件啊！我怎么跟vue一样在自己的ip访问项目啊？现在肯定是问题一大堆</font>

<h2 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h2><p>loader 用于对模块的源代码进行转换。loader 可以使你在 import 或”加载”模块时预处理文件。比如可以把typescript转换成JavaScript，less转成css<br>现在我们就来解决你上一章节末的问题，教你配置简单的loader，来加载css或者图片<br>首先我们先安装css-loader/style-loader，来加载解析css文件<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; cnpm i css-loader style-loader -D</div></pre></td></tr></table></figure></p>
<p>下一步在src文件夹下新建test.css文件，再在index.js导入<br>test.css<br><figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#ccc</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>index.js<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">'./test.css'</span>;</div><div class="line"><span class="built_in">document</span>.write(<span class="string">`hello webpack，this is <span class="subst">$&#123;process.env.NODE_ENV&#125;</span>，test`</span>);</div></pre></td></tr></table></figure></p>
<p>如果你直接运行会发现控制台报错了<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">ERROR in ./src/test.css 1:5</div><div class="line">Module parse failed: Unexpected token (1:5)</div><div class="line">You may need an appropriate loader to handle this file type.</div><div class="line">&gt; body &#123;</div><div class="line">|   background: #ccc;</div><div class="line">| &#125;</div><div class="line"> @ ./src/index.js 1:0-20</div></pre></td></tr></table></figure></p>
<p>这个时候loader登场了，我们修改配置文件<br>webpack.config.js<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</div><div class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">mode</span>: <span class="string">'development'</span>,</div><div class="line">  <span class="attr">entry</span>: &#123;</div><div class="line">    <span class="attr">app</span>: <span class="string">'./src/index.js'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">filename</span>: <span class="string">'[name].[hash].js'</span>,</div><div class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">'dist/'</span>),</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">plugins</span>: [</div><div class="line">    <span class="keyword">new</span> CleanWebpackPlugin(),</div><div class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123; <span class="attr">template</span>: <span class="string">'index.html'</span> &#125;),</div><div class="line">  ],</div><div class="line">  <span class="attr">module</span>: &#123;</div><div class="line">    <span class="attr">rules</span>:[</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</div><div class="line">        <span class="attr">use</span>: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>],</div><div class="line">      &#125;,</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>然后运行命令行<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; webpack-dev-server --open --config webpack.config.js</div></pre></td></tr></table></figure></p>
<p>你会发现页面背景颜色变了</p>
<p>现在我们来说说配置：<br>module.rules 允许你在 webpack 配置中指定多个 loader，上面我们规定正则匹配css文件，然后如果匹配到了，则使用style-laoder和css-loader去处理css文件，css-laoder负责解析css文件，style-loader负责把css文件放到页面中去，你打开调试可以看到head里被插入了style样式标签，当前如果你想解析例如xx.ts文件，则可以在数组里面新增：<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"> &#123;</div><div class="line">  <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>,</div><div class="line">  <span class="attr">use</span>: <span class="string">'ts-loader'</span>,</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<p>下面来看看怎么加载图片资源，还是跟上述原一样，图片也是有类型的，我们首先得匹配文件后缀，然后去用loader去解析他们，这里我们需要用到 url-loader file-loader<br>按照惯例先安装<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; cnpm i url-loader file-loader -D</div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  ...</div><div class="line">  module: &#123;</div><div class="line">    <span class="attr">rules</span>:[</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</div><div class="line">        <span class="attr">use</span>: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>],</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|svg)(\?.*)?$/</span>,</div><div class="line">        <span class="attr">loader</span>: <span class="string">'url-loader'</span>,</div><div class="line">        <span class="attr">options</span>: &#123;</div><div class="line">          <span class="attr">limit</span>: <span class="number">6000</span>,</div><div class="line">          <span class="attr">name</span>: <span class="string">'img/[name].[hash:7].[ext]'</span>,</div><div class="line">        &#125;,</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>下一步就是往项目里增加图片了<br>我们修改test.css文件<br>test.css<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">body &#123;</div><div class="line">  background: url(img.jpg);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>浏览器就显示的全是刚刚设置的重复图片了</p>
<p><strong> 这里你又会问了，不对，你这里只用到了url-loader，file-loader不是多余的吗？</strong> 不是的，你可以看看options，有一个limit参数，规定如果超过了6000bytes大小的文件会交给file-loader处理，因为如果图片小于这个数值，url-loader会把图片转成base64格式的图片加载，如果超过就自己不处理了，所以他们两者是有相依性的</p>
<h2 id="使用npm脚本"><a href="#使用npm脚本" class="headerlink" title="使用npm脚本"></a>使用npm脚本</h2><p>上面基本上都是使用一大段的命令行来执行项目，现在我们来简化一下<br>修改package.json<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="string">"scripts"</span>: &#123;</div><div class="line">  <span class="string">"dev"</span>: <span class="string">"webpack-dev-server --open --config webpack.config.js"</span>,</div><div class="line">  <span class="string">"build"</span>: <span class="string">"webpack --config webpack.config.js"</span></div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<p>命令行运行项目<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; npm run dev</div><div class="line">&gt; npm run build</div></pre></td></tr></table></figure></p>
<h2 id="devServer"><a href="#devServer" class="headerlink" title="devServer"></a>devServer</h2><p>在开发中你可能有很多需求，比如怎么通过ip访问项目，怎么把控制台信息输出的精简点，怎么修改端口等等？这个时候就需要用到devServer的配置了<br>我们修改webpack.config.js,增加以下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  ...</div><div class="line">  devServer: &#123;</div><div class="line">    <span class="attr">contentBase</span>: <span class="string">'./dist'</span>, <span class="comment">// 告诉服务器从哪里提供内容</span></div><div class="line">    host: <span class="string">'0.0.0.0'</span>, <span class="comment">// 指定使用一个 host。默认是 localhost</span></div><div class="line">    useLocalIp: <span class="literal">true</span>, <span class="comment">// 是否使用本地ip</span></div><div class="line">    open: <span class="literal">true</span>, <span class="comment">// 是否自动打开浏览器</span></div><div class="line">    port: <span class="number">8080</span>, <span class="comment">// 端口号</span></div><div class="line">    noInfo: <span class="literal">true</span>, <span class="comment">// 显示的 webpack 包(bundle)信息」的消息将被隐藏</span></div><div class="line">  &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>是的，你现在可以不用在命令行里增加–open这个参数，在这里配置也是一样的</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>累了累了，写到这已经是凌晨了。不多BB了，现在基本的webpack操作应该都已经学会了吧，后面就是稍微深入的玩一玩webpack了，成为一个webpack配置工程师？</p>
<font size="10">to be continued…</font>

<p>本文地址 <a href="http://www.wclimb.site/2019/06/06/webpack%E7%B3%BB%E5%88%97%E4%B9%8B%E5%88%9D%E6%8E%A2/">webpack系列之初探</a></p>
]]></content>
      <categories>
        <category>javascript</category>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>原创</tag>
        <tag>javascript</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack系列之编写一个plugin</title>
    <url>/2019/06/21/webpack%E7%B3%BB%E5%88%97%E4%B9%8B%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AAplugin/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>使用<code>webpack</code>或者自己配置研究过<code>webpack</code>的人都知道<code>plugin</code>，也就是<code>webpack</code>的插件，对于大多数人来说，经常使用的插件诸如：<code>clean-webpack-plugin</code>、<code>html-webpack-plugin</code>等等，在很多情况下，我们只会去用它，知道他是干什么的，但是其内部做的操作缺知之甚少，今天我们就来写一个<code>plugin</code></p>
<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>首先我们看看插件是怎么使用在<code>webpack</code>上的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</div><div class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">entry</span>: <span class="string">'...'</span>,</div><div class="line">  <span class="attr">plugins</span>: [</div><div class="line">    <span class="keyword">new</span> CleanWebpackPlugin(),</div><div class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</div><div class="line">      <span class="attr">filename</span>: <span class="string">'index.html'</span>,</div><div class="line">      <span class="attr">template</span>: <span class="string">'./index.html'</span>,</div><div class="line">    &#125;),</div><div class="line">  ]  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>我们经常使用的插件是长这样的，每个插件都是一个构造函数，通过<code>new</code>一个它的实例来使用。知道了插件是一个构造函数，那么我们可以推断出下面的结构<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestPlguin</span></span>&#123;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>webpack 插件由以下组成：</p>
<ul>
<li>一个 JavaScript 命名函数。</li>
<li>在插件函数的 prototype 上定义一个 apply 方法。</li>
<li>指定一个绑定到 webpack 自身的事件钩子。</li>
<li>处理 webpack 内部实例的特定数据。</li>
<li>功能完成后调用 webpack 提供的回调。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestPlguin</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>()&#123;</div><div class="line">    </div><div class="line">  &#125;</div><div class="line">  apply(compiler)&#123;</div><div class="line">    compiler.plugin(<span class="string">'webpacksEventHook'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">compilation <span class="regexp">/* 处理 webpack 内部实例的特定数据。*/</span>, callback</span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"This is an example plugin!!!"</span>);</div><div class="line"></div><div class="line">      <span class="comment">// 功能完成后调用 webpack 提供的回调。</span></div><div class="line">      callback();</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面是官网上的示例，插件一定会有<code>apply</code>方法，传递一个<code>compiler</code>参数，通过 <code>CLI</code> 或 <code>Node API</code> 传递的所有选项，创建出一个 <code>compilation</code> 实例。</p>
<p>在插件开发中最重要的两个资源就是 <code>compiler</code> 和 <code>compilation</code> 对象。理解它们的角色是扩展 <code>webpack</code> 引擎重要的第一步。</p>
<ul>
<li><code>compiler</code> 对象代表了完整的 <code>webpack</code> 环境配置。这个对象在启动 <code>webpack</code> 时被一次性建立，并配置好所有可操作的设置，包括 <code>options</code>，<code>loader</code> 和 <code>plugin</code>。当在 <code>webpack</code> 环境中应用一个插件时，插件将收到此 <code>compiler</code> 对象的引用。可以使用它来访问 <code>webpack</code> 的主环境。</li>
<li><code>compilation</code> 对象代表了一次资源版本构建。当运行 <code>webpack</code> 开发环境中间件时，每当检测到一个文件变化，就会创建一个新的 <code>compilation</code>，从而生成一组新的编译资源。一个 <code>compilation</code> 对象表现了当前的模块资源、编译生成资源、变化的文件、以及被跟踪依赖的状态信息。<code>compilation</code> 对象也提供了很多关键时机的回调，以供插件做自定义处理时选择使用。</li>
</ul>
<p><code>Compiler</code> 和 <code>Compilation</code> 的区别在于：<code>Compiler</code> 代表了整个 <code>Webpack</code> 从启动到关闭的生命周期，而 <code>Compilation</code> 只是代表了一次新的编译</p>
<h2 id="钩子"><a href="#钩子" class="headerlink" title="钩子"></a>钩子</h2><p><code>Compiler</code>和<code>Compilation</code>都有生命周期</p>
<h3 id="Compiler"><a href="#Compiler" class="headerlink" title="Compiler"></a>Compiler</h3><p>举几个例子</p>
<ol>
<li><code>entryOption</code>：在 <code>entry</code> 配置项处理过之后，执行插件</li>
<li><code>emit</code>：生成资源到 <code>output</code> 目录之前。</li>
<li><code>failed</code>：编译(compilation)失败</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestPlguin</span> </span>&#123;</div><div class="line">  ...</div><div class="line">  apply(compiler)&#123;</div><div class="line">    compiler.hooks.emit.tap(<span class="string">'MyPlugin'</span>, params =&gt; &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'我会在生成资源到 output 目录之前执行'</span>)</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的例子意思是，当<code>webpack</code>执行到最终要输出文件得时候，我在这个操作之前去打印一段话，通常是我们输出文件到<code>dist</code>文件夹之前那一步<br>如果你实现写好了这些钩子，那么<code>webpack</code>在编译的流程里都会执行上面几个钩子。想了解更多访问 <a href="https://www.webpackjs.com/api/compiler-hooks/" target="_blank" rel="external">https://www.webpackjs.com/api/compiler-hooks/</a></p>
<h3 id="Compilation"><a href="#Compilation" class="headerlink" title="Compilation"></a>Compilation</h3><p><code>Compilation</code> 模块会被 <code>Compiler</code> 用来创建新的编译（或新的构建）。<code>compilation</code>实例能够访问所有的模块和它们的依赖（大部分是循环依赖）。它会对应用程序的依赖图中所有模块进行字面上的编译(literal compilation)。在编译阶段，模块会被加载(loaded)、封存(sealed)、优化(optimized)、分块(chunked)、哈希(hashed)和重新创建(restored)</p>
<p>简单的理解就是，当编译期间文件发生各种变化的时候，我们可以通过 <code>Compilation</code> 钩子里的生命周期函数去拦截，然后做你想做的事情</p>
<p>举几个例子</p>
<ol>
<li><code>buildModule</code>：在模块构建开始之前触发。</li>
<li><code>optimize</code>：优化阶段开始时触发。</li>
<li><code>beforeChunkAssets</code>：在创建 chunk 资源(asset)之前</li>
<li><code>additionalAssets</code>：为编译(compilation)创建附加资源(asset)</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestPlguin</span> </span>&#123;</div><div class="line">  ...</div><div class="line">  apply(compiler)&#123;</div><div class="line">    compiler.hooks.emit.tap(<span class="string">'MyPlugin'</span>, compilation =&gt; &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'我会在生成资源到 output 目录之前执行'</span>)</div><div class="line">      <span class="comment">// 以下开始调用compilation钩子，当模块处在优化阶段开始时会执行以下回调</span></div><div class="line">      compilation.plugin(<span class="string">"optimize"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"我在优化阶段开始时触发了"</span>);</div><div class="line">      &#125;);</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>想了解更多访问 <a href="https://www.webpackjs.com/api/compilation-hooks/" target="_blank" rel="external">https://www.webpackjs.com/api/compilation-hooks/</a></p>
<h2 id="编写插件"><a href="#编写插件" class="headerlink" title="编写插件"></a>编写插件</h2><p>我们现在假定有一个这么个需求：我需要在打包的时候把一个外部的<code>js</code>文件导入到项目中，并且在<code>index.html</code>引入，你可能会问了，那你直接在主入口引入不就行了吗？确实，感觉做这件事情很没有意义，但是我就要这个需求，原因在于我在使用<code>DllPlugin</code>的时候，提前生成好了一堆文件，这些文件是不会在正常打包的过程引入的，所以我需要在最后打包生成文件之前把他们导入到<code>dist</code>文件夹下，并且引入他们。</p>
<p>那么我们现在开始编写，先写个简单的，一个文件的导入，抛砖引玉。</p>
<p>首先我们思考一下🤔，这个插件得有配置呀，和<code>html-webpack-plugin</code>一样可以传参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">plugin</span>: [</div><div class="line">    <span class="keyword">new</span> TestPlugin(&#123;</div><div class="line">      <span class="attr">filename</span>: <span class="string">'test.js'</span>,</div><div class="line">      <span class="attr">template</span>: path.resolve(__dirname, <span class="string">'./otherFile/test.js'</span>),</div><div class="line">    &#125;),</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们在项目里新建文件夹<code>plugin</code>，文件夹下新建<code>TestPlugin.js</code>。然后在项目里再新建文件夹<code>otherFile</code>，文件夹下新建<code>test.js</code>，这里文件内容随便</p>
<p>上面我们说了需要传递参数，所以有了下面这段<code>js</code>，<code>options</code>是我们传递的对象，<code>apply</code>就不多说了，每个插件都有这个方法，然后我们把这个插件暴露出来<br><code>TestPlugin.js</code><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestPlugin</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(options = &#123;&#125;) &#123;</div><div class="line">    <span class="keyword">this</span>.options = options;</div><div class="line">  &#125;</div><div class="line">  apply(compiler) &#123;</div><div class="line">    </div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">module</span>.exports = TestPlugin;</div></pre></td></tr></table></figure></p>
<p>接下来我们开始写内部方法</p>
<p>我们又要思考一下，我需要在打包完成之前做这个操作，那么<code>compiler</code>钩子的生命周期函数是哪个呢？没错，是emit，之前讲过，于是乎有了下面这段js<br><code>TestPlugin.js</code><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestPlugin</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(options = &#123;&#125;) &#123;</div><div class="line">    <span class="keyword">this</span>.options = options;</div><div class="line">  &#125;</div><div class="line">  apply(compiler) &#123;</div><div class="line">    compiler.hooks.emit.tapAsync(<span class="string">'TestPlugin'</span>, (compilation, callback) =&gt; &#123;</div><div class="line">      callback();</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">module</span>.exports = TestPlugin;</div></pre></td></tr></table></figure></p>
<p>上面代码，我们注册了一个<code>emit</code>，<code>webpack</code>在执行打包的最后，会触发这个内部得方法</p>
<p>接下来就是对文件得处理了，需要用到<code>compilation</code></p>
<p>我们思考一下，怎么处理文件？我们需要用到<code>compilation</code>下的<code>asset</code>，来处理资源文件。<br>我们先把文件导入到<code>dist</code>文件夹下，于是乎有了下面这段js<br><code>TestPlugin.js</code><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestPlugin</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(options = &#123;&#125;) &#123;</div><div class="line">    <span class="keyword">this</span>.options = options;</div><div class="line">  &#125;</div><div class="line">  apply(compiler) &#123;</div><div class="line">    compiler.hooks.emit.tapAsync(<span class="string">'TestPlugin'</span>, (compilation, callback) =&gt; &#123;</div><div class="line"></div><div class="line">      <span class="keyword">let</span> template = fs.readFileSync(<span class="keyword">this</span>.options.template, <span class="string">'UTF-8'</span>);</div><div class="line">      compilation.assets[<span class="keyword">this</span>.options.filename || <span class="string">'test.js'</span>] = &#123;</div><div class="line">        <span class="attr">source</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">          <span class="keyword">return</span> template;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">size</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">          <span class="keyword">return</span> template.length;</div><div class="line">        &#125;,</div><div class="line">      &#125;;</div><div class="line"></div><div class="line">      callback();</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">module</span>.exports = TestPlugin;</div></pre></td></tr></table></figure></p>
<p>上面代码，我们读取了插件实例传递过来的参数<code>filename</code>，调用<code>compilation</code>钩子下的<code>assets</code>，这个<code>assets</code>是一个键值对的形式，<code>key</code>是资源文件得名称，<code>value</code>是资源文件的内容，也是一个对象。执行<code>compilation.assets</code>，如果键值是一个已经存在的文件，<code>webpack</code>不会帮你重新创建，你可以去尝试修改一个文件</p>
<p>好了，文件导入了，但是我们还需要在<code>index.html</code>去引入这个文件，思考一下，这个<code>index.html</code>是已经存在的，我们同样可以使用<code>compilation.assets</code>去修改它的文件内容，所以有了下面这段<code>js</code></p>
<p><code>TestPlugin.js</code><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestPlugin</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(options = &#123;&#125;) &#123;</div><div class="line">    <span class="keyword">this</span>.options = options;</div><div class="line">  &#125;</div><div class="line">  apply(compiler) &#123;</div><div class="line">    compiler.hooks.emit.tapAsync(<span class="string">'TestPlugin'</span>, (compilation, callback) =&gt; &#123;</div><div class="line"></div><div class="line">      <span class="keyword">let</span> template = fs.readFileSync(<span class="keyword">this</span>.options.template, <span class="string">'UTF-8'</span>);</div><div class="line">      compilation.assets[<span class="keyword">this</span>.options.filename || <span class="string">'test.js'</span>] = &#123;</div><div class="line">        <span class="attr">source</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">          <span class="keyword">return</span> template;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">size</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">          <span class="keyword">return</span> template.length;</div><div class="line">        &#125;,</div><div class="line">      &#125;;</div><div class="line">      <span class="comment">// 这里是新加的</span></div><div class="line">      <span class="keyword">let</span> source = compilation.assets[<span class="string">'index.html'</span>].source();</div><div class="line">      source = source.replace(</div><div class="line">        <span class="regexp">/&lt;\/(.*?)&gt;(.*?)&lt;\/body&gt;$/m</span>,</div><div class="line">        <span class="string">`&lt;/$1&gt;&lt;script src="<span class="subst">$&#123;<span class="keyword">this</span>.options.filename ||</span></span></div><div class="line">          <span class="string">'test.js'</span>&#125;"&gt;&lt;/script&gt;&lt;/body&gt;`,</div><div class="line">      );</div><div class="line"></div><div class="line">      compilation.assets[<span class="string">'index.html'</span>] = &#123;</div><div class="line">        <span class="attr">source</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">          <span class="keyword">return</span> source;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">size</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">          <span class="keyword">return</span> source.length;</div><div class="line">        &#125;,</div><div class="line">      &#125;;</div><div class="line"></div><div class="line">      callback();</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">module</span>.exports = TestPlugin;</div></pre></td></tr></table></figure></p>
<p>我们通过修改文件的<code>source</code>，把一段<code>script</code>插入到<code>body</code>之前来修改文件</p>
<p>插件写好了，我们在<code>webpack</code>去引入吧</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</div><div class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</div><div class="line"><span class="keyword">const</span> TestPlugin = <span class="built_in">require</span>(<span class="string">'./plugin/TestPlugin'</span>);</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">mode</span>: <span class="string">'production'</span>,</div><div class="line">  <span class="attr">entry</span>: &#123;</div><div class="line">    <span class="attr">app</span>: <span class="string">'./src/index.js'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">filename</span>: <span class="string">'[name].[hash].js'</span>,</div><div class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">'dist/'</span>),</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">plugins</span>: [</div><div class="line">    <span class="keyword">new</span> CleanWebpackPlugin(),</div><div class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123; <span class="attr">template</span>: <span class="string">'index.html'</span> &#125;),</div><div class="line">    <span class="keyword">new</span> TestPlugin(&#123;</div><div class="line">      <span class="attr">filename</span>: <span class="string">'test.js'</span>,</div><div class="line">      <span class="attr">template</span>: path.resolve(__dirname, <span class="string">'./otherFile/test.js'</span>),</div><div class="line">    &#125;),</div><div class="line">  ],</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>打包运行一下，看看效果吧</p>
<p>插件代码仓库：<a href="https://github.com/wclimb/webpack-plugin" target="_blank" rel="external">https://github.com/wclimb/webpack-plugin</a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>今天我们学习了一如何编写一个插件，当然只是简单的操作了，可以思考一下，要实现<code>clean-webpack-plugin</code>或者<code>html-webpack-plugin</code>插件，我们该怎么做？</p>
<p>本文地址 <a href="http://www.wclimb.site/2019/06/21/webpack系列之编写一个plugin/">webpack系列之编写一个plugin</a></p>
]]></content>
      <categories>
        <category>javascript</category>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>原创</tag>
        <tag>javascript</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>编写一个守护进程</title>
    <url>/2020/03/08/write-daemon/</url>
    <content><![CDATA[<h2 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h2><p>我们编写<code>node</code>程序的时候，立马会去执行它，如下所示</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// app.js</span></div><div class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line">http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</div><div class="line">  res.end(<span class="string">"hello world"</span>);</div><div class="line">&#125;).listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure>
<p>执行下面命令运行<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">node app.js</div></pre></td></tr></table></figure></p>
<p>我们接着访问<code>3000</code>端口，貌似没毛病。但是当你退出命令行窗口或者 <code>ctrl+c</code> 终止了程序，再去访问这个程序发现它炸了！你很不解，开始抱怨上天为什么这样对你，然后。。。额，算了，玩笑到此为止，那么怎么才能让它再后台运行呢？<br><a id="more"></a></p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>市面上也有很多进程守护工具，比如</p>
<ul>
<li><code>pm2</code></li>
<li><code>forever</code></li>
</ul>
<p>当然如果我们使用<code>docker</code>，就不需要这些了</p>
<h2 id="编写"><a href="#编写" class="headerlink" title="编写"></a>编写</h2><p>编写之前想运行流程</p>
<ol>
<li>创建一个父进程</li>
<li>父进程下面构建出一个子进程</li>
<li>父进程退出</li>
</ol>
<p>第一个流程没问题，第二个，我们怎么创建一个子进程呢？这里我们需要借助<code>child_process</code>，名字就很明显了，子进程。我们可以借助方法 <code>spawn</code> 来实现，用得比较多的还有<code>exec</code>方法（可以执行<code>shell</code>命令）<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> spawn = <span class="built_in">require</span>(<span class="string">"child_process"</span>).spawn;</div><div class="line"><span class="keyword">const</span> child = spawn(<span class="string">"node"</span>, [<span class="string">"app.js"</span>], &#123;</div><div class="line">  <span class="attr">detached</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">stdio</span>: <span class="string">"ignore"</span></div><div class="line">&#125;);</div><div class="line">child.on(<span class="string">"close"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">code</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"close"</span>, code);</div><div class="line">&#125;);</div><div class="line">child.on(<span class="string">"error"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">code</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"error"</span>, code);</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(process.pid, child.pid);</div></pre></td></tr></table></figure></p>
<p><img src="/img/daemon-1.jpg" alt=""><br>从上图我们看到，开启了两个进程，<code>38715</code>是父进程，<code>38716</code>是子进程，至此我们实现了步骤二</p>
<p>接着我们实现步骤三，往下增加下面一段代码<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">child.unref();</div><div class="line"><span class="comment">//or</span></div><div class="line">process.exit()</div></pre></td></tr></table></figure></p>
<p>现在我们可以打开浏览器查看3000端口是否依然可以访问正常</p>
<h2 id="扩展-使用cluster"><a href="#扩展-使用cluster" class="headerlink" title="扩展-使用cluster"></a>扩展-使用cluster</h2><p>上面我们只开启了一个子进程，没有充分利用多核系统，尽可能的压榨机器。我们所熟知的<code>pm2</code>就是基于这个来实现的</p>
<p>下面是官网的一个示例，我们可以把之前的<code>app.js</code>替换为下面的代码<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> cluster = <span class="built_in">require</span>(<span class="string">'cluster'</span>);</div><div class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">const</span> numCPUs = <span class="built_in">require</span>(<span class="string">'os'</span>).cpus().length;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (cluster.isMaster) &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`主进程 <span class="subst">$&#123;process.pid&#125;</span> 正在运行`</span>);</div><div class="line"></div><div class="line">  <span class="comment">// 衍生工作进程。</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numCPUs; i++) &#123;</div><div class="line">    cluster.fork();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  cluster.on(<span class="string">'exit'</span>, (worker, code, signal) =&gt; &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`工作进程 <span class="subst">$&#123;worker.process.pid&#125;</span> 已退出`</span>);</div><div class="line">  &#125;);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="comment">// 工作进程可以共享任何 TCP 连接。</span></div><div class="line">  <span class="comment">// 在本例子中，共享的是 HTTP 服务器。</span></div><div class="line">  http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</div><div class="line">    res.writeHead(<span class="number">200</span>);</div><div class="line">    res.end(<span class="string">'你好世界\n'</span>);</div><div class="line">  &#125;).listen(<span class="number">8000</span>);</div><div class="line"></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`工作进程 <span class="subst">$&#123;process.pid&#125;</span> 已启动`</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="/img/daemon-2.jpg" alt=""><br>可以看到我们又开启了多个子进程，来达到负载均衡，还有进程间通信相关的知识就不往下说了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此我们实现了一个最最简单的守护进程，然而好像并没有什么用？感兴趣的可以去看 <code>pm2</code> 的源码，不过就是有点多。可以去看看 <code>egg-cluster</code> 的实现，关于这方面的知识还有很多需要学习的地方，行了，又有两车砖来了，今天先到这，希望下一篇可以深入分享</p>
<p>本文地址 <a href="http://www.wclimb.site/2020/03/08/write-daemon/">编写一个守护进程</a></p>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>原创</tag>
        <tag>javascript</tag>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack系列之输出文件分析</title>
    <url>/2019/06/19/webpack%E7%B3%BB%E5%88%97%E4%B9%8B%E8%BE%93%E5%87%BA%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>上一篇文章我们讲了如何使用 <code>webpack</code>，执行打包会在 <code>dist</code> 生成一堆文件，那么 <code>webpack</code> 输出的文件里面到底长啥样呢？用过的人100%看过，大部分的还是压缩混淆后的代码，一般我们不会去关心它，只管当前持续运行正常就行了。今天我们来看看 <code>webpack</code> 输出的文件</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>开发环境 <code>webpack: 4.34.0</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; npm init -y</div><div class="line">&gt; cnpm i webpack webpack-cli -D</div></pre></td></tr></table></figure>
<h3 id="新建文件"><a href="#新建文件" class="headerlink" title="新建文件"></a>新建文件</h3><p>新建文件 <code>webpack.config.js</code><br>新建文件夹 <code>src</code><br><code>webpack.config.js</code><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">devtool</span>: <span class="string">'inline-source-map'</span>,</div><div class="line">  <span class="attr">mode</span>: <span class="string">'development'</span>,</div><div class="line">  <span class="attr">entry</span>: <span class="string">'./src/main.js'</span>,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">path</span>: path.resolve(__dirname, <span class="string">'./dist'</span>),</div><div class="line">    <span class="attr">filename</span>: <span class="string">'bundle.js'</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p><code>src</code> 文件夹下，新增三个文件 <code>main.js</code>（入口文件） <code>a.js</code> <code>b.js</code><br><code>main.js</code><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; A1, A2 &#125; <span class="keyword">from</span> <span class="string">'./a'</span>;</div><div class="line"><span class="keyword">import</span> B <span class="keyword">from</span> <span class="string">'./b'</span>;</div><div class="line"><span class="built_in">console</span>.log(A1, A2);</div><div class="line">B();</div></pre></td></tr></table></figure></p>
<p>a.js<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> A1 = <span class="string">'a1'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> A2 = <span class="string">'a2'</span>;</div></pre></td></tr></table></figure></p>
<p>b.js<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'b'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npx webpack --config webpack.config.js</div></pre></td></tr></table></figure>
<p>然后就会在 <code>dist</code> 下生成一个 <code>bundle.js</code> 文件，接下来开始分析文件</p>
<h2 id="文件分析"><a href="#文件分析" class="headerlink" title="文件分析"></a>文件分析</h2><p>首先先来看看大致的结果<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">modules</span>) </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</div><div class="line">    ...</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">  return __webpack_require__(__webpack_require__.s = <span class="string">"./src/main.js"</span>);</div><div class="line">&#125;)(&#123;</div><div class="line">  <span class="string">"./src/a.js"</span>: (<span class="function"><span class="keyword">function</span>(<span class="params">module, __webpack_exports__, __webpack_require__</span>) </span>&#123;&#125;</div><div class="line">  <span class="string">"./src/b.js"</span>: (<span class="function"><span class="keyword">function</span>(<span class="params">module, __webpack_exports__, __webpack_require__</span>) </span>&#123;&#125;</div><div class="line">  <span class="string">"./src/main.js"</span>: (<span class="function"><span class="keyword">function</span>(<span class="params">module, __webpack_exports__, __webpack_require__</span>) </span>&#123;&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>从上面我们可以看到一个立即执行的函数，传递了一个对象，也就是 <code>modules</code> 的值，最终执行了 <code>__webpack_require__</code> 函数，执行的这个方法其实是我们在 <code>webpack</code> 里面设置的 <code>entry: ./src/main.js</code>，对象里还有<code>key</code>，<code>./src/a.js</code> 、<code>./src/b.js</code>，也就是我们的 <code>a.js</code> 和 <code>b.js</code></p>
<p>我们知道最开始执行了 <code>__webpack_require__(__webpack_require__.s = &quot;./src/main.js&quot;)</code> 方法，也就是 <code>__webpack_require__(&quot;./src/main.js&quot;)</code>，那么这个 <code>__webpack_require__</code> 方法又做了什么的</p>
<p>原始的 <code>__webpack_require__</code> 方法<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// The module cache</span></div><div class="line"><span class="keyword">var</span> installedModules = &#123;&#125;;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</div><div class="line">  <span class="comment">// Check if module is in cache</span></div><div class="line">  <span class="keyword">if</span>(installedModules[moduleId]) &#123;</div><div class="line">    <span class="keyword">return</span> installedModules[moduleId].exports;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// Create a new module (and put it into the cache)</span></div><div class="line">  <span class="keyword">var</span> <span class="built_in">module</span> = installedModules[moduleId] = &#123;</div><div class="line">    <span class="attr">i</span>: moduleId,</div><div class="line">    <span class="attr">l</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">exports</span>: &#123;&#125;</div><div class="line">  &#125;;</div><div class="line">  <span class="comment">// Execute the module function</span></div><div class="line">  modules[moduleId].call(<span class="built_in">module</span>.exports, <span class="built_in">module</span>, <span class="built_in">module</span>.exports, __webpack_require__);</div><div class="line">  <span class="comment">// Flag the module as loaded</span></div><div class="line">  <span class="built_in">module</span>.l = <span class="literal">true</span>;</div><div class="line">  <span class="comment">// Return the exports of the module</span></div><div class="line">  <span class="keyword">return</span> <span class="built_in">module</span>.exports;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在我在这上面写上注释<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 模块缓存</span></div><div class="line"><span class="keyword">var</span> installedModules = &#123;&#125;;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</div><div class="line">  <span class="comment">// 首先全局有一个模块对象，最先判断是否存在这个模块，是否做过相应操作，如果有则直接返回当前模块的一个对象，这里的exports其实就是一个对象</span></div><div class="line">  <span class="keyword">if</span>(installedModules[moduleId]) &#123;</div><div class="line">    <span class="keyword">return</span> installedModules[moduleId].exports;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 这里就直接创建了一个模块，并且缓存在全局的模块中，这里重点关注这个exports，</span></div><div class="line">  <span class="comment">// i 指的是模块的名称，比如 './src/main.js'</span></div><div class="line">  <span class="comment">// l 意思是当前模块是否加载</span></div><div class="line">  <span class="comment">// exports 就是返回出去的对象内容</span></div><div class="line">  <span class="keyword">var</span> <span class="built_in">module</span> = installedModules[moduleId] = &#123;</div><div class="line">    <span class="attr">i</span>: moduleId,</div><div class="line">    <span class="attr">l</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">exports</span>: &#123;&#125;</div><div class="line">  &#125;;</div><div class="line">  <span class="comment">// 到这里就开始通过key去执行 modules（就是刚开始立即执行函数传过来的对象）对象的方法</span></div><div class="line">  <span class="comment">// 然后使用call来指向 对象的方法 的this，并且把 module, module.exports, __webpack_require__ 三个值传过去，</span></div><div class="line">  <span class="comment">// 这里先做预告，module这个参数传过去其实是没有用到的，主要使用 module.exports 对象, 以及__webpack_require__方法</span></div><div class="line">  modules[moduleId].call(<span class="built_in">module</span>.exports, <span class="built_in">module</span>, <span class="built_in">module</span>.exports, __webpack_require__);</div><div class="line">  <span class="comment">// 上面说到有一个参数 l，到这里当前模块已经加载</span></div><div class="line">  <span class="built_in">module</span>.l = <span class="literal">true</span>;</div><div class="line">  <span class="comment">// 最后把module.exports这个模块返回出去</span></div><div class="line">  <span class="keyword">return</span> <span class="built_in">module</span>.exports;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接下来我们看看主入口 <code>./src/main.js</code> 这个 <code>key</code> 的值的内容</p>
<p><code>./src/main.js</code>，原内容是这样的，接下来来解释一下<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"./src/main.js"</span>: (<span class="function"><span class="keyword">function</span>(<span class="params">module, __webpack_exports__, __webpack_require__</span>) </span>&#123;</div><div class="line"><span class="meta">    "use strict"</span>;</div><div class="line">    __webpack_require__.r(__webpack_exports__);</div><div class="line">    <span class="comment">/* harmony import */</span> <span class="keyword">var</span> _a__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(<span class="comment">/*! ./a */</span> <span class="string">"./src/a.js"</span>);</div><div class="line">    <span class="comment">/* harmony import */</span> <span class="keyword">var</span> _b__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(<span class="comment">/*! ./b */</span> <span class="string">"./src/b.js"</span>);</div><div class="line"></div><div class="line">    <span class="built_in">console</span>.log(_a__WEBPACK_IMPORTED_MODULE_0__[<span class="string">"A1"</span>], _a__WEBPACK_IMPORTED_MODULE_0__[<span class="string">"A2"</span>]);</div><div class="line">    <span class="built_in">Object</span>(_b__WEBPACK_IMPORTED_MODULE_1__[<span class="string">"default"</span>])();</div><div class="line"></div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"./src/main.js"</span>: (<span class="function"><span class="keyword">function</span>(<span class="params">module, __webpack_exports__, __webpack_require__</span>) </span>&#123;</div><div class="line">    <span class="comment">// 上面我们说到 __webpack_require__ 方法内部会执行 modules[moduleId].call，并传递了三个参数，那么他执行的方法就是这个内部方法</span></div><div class="line"></div><div class="line">    <span class="comment">// 这段代码可以先忽略，在当前项目没有作用</span></div><div class="line">    __webpack_require__.r(__webpack_exports__);</div><div class="line"></div><div class="line">    <span class="comment">// 我们看到下面有两段__webpack_require__函数代码的执行，你可以回顾一下main.js的内容，我们是不是做了 import &#123; A1, A2 &#125; from './a';并且 console.log(A1, A2);</span></div><div class="line">    <span class="comment">/* harmony import */</span> <span class="keyword">var</span> _a__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(<span class="comment">/*! ./a */</span> <span class="string">"./src/a.js"</span>);</div><div class="line">    <span class="comment">/* harmony import */</span> <span class="keyword">var</span> _b__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(<span class="comment">/*! ./b */</span> <span class="string">"./src/b.js"</span>);</div><div class="line">    <span class="built_in">console</span>.log(_a__WEBPACK_IMPORTED_MODULE_0__[<span class="string">"A1"</span>], _a__WEBPACK_IMPORTED_MODULE_0__[<span class="string">"A2"</span>]);</div><div class="line"></div><div class="line">    <span class="comment">// 这段代码其实是 import B from './b'; B();代码的执行</span></div><div class="line">    <span class="built_in">Object</span>(_b__WEBPACK_IMPORTED_MODULE_1__[<span class="string">"default"</span>])();</div><div class="line"></div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>好了，现在来分析一下 <code>__webpack_require__(&quot;./src/a.js&quot;)</code> 做了哪些操作，我们先来看看 模块<code>./src/a.js</code> 的内容<br><code>./src/a.js</code><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"./src/a.js"</span>: (<span class="function"><span class="keyword">function</span>(<span class="params">module, __webpack_exports__, __webpack_require__</span>) </span>&#123;</div><div class="line">      __webpack_require__.r(__webpack_exports__);</div><div class="line">      <span class="comment">/* harmony export (binding) */</span> __webpack_require__.d(__webpack_exports__, <span class="string">"A1"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> A1; &#125;);</div><div class="line">      <span class="comment">/* harmony export (binding) */</span> __webpack_require__.d(__webpack_exports__, <span class="string">"A2"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> A2; &#125;);</div><div class="line">      <span class="keyword">const</span> A1 = <span class="string">'a1'</span>;</div><div class="line">      <span class="keyword">const</span> A2 = <span class="string">'a2'</span>;</div><div class="line"> &#125;),</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>代码内容很简单，首先 <code>__webpack_require__(&quot;./src/a.js&quot;)</code> 执行之后，会创建一个模块，然后去执行模块 <code>./src/a.js</code> 内部得方法，也是是上面这段，执行完成之后最终会把 <code>module.exports</code> 返回处理，<br>那么 <code>module.exports</code> 这个是什么内容呢？<br>看看 <strong>webpack_require</strong> 内部<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="built_in">module</span> = installedModules[moduleId] = &#123;</div><div class="line">    <span class="attr">i</span>: moduleId,</div><div class="line">    <span class="attr">l</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">exports</span>: &#123;&#125;</div><div class="line">  &#125;;</div><div class="line">  <span class="comment">// Execute the module function</span></div><div class="line">  modules[moduleId].call(<span class="built_in">module</span>.exports, <span class="built_in">module</span>, <span class="built_in">module</span>.exports, __webpack_require__);</div><div class="line">  <span class="keyword">return</span> <span class="built_in">module</span>.exports</div></pre></td></tr></table></figure></p>
<p>其实就是我们创建模块时的 <code>exports</code>，然后执行到了模块 <code>./src/a.js</code> 内部得方法，它内部方法关键的地方在于又调用了 <code>__webpack_require__.d</code> 方法</p>
<p><code>__webpack_require__.d</code><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">__webpack_require__.d = <span class="function"><span class="keyword">function</span>(<span class="params">exports, name, getter</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span>(!__webpack_require__.o(exports, name)) &#123;</div><div class="line">    <span class="built_in">Object</span>.defineProperty(exports, name, &#123; <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">get</span>: getter &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>执行 <code>__webpack_require__.d(__webpack_exports__, &quot;A1&quot;, function() { return A1; })</code>; 可以看出来他给 <code>module.exports</code> 定义了一个 <code>key</code> 值 <code>&quot;key&quot;</code>，然后取值 <code>get</code> 的时候返回的是 A1(也就是a1)</p>
<p>所以最终 <code>return module.exports</code> 的值为 <code>{A1: &#39;a1&#39;}</code>，</p>
<p>我们回到 <code>./src/main.js</code> 模块，所以这段代码：<code>var _a__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./a */ &quot;./src/a.js&quot;)</code>;</p>
<p> <code>_a__WEBPACK_IMPORTED_MODULE_0__</code> 其实就是等于 <code>{A1: &#39;a1&#39;}</code> <code>console.log(_a__WEBPACK_IMPORTED_MODULE_0__[&quot;A1&quot;])</code>，取值为 <code>a1</code>，<code>A2</code> 同理</p>
<p><img src="/img/webpack-bundle-a-js.jpg" alt="bundle-a-js"></p>
<p> 接下来我们看看模块 <code>./src/b.js</code>，在主模块它做了什么呢？看看 <code>./src/main.js</code><br> <figure class="highlight js"><table><tr><td class="code"><pre><div class="line">...</div><div class="line">var _b__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(<span class="comment">/*! ./b */</span> <span class="string">"./src/b.js"</span>);</div><div class="line"><span class="built_in">Object</span>(_b__WEBPACK_IMPORTED_MODULE_1__[<span class="string">"default"</span>])();</div></pre></td></tr></table></figure></p>
<p> 看上面模块 <code>./src/b.js</code> 在主模块的执行第一段代码和之前介绍的一样，第二段代码直接执行了一个方法，这里我们可以猜测出 <code>_b__WEBPACK_IMPORTED_MODULE_1__</code> 其实就是一个对象，访问了它的 <code>key: default</code><br>然后它的key值其实是一个函数，最后执行了这个函数</p>
<p>同理我们可以看看模块 <code>./src/b.js</code> 内部的方法，以及我们在 <code>src</code> 文件夹下的 <code>b.js</code> 是怎么写的<br>模块 <code>./src/b.js</code><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"./src/b.js"</span>: (<span class="function"><span class="keyword">function</span>(<span class="params">module, __webpack_exports__, __webpack_require__</span>) </span>&#123;</div><div class="line">    __webpack_require__.r(__webpack_exports__);</div><div class="line">    <span class="comment">/* harmony default export */</span> __webpack_exports__[<span class="string">"default"</span>] = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'b'</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>b.js</code><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'b'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>从我们源代码看出，我们是直接导出了一个方法，内部执行了打印字符串<code>b</code>，然后再来看看 <code>webapck</code> 的源码部分，<code>__webpack_require__.r(__webpack_exports__)</code>; 这段可以忽略，解释一下，其实这段代码在对象里定义了一个 <code>__esModule: true</code>，接着看下面一段，我们从之前讲的知道知道 <code>__webpack_exports__</code> 其实就是一个单纯的空对象（其实不是，执行了 <code>__webpack_require__.r(__webpack_exports__</code> )就变成了 <code>{__esModule: true}</code>)，然后它又在对象里增加了一个 <code>default</code> 属性，然后把一个方法赋值给它(其实就是我们打包之前写的一个方法)，最终在主入口里执行的模块 <code>var _b__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./b */ &quot;./src/b.js&quot;)</code>；其实就等于 <code>{&quot;default&quot;: function{}}</code>，然后下一步执行访问对象 <code>default</code> 的值去执行函数</p>
<p><img src="/img/webpack-bundle-b-js.jpg" alt="bundle-b-js"></p>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>可能现在你可能会思考🤔，通过上面的比较可以得出一个结论</p>
<p>通过 <code>export</code> 出来，如果 <code>import {a,b,c} from &#39;..&#39;</code>，打包出来的代码执行简单操作之后（执行 <code>__webpack_require__</code> 函数）首先会是一个对象，对象会是 <code>{a: ..., b: ..., c: ...}</code></p>
<p>同过 <code>export default</code> 出来，如果 <code>import a from &#39;..&#39;</code>，打包处理的代码执行简单操作之后（执行 <code>__webpack_require__</code> 函数）首先会是一个对象，然后会往对象里添加一个default的key，类似 <code>{default: ...}</code></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整个过程还是挺绕的，你可以自己去 <code>debugger</code> 看看他的执行过程，应该就明白得差不多了，今天就讲了这些吧</p>
<p>本文地址 <a href="http://www.wclimb.site/2019/06/19/webpack%E7%B3%BB%E5%88%97%E4%B9%8B%E8%BE%93%E5%87%BA%E6%96%87%E4%BB%B6%E5%88%86%E6%9E%90/">webpack系列之输出文件分析</a></p>
]]></content>
      <categories>
        <category>javascript</category>
        <category>webpack</category>
      </categories>
      <tags>
        <tag>原创</tag>
        <tag>javascript</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>编写一个较为强大的Vue</title>
    <url>/2020/05/26/write-euv/</url>
    <content><![CDATA[<p><strong>编写一个较为强大的Vue，支持虚拟DOM、diff更新以及基本的API，项目地址：<a href="https://github.com/wclimb/euv" target="_blank" rel="external">https://github.com/wclimb/euv</a></strong><br><strong>demo地址：<a href="http://www.wclimb.site/euv/">http://www.wclimb.site/euv/</a></strong></p>
<h2 id="euv"><a href="#euv" class="headerlink" title="euv"></a>euv</h2><p>why euv? because:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="string">'vue'</span>.split(<span class="string">''</span>).sort().join(<span class="string">''</span>) <span class="comment">// euv</span></div></pre></td></tr></table></figure></p>
<p>source:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="string">'node'</span>.split(<span class="string">''</span>).sort().join(<span class="string">''</span>) <span class="comment">// deno</span></div></pre></td></tr></table></figure></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p>安装<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git clone https://github.com/wclimb/euv.git</div><div class="line">cd euv</div><div class="line">npm install</div></pre></td></tr></table></figure></p>
<p>运行<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npm run dev</div></pre></td></tr></table></figure></p>
<h2 id="目前支持功能"><a href="#目前支持功能" class="headerlink" title="目前支持功能"></a>目前支持功能</h2><ul>
<li>✅ <code>虚拟DOM</code></li>
<li>✅ <code>Diff更新</code></li>
<li>✅ <code>{{data}}</code> or <code>{{data + 'test'}}</code> or <code>{{fn(a)}}</code></li>
<li>✅ <code>v-for</code> // <code>v-for=&quot;(item, index) in list&quot;</code> or <code>v-for=&quot;(item, index) in 10&quot;</code> or <code>v-for=&quot;(item, index) in &#39;string&#39;&quot;</code></li>
<li>✅ <code>v-if</code> <code>v-else-if</code> <code>v-else</code></li>
<li>✅ <code>v-show</code></li>
<li>✅ <code>v-html</code></li>
<li>✅ <code>v-model</code></li>
<li>✅  <code>@click</code> <code>v-on:click</code> 事件(支持绑定其他事件) <code>@click=&quot;fn(&#39;a&#39;,$event)&quot;</code> <code>@click=&quot;fn&quot;</code> <code>@click=&quot;show = false&quot;</code> <code>@click=&quot;function(){console.log(1)}&quot;</code></li>
<li>✅ <code>methods</code> 方法</li>
<li>✅ <code>computed</code> 计算属性</li>
<li>✅ <code>watch</code> 监听</li>
<li>✅ <code>beforeCreate</code>、<code>created</code>、<code>beforeMount</code>、<code>mounted</code>、<code>beforeUpdate</code>、<code>updated</code></li>
<li>✅ <code>:class</code></li>
<li>✅ <code>:style</code></li>
<li>✅ <code>$nextTick</code></li>
</ul>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p><code>虚拟dom</code> 不懂的可以看看我之前发的文章(相关代码相比现在有部分改动)：<a href="http://www.wclimb.site/2020/03/19/simple-virtual-dom/">http://www.wclimb.site/2020/03/19/simple-virtual-dom/</a></p>
]]></content>
      <categories>
        <category>javascript</category>
        <category>vue</category>
      </categories>
      <tags>
        <tag>原创</tag>
        <tag>javascript</tag>
        <tag>vue</tag>
        <tag>源码</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Vue2.js + Node.js 搭建一个小型的全栈项目</title>
    <url>/2017/09/08/%E4%BD%BF%E7%94%A8-Vue2-js-Node-js-%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%B0%8F%E5%9E%8B%E7%9A%84%E5%85%A8%E6%A0%88%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>由于最近公司业务不是很忙，空闲时间比较多，于是就在纠结Vue.js（之前就学习过）和Node.js先专研哪个比较好，最终选择了先玩玩Node.js。经过一段时间的学习，就有了教程 <a href="http://www.wclimb.site/2017/07/12/Node-Koa2-Mysql-%E6%90%AD%E5%BB%BA%E7%AE%80%E6%98%93%E5%8D%9A%E5%AE%A2/">Node+Koa2+Mysql 搭建简易博客</a>  <a href="https://github.com/wclimb/Koa2-blog" target="_blank" rel="external">GitHub地址</a>，想要了解的可以先看看，个人水平有限，希望可以帮到你。<br>大概过来一个多月，我决定两路开工。使用Node.js给前端写接口，配备后台管理功能，先把后台搭建好。大概几天过后，后台一些简单的功能实现后，就开始用Vue.js开始搭建前台，也一直在想做点什么比较好，于是就做了个豆瓣评分类似的项目。</p>
<blockquote>
<p>前端项目地址 <a href="https://github.com/wclimb/vue-video" target="_blank" rel="external">https://github.com/wclimb/vue-video</a><br>前端预览 <a href="http://video.wclimb.site" target="_blank" rel="external">http://video.wclimb.site</a></p>
<p>后端项目地址 <a href="https://github.com/wclimb/video-admin" target="_blank" rel="external">https://github.com/wclimb/video-admin</a><br>后台管理 <a href="http://vue.wclimb.site" target="_blank" rel="external">http://vue.wclimb.site</a></p>
<p>API接口地址 <a href="https://github.com/wclimb/video-admin/blob/master/API.md" target="_blank" rel="external">https://github.com/wclimb/video-admin/blob/master/API.md</a></p>
</blockquote>
<h2 id="技术栈-Vue2-js-Node-js-全栈项目"><a href="#技术栈-Vue2-js-Node-js-全栈项目" class="headerlink" title="技术栈(Vue2.js + Node.js 全栈项目)"></a>技术栈(Vue2.js + Node.js 全栈项目)</h2><blockquote>
<p>由于页面不是很多，vuex用的不多，关键掌握怎么实现就好了</p>
</blockquote>
<p><code>vue2</code> + <code>vuex</code> + <code>vue-router</code> + <code>webpack</code> + <code>fetch</code> + <code>sass</code> + <code>flex</code> + <code>svg</code> + <code>阿里字体图标</code></p>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">git clone https://github.com/wclimb/vue-video.git</div><div class="line"></div><div class="line">cd vue-video</div><div class="line"></div><div class="line">npm install  建议使用淘宝镜像(https://npm.taobao.org/) =&gt;  cnpm i</div><div class="line"></div><div class="line">npm run dev (运行项目)</div><div class="line"></div><div class="line">npm run build (打包项目)</div><div class="line"></div><div class="line">ps: 如果打包之后文件运行不了，请打包之前把路由的 mode:&apos;history&apos;注释掉，该功能去掉了url中丑陋的 # 号</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul>
<li><ol>
<li>注册登录登出 + 验证码 密码检测，如果用户不存在则自动创建</li>
</ol>
</li>
<li><ol>
<li>检测是否登录，如果没有登录则不允许评论和评价</li>
</ol>
</li>
<li><ol>
<li>可以上传影片到后台，进行前台展示</li>
</ol>
</li>
<li><ol>
<li>评分功能，初始化评分可以自由设置，如果没有人like则默认显示原始评分，如果有则计算当前vide的评分</li>
</ol>
</li>
<li><ol>
<li>修改用户名，检测用户名是否跟其他人重复</li>
</ol>
</li>
<li><ol>
<li>上传头像，默认没有头像</li>
</ol>
</li>
<li><ol>
<li>评论功能，评论之后可以在个人中心展示，并且可以删除</li>
</ol>
</li>
<li><ol>
<li>搜索功能，可以搜索存在的影片，如果没有则显示无结果</li>
</ol>
</li>
<li><ol>
<li>自己喜欢的video和评论的内容会在个人中心显示</li>
</ol>
</li>
</ul>
<p>综上：</p>
<ul>
<li>[x] 注册</li>
<li>[x] 登录</li>
<li>[x] 登出</li>
<li>[x] 验证码</li>
<li>[x] 详情页</li>
<li>[x] 分类</li>
<li>[x] 分类影视列表</li>
<li>[x] 修改用户名</li>
<li>[x] 上传头像</li>
<li>[x] 评论</li>
<li>[x] 删除评论</li>
<li>[x] 搜索</li>
<li>[x] 个人中心数据</li>
</ul>
<p>如果觉得对你有帮助还望关注一下，有问题可以即使提哟，觉得不错的话<code>star</code>一下也是可以的哟</p>
<h2 id="前端线上地址"><a href="#前端线上地址" class="headerlink" title="前端线上地址"></a>前端线上地址</h2><p>项目是手机端的，请使用谷歌浏览器手机预览模式</p>
<blockquote>
<p>首页默认一种类别只显示10个，可以查看更多显示全部 </p>
</blockquote>
<p>预览：<a href="http://video.wclimb.site" target="_blank" rel="external">vue-video</a></p>
<p>手机扫描图下二维码预览</p>
<p><img src="http://www.wclimb.site/cdn/1504574571.png" alt=""></p>
<h2 id="后端线上地址"><a href="#后端线上地址" class="headerlink" title="后端线上地址"></a>后端线上地址</h2><p>技术栈：<code>Node</code> + <code>Koa2</code> + <code>Mysql</code><br>预览：<a href="http://vue.wclimb.site" target="_blank" rel="external">video-admin</a><br>GitHub: <a href="https://github.com/wclimb/video-admin" target="_blank" rel="external">管理后台</a></p>
<h2 id="前端演示"><a href="#前端演示" class="headerlink" title="前端演示"></a>前端演示</h2><p><img src="http://www.wclimb.site/cdn/vue1.gif" alt=""></p>
<h3 id="主页"><a href="#主页" class="headerlink" title="主页"></a>主页</h3><p><img src="http://www.wclimb.site/cdn/home.png" alt=""> <img src="http://www.wclimb.site/cdn/search.png" alt=""></p>
<h3 id="登录页"><a href="#登录页" class="headerlink" title="登录页"></a>登录页</h3><p><img src="http://www.wclimb.site/cdn/login.png" alt=""></p>
<h3 id="个人中心页"><a href="#个人中心页" class="headerlink" title="个人中心页"></a>个人中心页</h3><p><img src="http://www.wclimb.site/cdn/personal.png" alt=""> <img src="http://www.wclimb.site/cdn/personal1.png" alt=""></p>
<h3 id="详情页"><a href="#详情页" class="headerlink" title="详情页"></a>详情页</h3><p><img src="http://www.wclimb.site/cdn/detail.png" alt=""></p>
<h2 id="后台演示"><a href="#后台演示" class="headerlink" title="后台演示"></a>后台演示</h2><p><img src="http://www.wclimb.site/cdn/admin.gif" alt=""></p>
<h2 id="有问题欢迎反馈"><a href="#有问题欢迎反馈" class="headerlink" title="有问题欢迎反馈"></a>有问题欢迎反馈</h2><p>在使用中有任何问题，欢迎反馈给我，可以用以下联系方式跟我交流</p>
<ul>
<li>邮件(875246904#qq.com, 把#换成@)</li>
<li>QQ: 875246904</li>
<li>weibo: <a href="http://weibo.com/u/3966368179" target="_blank" rel="external">@wclimb</a></li>
</ul>
<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">|-- build                            // webpack配置文件</div><div class="line">|-- config                           // 项目打包路径</div><div class="line">|-- src                              // 源码目录</div><div class="line">|   |-- assets                       // 图片文件</div><div class="line">|   |-- base                   		 // 移动端适配</div><div class="line">|   |-- components                   // 组件</div><div class="line">|   |-- data                         // 接口</div><div class="line">|   |-- router						 // 路由配置</div><div class="line">|   |-- store                        // 状态管理</div><div class="line">|   |-- style                        // 样式</div><div class="line">|    	App.vue                      // 页面入口文件</div><div class="line">|    	main.js                      // 程序入口文件</div><div class="line">|-- static                           // 静态资源</div><div class="line">|-- .babelrc                         // ES6语法编译配置</div><div class="line">|-- .editorconfig                    // 代码编写规格</div><div class="line">|-- .gitignore                       // git忽略的文件</div><div class="line">|-- .postcssrc.js                    // post-loader的插件配置文件</div><div class="line">|-- index.html                       // 入口html文件</div><div class="line">|-- package.json                     // 项目及工具的依赖配置文件</div></pre></td></tr></table></figure>
<h2 id="个人小程序"><a href="#个人小程序" class="headerlink" title="个人小程序"></a>个人小程序</h2><p><img src="http://www.wclimb.site/cdn/xcx.jpeg" alt="img"></p>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>原创</tag>
        <tag>Mysql</tag>
        <tag>javascript</tag>
        <tag>Koa</tag>
        <tag>vue</tag>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>读zepto源码，封装自己的zepto库 （三）</title>
    <url>/2017/07/18/%E8%AF%BBzepto%E6%BA%90%E7%A0%81%EF%BC%8C%E5%B0%81%E8%A3%85%E8%87%AA%E5%B7%B1%E7%9A%84zepto%E5%BA%93-%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<p>本篇着重讲选择器$()选择器<br>本例我们主要修改<code>wclimb.init=function(selector){}</code>里面的代码<br>将wclimb.init代码修改为：<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> dom</div><div class="line"><span class="keyword">if</span> (!selector) <span class="keyword">return</span> wclimb.Z()</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> selector == <span class="string">'string'</span>) &#123;</div><div class="line">	dom = wclimb.qsa(<span class="built_in">document</span>, selector)</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> selector == <span class="string">'function'</span>)&#123;</div><div class="line">	<span class="keyword">return</span> wclimb.ready(selector)</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span>&#123;</div><div class="line">	<span class="keyword">if</span> (isArray(selector)) &#123;</div><div class="line">		dom = compact(selector) </div><div class="line">	&#125;</div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (wclimb.isZ(selector)) <span class="keyword">return</span> selector		</div><div class="line">	<span class="keyword">else</span>&#123;</div><div class="line">		<span class="keyword">if</span> (isObject(selector)) dom = [selector], selector = <span class="literal">null</span> ;</div><div class="line">		<span class="keyword">else</span> dom=wclimb.qsa(<span class="built_in">document</span>,selector)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> wclimb.Z(dom, selector)</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<ul>
<li>首先判断是否存在selector，如果不存在则直接return</li>
<li>然后判断是否是字符串类型，如<code>$(&#39;a b&#39;)</code>，将选择的元素保存起来</li>
<li>如果是函数则<code>return wclimb.ready(selector)</code>就是我们经常用的<code>$(function(){})</code></li>
<li>后面判断是否是当前对象的实例（用了isZ方法）还有判断是否是数组或对象</li>
</ul>
<p>我们先在函数顶部添加如下<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">emptyArray = [], concat = emptyArray.concat, filter = emptyArray.filter</div><div class="line">slice = emptyArray.slice</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">compact</span>(<span class="params">array</span>) </span>&#123; <span class="keyword">return</span> filter.call(array, <span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123; <span class="keyword">return</span> item != <span class="literal">null</span> &#125;) &#125;</div></pre></td></tr></table></figure></p>
<p>emptyArray = []，避免出现每次都重复创建的一个数组[]<br>然后拿到数组里面的方法<br>compact就是一个数组筛选，如果某个元素不存在$([1,2,,,4]);只会创建一个[1,2,4]的数组</p>
<h2 id="wclimb-qsa方法"><a href="#wclimb-qsa方法" class="headerlink" title="wclimb.qsa方法"></a>wclimb.qsa方法</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">wclimb.qsa=<span class="function"><span class="keyword">function</span>(<span class="params">element, selector</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> found,</div><div class="line">    maybeID = selector[<span class="number">0</span>] == <span class="string">'#'</span>,</div><div class="line">    maybeClass = !maybeID &amp;&amp; selector[<span class="number">0</span>] == <span class="string">'.'</span>,</div><div class="line">    nameOnly = maybeID || maybeClass ? selector.slice(<span class="number">1</span>) : selector, <span class="comment">// Ensure that a 1 char tag name still gets checked</span></div><div class="line">    isSimple = <span class="regexp">/^[\w-]*$/</span>.test(nameOnly)</div><div class="line"></div><div class="line">	<span class="keyword">return</span> (element.getElementById &amp;&amp; isSimple &amp;&amp; maybeID) ? <span class="comment">// Safari DocumentFragment doesn't have getElementById</span></div><div class="line">	  ( (found = element.getElementById(nameOnly)) ? [found] : [] ) :</div><div class="line">	  (element.nodeType !== <span class="number">1</span> &amp;&amp; element.nodeType !== <span class="number">9</span> &amp;&amp; element.nodeType !== <span class="number">11</span>) ? [] :</div><div class="line">	  slice.call(</div><div class="line">	    isSimple &amp;&amp; !maybeID &amp;&amp; element.getElementsByClassName ? <span class="comment">// DocumentFragment doesn't have getElementsByClassName/TagName</span></div><div class="line">	    maybeClass ? element.getElementsByClassName(nameOnly) : <span class="comment">// If it's simple, it could be a class</span></div><div class="line">	    element.getElementsByTagName(selector) : <span class="comment">// Or a tag</span></div><div class="line">	    element.querySelectorAll(selector) <span class="comment">// Or it's not simple, and we need to query all</span></div><div class="line">	)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里我直接用了zepto的代码<br><code>wclimb.init=function(selector){}</code>里的代码还使用了判断数据类型的代码<code>isArray``isObject</code></p>
<h2 id="判断数据类型"><a href="#判断数据类型" class="headerlink" title="判断数据类型"></a>判断数据类型</h2><p>在函数外面添加如下代码来进行数据类型判断</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 判断类型</span></div><div class="line"><span class="keyword">var</span> obj_i=&#123;&#125;;</div><div class="line">[<span class="string">'Boolean'</span>, <span class="string">'Number'</span>,<span class="string">'String'</span>, <span class="string">'Function'</span>, <span class="string">'Array'</span> ,<span class="string">'Date'</span>, <span class="string">'RegExp'</span>, <span class="string">'Object'</span> ,<span class="string">'Error'</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">el,idx</span>)</span>&#123;</div><div class="line">	obj_i[<span class="string">"[object "</span> + el + <span class="string">"]"</span>] = el.toLowerCase()</div><div class="line">&#125;)</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">type</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> obj == <span class="literal">null</span> ? <span class="built_in">String</span>(obj) :</div><div class="line">    obj_i[<span class="built_in">Object</span>.prototype.toString.call(obj)] || <span class="string">"object"</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">obj</span>) </span>&#123; <span class="keyword">return</span> type(obj) == <span class="string">"object"</span> &#125;	</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">obj</span>) </span>&#123; <span class="keyword">return</span> type(obj) == <span class="string">"array"</span> &#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isString</span>(<span class="params">obj</span>) </span>&#123; <span class="keyword">return</span> type(obj) == <span class="string">"string"</span> &#125;</div></pre></td></tr></table></figure>
<h2 id="wclimb-ready函数"><a href="#wclimb-ready函数" class="headerlink" title="wclimb.ready函数"></a>wclimb.ready函数</h2><p>在外面设置如下函数<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">wclimb.ready = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</div><div class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        fn &amp;&amp; fn();</div><div class="line">    &#125;,<span class="literal">false</span>);</div><div class="line">    <span class="built_in">document</span>.removeEventListener(<span class="string">'DOMContentLoaded'</span>,fn,<span class="literal">true</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h2 id="wclimb-isZ函数"><a href="#wclimb-isZ函数" class="headerlink" title="wclimb.isZ函数"></a>wclimb.isZ函数</h2><p>下面代码判断<code>object</code>是不是<code>wclimb.Z</code>的实例<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">wclimb.isZ = <span class="function"><span class="keyword">function</span>(<span class="params">object</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> object <span class="keyword">instanceof</span> wclimb.Z</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在试试代码吧，我们顺便把addClass里判断hasClass代码注释去掉了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">	<span class="comment">// ready</span></div><div class="line">	$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		alert(<span class="number">1</span>)</div><div class="line">	&#125;)</div><div class="line">	<span class="comment">// addClass</span></div><div class="line">	$(<span class="string">'p'</span>).addClass(<span class="string">'a b'</span>)</div><div class="line">	<span class="comment">// 实例</span></div><div class="line">	<span class="built_in">console</span>.log($(<span class="keyword">this</span>))</div><div class="line">	<span class="comment">// 数组</span></div><div class="line">	$([<span class="number">1</span>,<span class="number">23</span>,<span class="number">3</span>,,<span class="number">4</span>])</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> wclimb = &#123;&#125;,$</div><div class="line">	emptyArray = [], concat = emptyArray.concat, filter = emptyArray.filter</div><div class="line">	slice = emptyArray.slice</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">compact</span>(<span class="params">array</span>) </span>&#123; <span class="keyword">return</span> filter.call(array, <span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123; <span class="keyword">return</span> item != <span class="literal">null</span> &#125;) &#125;</div><div class="line"></div><div class="line">	$ = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> wclimb.init(selector)</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	wclimb.init = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> dom</div><div class="line">		<span class="keyword">if</span> (!selector) <span class="keyword">return</span> wclimb.Z()</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> selector == <span class="string">'string'</span>) &#123;</div><div class="line">			dom = wclimb.qsa(<span class="built_in">document</span>, selector)</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> selector == <span class="string">'function'</span>)&#123;</div><div class="line">			<span class="keyword">return</span> wclimb.ready(selector)</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span>&#123;</div><div class="line">			<span class="keyword">if</span> (isArray(selector)) &#123;</div><div class="line">				dom = compact(selector) </div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (wclimb.isZ(selector)) <span class="keyword">return</span> selector		</div><div class="line">			<span class="keyword">else</span>&#123;</div><div class="line">				<span class="keyword">if</span> (isObject(selector)) dom = [selector], selector = <span class="literal">null</span> ;</div><div class="line">				<span class="keyword">else</span> dom=wclimb.qsa(<span class="built_in">document</span>,selector)</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> wclimb.Z(dom, selector)</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	wclimb.Z = <span class="function"><span class="keyword">function</span>(<span class="params">dom,selector</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Z(dom,selector)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">className</span>(<span class="params">node, value</span>)</span>&#123;</div><div class="line">	   <span class="keyword">var</span> klass = node.className || <span class="string">''</span>	</div><div class="line">	       </div><div class="line">	   <span class="keyword">if</span> (value === <span class="literal">undefined</span>) <span class="keyword">return</span> klass</div><div class="line">	   node.className = value  </div><div class="line">	&#125;</div><div class="line"></div><div class="line">	wclimb.Z.prototype  =  Z.prototype  =  &#123;</div><div class="line">		<span class="attr">each</span>:<span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</div><div class="line">			[].every.call(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">el, idx</span>)</span>&#123;</div><div class="line">	        <span class="keyword">return</span> callback.call(el, idx, el) !== <span class="literal">false</span></div><div class="line">	      &#125;)</div><div class="line">	      <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">addClass</span>:<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">			<span class="keyword">if</span> (!name) <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">		      <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">el,idx</span>)</span>&#123;</div><div class="line">		        <span class="keyword">if</span> (!(<span class="string">'className'</span> <span class="keyword">in</span> <span class="keyword">this</span>)) <span class="keyword">return</span></div><div class="line">		        classList = [];</div><div class="line"></div><div class="line">		        <span class="keyword">var</span> cls = className(<span class="keyword">this</span>) </div><div class="line">		        </div><div class="line">		        name.split(<span class="regexp">/\s+/g</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">klass</span>)</span>&#123;</div><div class="line"></div><div class="line">		          <span class="keyword">if</span> (!$(<span class="keyword">this</span>).hasClass(klass))</div><div class="line">		           classList.push(klass)</div><div class="line">  </div><div class="line">		        &#125;, <span class="keyword">this</span>)</div><div class="line"></div><div class="line">		        classList.length &amp;&amp; className(<span class="keyword">this</span>, cls + (cls ? <span class="string">" "</span> : <span class="string">""</span>) + classList.join(<span class="string">" "</span>))</div><div class="line"></div><div class="line">		      &#125;)</div><div class="line">			&#125;,</div><div class="line">			<span class="attr">hasClass</span> : <span class="function"><span class="keyword">function</span>(<span class="params">cls</span>) </span>&#123;</div><div class="line">			    <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'(\\s|^)'</span> + cls + <span class="string">'(\\s|$)'</span>);</div><div class="line">			    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</div><div class="line">			        <span class="keyword">if</span> (<span class="keyword">this</span>[i].className.match(reg)) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">			            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">			    &#125;</div><div class="line">			    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">			&#125;</div><div class="line">	&#125;</div><div class="line">	wclimb.ready = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</div><div class="line">	    <span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	        fn &amp;&amp; fn();</div><div class="line">	    &#125;,<span class="literal">false</span>);</div><div class="line">	    <span class="built_in">document</span>.removeEventListener(<span class="string">'DOMContentLoaded'</span>,fn,<span class="literal">true</span>);</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	wclimb.qsa=<span class="function"><span class="keyword">function</span>(<span class="params">element, selector</span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> found,</div><div class="line">	    maybeID = selector[<span class="number">0</span>] == <span class="string">'#'</span>,</div><div class="line">	    maybeClass = !maybeID &amp;&amp; selector[<span class="number">0</span>] == <span class="string">'.'</span>,</div><div class="line">	    nameOnly = maybeID || maybeClass ? selector.slice(<span class="number">1</span>) : selector, <span class="comment">// Ensure that a 1 char tag name still gets checked</span></div><div class="line">	    isSimple = <span class="regexp">/^[\w-]*$/</span>.test(nameOnly)</div><div class="line"></div><div class="line">		<span class="keyword">return</span> (element.getElementById &amp;&amp; isSimple &amp;&amp; maybeID) ? <span class="comment">// Safari DocumentFragment doesn't have getElementById</span></div><div class="line">		  ( (found = element.getElementById(nameOnly)) ? [found] : [] ) :</div><div class="line">		  (element.nodeType !== <span class="number">1</span> &amp;&amp; element.nodeType !== <span class="number">9</span> &amp;&amp; element.nodeType !== <span class="number">11</span>) ? [] :</div><div class="line">		  slice.call(</div><div class="line">		    isSimple &amp;&amp; !maybeID &amp;&amp; element.getElementsByClassName ? <span class="comment">// DocumentFragment doesn't have getElementsByClassName/TagName</span></div><div class="line">		    maybeClass ? element.getElementsByClassName(nameOnly) : <span class="comment">// If it's simple, it could be a class</span></div><div class="line">		    element.getElementsByTagName(selector) : <span class="comment">// Or a tag</span></div><div class="line">		    element.querySelectorAll(selector) <span class="comment">// Or it's not simple, and we need to query all</span></div><div class="line">		)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">Z</span>(<span class="params">dom,selector</span>) </span>&#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">var</span> i  =  <span class="number">0</span>; i &lt; dom.length; i++) &#123;</div><div class="line">			<span class="keyword">this</span>[i] = dom[i]</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">this</span>.selector = selector;</div><div class="line">		<span class="keyword">this</span>.length = dom.length</div><div class="line">	&#125;</div><div class="line">	wclimb.isZ = <span class="function"><span class="keyword">function</span>(<span class="params">object</span>) </span>&#123;</div><div class="line">	    <span class="keyword">return</span> object <span class="keyword">instanceof</span> wclimb.Z</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// 判断类型</span></div><div class="line">	<span class="keyword">var</span> obj_i=&#123;&#125;;</div><div class="line">	[<span class="string">'Boolean'</span>, <span class="string">'Number'</span>,<span class="string">'String'</span>, <span class="string">'Function'</span>, <span class="string">'Array'</span> ,<span class="string">'Date'</span>, <span class="string">'RegExp'</span>, <span class="string">'Object'</span> ,<span class="string">'Error'</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">el,idx</span>)</span>&#123;</div><div class="line">		obj_i[<span class="string">"[object "</span> + el + <span class="string">"]"</span>] = el.toLowerCase()</div><div class="line">	&#125;)</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">type</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">	    <span class="keyword">return</span> obj == <span class="literal">null</span> ? <span class="built_in">String</span>(obj) :</div><div class="line">	    obj_i[<span class="built_in">Object</span>.prototype.toString.call(obj)] || <span class="string">"object"</span></div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">obj</span>) </span>&#123; <span class="keyword">return</span> type(obj) == <span class="string">"object"</span> &#125;	</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">obj</span>) </span>&#123; <span class="keyword">return</span> type(obj) == <span class="string">"array"</span> &#125;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">isString</span>(<span class="params">obj</span>) </span>&#123; <span class="keyword">return</span> type(obj) == <span class="string">"string"</span> &#125;</div><div class="line"></div><div class="line">	<span class="built_in">window</span>.$ = <span class="built_in">window</span>.wclimb = $</div><div class="line"></div><div class="line">&#125;)()</div></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>原创</tag>
        <tag>javascript</tag>
        <tag>zepto</tag>
      </tags>
  </entry>
  <entry>
    <title>读zepto源码，封装自己的zepto库（二）</title>
    <url>/2017/07/17/%E8%AF%BBzepto%E6%BA%90%E7%A0%81%EF%BC%8C%E5%B0%81%E8%A3%85%E8%87%AA%E5%B7%B1%E7%9A%84zepto%E5%BA%93%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<p>距离上一篇zepto源码分析已经过去大半个月，想想自己都过意不去，不过之前分享了一篇node博客教程，还算干了点正事。接下来我们继续封装自己的库吧</p>
<h2 id="上节代码概览"><a href="#上节代码概览" class="headerlink" title="上节代码概览"></a>上节代码概览</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> wclimb = &#123;&#125;,$</div><div class="line"></div><div class="line">	$ = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> wclimb.init(selector)</div><div class="line">	&#125;</div><div class="line">	wclimb.init = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> dom;</div><div class="line">		dom = <span class="built_in">document</span>.querySelectorAll(selector);</div><div class="line"></div><div class="line">		<span class="keyword">return</span> wclimb.Z(dom,selector)</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	wclimb.Z = <span class="function"><span class="keyword">function</span>(<span class="params">dom,selector</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Z(dom,selector)</div><div class="line">	&#125;</div><div class="line">	wclimb.Z.prototype  =  Z.prototype  =  &#123;</div><div class="line">		<span class="attr">test</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			alert(<span class="number">1</span>)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">Z</span>(<span class="params">dom,selector</span>) </span>&#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">var</span> i  =  <span class="number">0</span>; i &lt; dom.length; i++) &#123;</div><div class="line">			<span class="keyword">this</span>[i] = dom[i]</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">this</span>.selector = selector;</div><div class="line">		<span class="keyword">this</span>.length = dom.length</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="built_in">window</span>.$ = <span class="built_in">window</span>.wclimb = $</div><div class="line"></div><div class="line">&#125;)()</div></pre></td></tr></table></figure>
<h2 id="each方法"><a href="#each方法" class="headerlink" title="each方法"></a>each方法</h2><a id="more"></a>
<p>在<code>wclimb.Z.prototype=Z.prototype=</code>里面添加方法each</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">wclimb.Z.prototype  =  Z.prototype  =  &#123;</div><div class="line">	<span class="attr">each</span>:<span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</div><div class="line">		[].every.call(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">el, idx</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> callback.call(el, idx, el) !== <span class="literal">false</span></div><div class="line">      &#125;)</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过数组的<code>every</code>方法进行遍历，然后看看每次<code>callback</code>是不是都不是<code>false</code>，如果是则结束遍历</p>
<p>最后通过 <code>return this</code> 来达到链式调用的效果</p>
<h2 id="addClass方法"><a href="#addClass方法" class="headerlink" title="addClass方法"></a>addClass方法</h2><p>继续在里面添加addClass方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">addClass:<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span> (!name) <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">el,idx</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span> (!(<span class="string">'className'</span> <span class="keyword">in</span> <span class="keyword">this</span>)) <span class="keyword">return</span></div><div class="line">        classList = [];</div><div class="line"></div><div class="line">        <span class="keyword">var</span> cls = className(<span class="keyword">this</span>) </div><div class="line">        <span class="comment">// newName = funcArg(this, name, idx, cls)</span></div><div class="line">        name.split(<span class="regexp">/\s+/g</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">klass</span>)</span>&#123;</div><div class="line"></div><div class="line">          <span class="comment">// if (!$(this).hasClass(klass)) </span></div><div class="line">          	classList.push(klass)</div><div class="line">          </div><div class="line">        &#125;, <span class="keyword">this</span>)</div><div class="line">      </div><div class="line">        classList.length &amp;&amp; className(<span class="keyword">this</span>, cls + (cls ? <span class="string">" "</span> : <span class="string">""</span>) + classList.join(<span class="string">" "</span>))</div><div class="line">     &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>我们先判断<code>name</code>存在与否，没有就直接<code>return this</code>，支持链式调用</li>
<li>新建一个数组，存放我们要添加的<code>class</code>，因为可能要同时添加多个</li>
<li>通过调用<code>className</code>方法来获取之前的<code>class</code>，并保存起来。<code>clasName</code>方法在下面</li>
<li>我们添加<code>class</code>一般是这样<code>addClass(&#39;a b c&#39;)</code>，所以我们通过正则表达式把他们用空格分开<code>/\s+/g</code>,用<code>+</code>的原因是，可能会有多个空格的存在，接着对他们进行循环</li>
<li>通过hasClass判断之前是否已经存在需要添加的class，如果有就push到<code>classList</code>数组里面。我们先注释掉hasClass这段代码，因为其中用到了$(this) ,querySelector是不支持的哟，所以后面我们得作判断，判断$()这里面放的是元素、函数、类数组等等。</li>
<li>最后通过函数<code>className</code>方法把他们用空格连接起来</li>
</ul>
<p>发现里面有一个没有声明的<code>className</code>方法<br>所以我们在<code>wclimb.Z.prototype=Z.prototype=</code>上面声明该函数<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">//获取或者设置class</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">className</span>(<span class="params">node, value</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> klass = node.className || <span class="string">''</span>	</div><div class="line"></div><div class="line"><span class="keyword">if</span> (value === <span class="literal">undefined</span>) <span class="keyword">return</span> klass</div><div class="line">	node.className = value</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>该方法主要是获取class和设置class的作用</p>
<h2 id="hasClass方法"><a href="#hasClass方法" class="headerlink" title="hasClass方法"></a>hasClass方法</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">hasClass : <span class="function"><span class="keyword">function</span>(<span class="params">cls</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'(\\s|^)'</span> + cls + <span class="string">'(\\s|$)'</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>[i].className.match(reg)) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过正则匹配，如果存在则返回<code>true</code>，否则返回<code>false</code>，最后<code>return this</code>支持链式调用</p>
<p>现在来试试效果吧<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">html:</div><div class="line">	<span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"a"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div><div class="line">js:</div><div class="line">	$(<span class="string">'p'</span>).addClass(<span class="string">'test other'</span>) <span class="comment">// &lt;p class="a test other"&gt;&lt;/p&gt;</span></div><div class="line">	<span class="built_in">console</span>.log($(<span class="string">'p'</span>).hasClass(<span class="string">'a'</span>)) <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> wclimb = &#123;&#125;,$</div><div class="line"></div><div class="line">	$ = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> wclimb.init(selector)</div><div class="line">	&#125;</div><div class="line">	wclimb.init = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> dom;</div><div class="line">		dom = <span class="built_in">document</span>.querySelectorAll(selector);</div><div class="line"></div><div class="line">		<span class="keyword">return</span> wclimb.Z(dom,selector)</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	wclimb.Z = <span class="function"><span class="keyword">function</span>(<span class="params">dom,selector</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Z(dom,selector)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	 <span class="function"><span class="keyword">function</span> <span class="title">className</span>(<span class="params">node, value</span>)</span>&#123;<span class="comment">//获取或者设置class</span></div><div class="line">	    <span class="keyword">var</span> klass = node.className || <span class="string">''</span>	 </div><div class="line"></div><div class="line">	    <span class="keyword">if</span> (value === <span class="literal">undefined</span>) <span class="keyword">return</span> klass</div><div class="line">	    node.className = value</div><div class="line"></div><div class="line">	  &#125;</div><div class="line"></div><div class="line">	wclimb.Z.prototype  =  Z.prototype  =  &#123;</div><div class="line">		<span class="attr">each</span>:<span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</div><div class="line">			[].every.call(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params">el, idx</span>)</span>&#123;</div><div class="line">	        <span class="keyword">return</span> callback.call(el, idx, el) !== <span class="literal">false</span></div><div class="line">	      &#125;)</div><div class="line">	      <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">addClass</span>:<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">			<span class="keyword">if</span> (!name) <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">	      	<span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">el,idx</span>)</span>&#123;</div><div class="line">		        <span class="keyword">if</span> (!(<span class="string">'className'</span> <span class="keyword">in</span> <span class="keyword">this</span>)) <span class="keyword">return</span></div><div class="line">		        classList = [];</div><div class="line"></div><div class="line">		        <span class="keyword">var</span> cls = className(<span class="keyword">this</span>) </div><div class="line">		       </div><div class="line">		        name.split(<span class="regexp">/\s+/g</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">klass</span>)</span>&#123;</div><div class="line"></div><div class="line">		          <span class="comment">// if (!$(this).hasClass(klass))</span></div><div class="line">		           classList.push(klass)</div><div class="line"></div><div class="line">		        &#125;, <span class="keyword">this</span>)</div><div class="line">		       </div><div class="line">		        classList.length &amp;&amp; className(<span class="keyword">this</span>, cls + (cls ? <span class="string">" "</span> : <span class="string">""</span>) + classList.join(<span class="string">" "</span>))</div><div class="line"></div><div class="line">		    &#125;)</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">hasClass</span> : <span class="function"><span class="keyword">function</span>(<span class="params">cls</span>) </span>&#123;</div><div class="line">		    <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'(\\s|^)'</span> + cls + <span class="string">'(\\s|$)'</span>);</div><div class="line">		    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++) &#123;</div><div class="line">		        <span class="keyword">if</span> (<span class="keyword">this</span>[i].className.match(reg)) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">		            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">		    &#125;</div><div class="line">		    <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">Z</span>(<span class="params">dom,selector</span>) </span>&#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">var</span> i  =  <span class="number">0</span>; i &lt; dom.length; i++) &#123;</div><div class="line">			<span class="keyword">this</span>[i] = dom[i]</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">this</span>.selector = selector;</div><div class="line">		<span class="keyword">this</span>.length = dom.length</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="built_in">window</span>.$ = <span class="built_in">window</span>.wclimb = $</div><div class="line"></div><div class="line">&#125;)()</div></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>原创</tag>
        <tag>javascript</tag>
        <tag>zepto</tag>
      </tags>
  </entry>
  <entry>
    <title>读zepto源码，封装自己的zepto库（一）</title>
    <url>/2017/06/29/%E8%AF%BBzepto%E6%BA%90%E7%A0%81%EF%BC%8C%E5%B0%81%E8%A3%85%E8%87%AA%E5%B7%B1%E7%9A%84zepto%E5%BA%93%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><blockquote>
<p>读zepto源码，封装自己的zepto库系列是自己在读zepto源码的一些理解，有错误的地方还望指出。如果觉得本系列对你有所帮助，还请持续关注wclimb，谢谢。</p>
</blockquote>
<h2 id="zepto的整体架构"><a href="#zepto的整体架构" class="headerlink" title="zepto的整体架构"></a>zepto的整体架构</h2><p>首先来看看整体代码结构</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> wclimb = &#123;&#125;,$</div><div class="line"></div><div class="line">	$ = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> wclimb.init(selector)</div><div class="line">	&#125;</div><div class="line">	wclimb.init = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> dom;</div><div class="line">		dom = <span class="built_in">document</span>.querySelectorAll(selector);</div><div class="line"></div><div class="line">		<span class="keyword">return</span> wclimb.Z(dom,selector)</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	wclimb.Z = <span class="function"><span class="keyword">function</span>(<span class="params">dom,selector</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Z(dom,selector)</div><div class="line">	&#125;</div><div class="line">	wclimb.Z.prototype  =  Z.prototype  =  &#123;</div><div class="line">		<span class="attr">test</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			alert(<span class="number">1</span>)</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">Z</span>(<span class="params">dom,selector</span>) </span>&#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">var</span> i  =  <span class="number">0</span>; i &lt; dom.length; i++) &#123;</div><div class="line">			<span class="keyword">this</span>[i] = dom[i]</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">this</span>.selector = selector;</div><div class="line">		<span class="keyword">this</span>.length = dom.length</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="built_in">window</span>.$ = <span class="built_in">window</span>.wclimb = $</div><div class="line"></div><div class="line">&#125;)()</div></pre></td></tr></table></figure>
<p>首先我们设置了一个闭包，避免产生全局变量<br><a id="more"></a><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	...</div><div class="line">&#125;)()</div></pre></td></tr></table></figure></p>
<p>我们定义一个对象wclimb和$，以便后面使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> wclimb = &#123;&#125;,$</div></pre></td></tr></table></figure>
<p>$函数返回了wclimb.init(selector),我们知道使用zepto的时候，一般是$(‘p’)，而selector就是p元素，当然不止这一种情况如$(function(){}),所以对选择器后面我们要做判断<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">$ = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> wclimb.init(selector)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>而wclimb.init首先定义了一个dom，通过选择器选取的元素赋值给dom，最后返回wclimb.init，传入dom和选择元素selector</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">wclimb.init = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> dom;</div><div class="line">	dom = <span class="built_in">document</span>.querySelector(selector);</div><div class="line">	<span class="keyword">return</span> wclimb.Z(dom,selector)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以看到之前我们定义了对象wclimb，而后我们就往里面添加了一些方法，就像：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">wclimb = &#123;</div><div class="line">	init：<span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> dom;</div><div class="line">		dom = <span class="built_in">document</span>.querySelector(selector);</div><div class="line">		<span class="keyword">return</span> wclimb.Z(dom,selector)</div><div class="line">	&#125;,</div><div class="line">	<span class="attr">Z</span>: <span class="function"><span class="keyword">function</span>(<span class="params">dom,selector</span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> Z(dom,selector)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过wclimb.Z，如果有看过zepto源码的同学应该对此有了解.每次用$调用的时候,将直接返回一个Z的实例.达到无new调用的效果,$(‘p’)返回一个实例，然后$(‘p’).test()调用他的原形方法，这里的方法是test</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">wclimb.Z = <span class="function"><span class="keyword">function</span>(<span class="params">dom,selector</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> Z(dom,selector)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Z</span>(<span class="params">dom,selector</span>) </span>&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; dom.length; i++) &#123;</div><div class="line">		<span class="keyword">this</span>[i] = dom[i]</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">this</span>.selector = selector;</div><div class="line">	<span class="keyword">this</span>.length = dom.length</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于我们是return new Z(dom,selector),那自然,我们需要手动的把wclimb.Z的prototype指向Z的prototype</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">wclimb.Z.prototype = Z.prototype&#123;&#125;</div><div class="line"></div><div class="line">我们可以在里面添加方法了，如addClass eq等，我们试试加一个test</div><div class="line"></div><div class="line">wclimb.Z.prototype = Z.prototype&#123;</div><div class="line">	<span class="attr">test</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">'test'</span>)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Z函数是这样的，因为我们选择器选择的元素是一个数组（其实不是）我们把this指向选择的元素，然后添加两个元素selector和length，分别代表选择的元素名和元素的长度</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Z</span>(<span class="params">dom,selector</span>) </span>&#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; dom.length; i++) &#123;</div><div class="line">		<span class="keyword">this</span>[i] = dom[i]</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">this</span>.selector = selector;</div><div class="line">	<span class="keyword">this</span>.length = dom.length</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后我们在window上对外暴露一个接口,我们就可以用 $(‘p’) 或者wclimb(‘p’) 即可调用.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">window</span>.$ = <span class="built_in">window</span>.wclimb = $</div></pre></td></tr></table></figure>
<p>现在可以试试能不能运行</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">html：&lt;p&gt;test&lt;/p&gt;</div><div class="line"></div><div class="line">js：$('p')  调用方法试试 $('p').test()</div></pre></td></tr></table></figure>
<p>我们的zepto已经完成了，是不是很简单？骗你的，还差得远呢，后面会慢慢完善。待续。。。<br>如果你觉得该文章帮助到了你，不妨star一下<a href="https://github.com/wclimb/wclimb.github.io" target="_blank" rel="external">https://github.com/wclimb/wclimb.github.io</a> ，感谢</p>
]]></content>
      <tags>
        <tag>原创</tag>
        <tag>javascript</tag>
        <tag>zepto</tag>
      </tags>
  </entry>
</search>
